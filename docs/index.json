{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Oqtane API Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane API Documentation Note The API documentation is still work-in-progress. Colors and Icons APIs can be daunting. Because of this, we've color-coded the menu to the left and added icons to make it easier for you to get around. Note This is what the colors and icons in the TOC mean: Anything that's light gray / subdued is probably not of interest to you marks WebApi related things marks things related to data like models and repositories marks Module related things marks things related to themes These areas are probably what you would like to research TODO"
  },
  "guides/concepts/404-page-behavior.html": {
    "href": "guides/concepts/404-page-behavior.html",
    "title": "404 Page Behavior | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "404 Page Behavior Issue Description This document aims to provide clarity on the behavior of the 404 page in the Oqtane Framework. It includes information on various scenarios where the 404 page is encountered and how it is handled within the framework. Use Cases The 404 page is utilized in multiple scenarios within the Oqtane Framework: Page Not Found: When a user requests a URL that does not correspond to any existing page in the site, and it has not been mapped using URL Mapping, the user is redirected to the 404 page. Unauthorized Access: If a user attempts to access a page for which they do not have permission, they are redirected to the 404 page instead of revealing the existence of the page. Effective Date and Expiry Date: If a page exists but the current date is outside the range specified by the Effective Date and Expiry Date, the user is directed to the 404 page. Framework Behavior In the Oqtane Framework, the term \"404\" refers to the friendly page that users are redirected to when the framework is unable to navigate them to the requested URL. This page has a path of \"/404\". Regarding permissions, there has been debate about whether to strictly adhere to HTTP status codes or to prioritize security by not revealing the existence of pages to unauthorized users. As of now, Oqtane has opted for a single \"friendly\" page for handling these scenarios. Reference For more details and discussions on this topic, refer to issue #4088 in the Oqtane Framework repository. Conclusion By understanding the behavior of the 404 page in the Oqtane Framework, administrators can better manage and customize the user experience when encountering non-existent or unauthorized URLs."
  },
  "guides/concepts/dll-handling.html": {
    "href": "guides/concepts/dll-handling.html",
    "title": "Oqtane Concepts: DLL Handling | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Concepts: DLL Handling How / Why DLLs are loaded into memory: the .NET Core philosophy is to only load the specific assemblies an app needs ( to reduce startup time and memory ) by default .NET Core will only load assemblies statically linked to the main app - it will not load every DLL in the /bin it will not load Oqtane module/theme DLLs as these are dynamically linked therefore Oqtane needs to manually load its modules/themes in order to do this it needs to be able to quickly identify the DLLs the only option available is via filename, as any other approach requires reflection which consumes startup time/processing and memory the convention is that the filename must contain oqtane once the required DLLs are loaded into the AppDomain, subsequent operations for assemblies can use the AppDomain rather than the file system the majority of assemblies in the AppDomain are not relevant to Oqtane reflection is expensive so we should only use reflection on assemblies which are actually relevant to Oqtane assembly fullname is same as DLL filename, so we can look for the oqtane qualifier to identify Oqtane assemblies"
  },
  "guides/concepts/index.html": {
    "href": "guides/concepts/index.html",
    "title": "Oqtane Concepts | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Concepts Here, we explain why Oqtane works the way it does. Explore the following concepts: DLL Handling 404 Page Behavior Feel free to dive deeper into these topics by following the provided links! ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/database-management/assets/placeholder.html": {
    "href": "guides/database-management/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/database-management/best-practices.html": {
    "href": "guides/database-management/best-practices.html",
    "title": "Best Practices for Oqtane Development | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Best Practices for Oqtane Development This guide provides essential best practices for developing and maintaining an Oqtane-based application. By following these guidelines, you can ensure a more efficient, scalable, and secure development experience. 1. Organize Your Modules and Themes 1.1 Modular Design Oqtane follows a modular architecture that enables you to extend its functionality by creating custom modules. When developing a new feature, it's recommended to: Keep features encapsulated in their own modules for easier maintenance. Follow the single responsibility principle: each module should focus on one area of functionality. 1.2 Consistent Theme Structure Themes are essential for the visual look of your application. Follow these practices for managing themes: Use a consistent folder structure for assets (CSS, images, scripts). Separate core theme styles from custom modifications. Maintain responsive design practices to ensure compatibility across devices. 2. Secure Your Application 2.1 Use Secure Communication (SSL/TLS) Always use SSL/TLS for your Oqtane application, especially for production environments. This ensures secure communication between clients and servers. Set up HTTPS for your web application. Use strong certificates and avoid using expired or self-signed certificates in production. 2.2 Secure User Authentication Make sure to implement strong authentication practices: Use two-factor authentication (2FA) for administrative accounts. Regularly review and update user roles and permissions. Implement password strength policies and encourage users to update their passwords periodically. 2.3 Protect Sensitive Data When dealing with sensitive data, ensure encryption and secure storage: Encrypt sensitive data both at rest and in transit. Use secure storage solutions for user credentials, such as hashing algorithms for passwords. 3. Optimize Performance 3.1 Enable Caching Enable caching where appropriate to improve the performance of your Oqtane site: Use the built-in caching mechanisms in Oqtane to store static content. Cache database queries and frequently accessed data to reduce load on the server. 3.2 Optimize Database Queries Efficient database interactions are key to performance: Avoid complex queries that may impact performance. Regularly review the database schema to ensure it is optimized for the queries it serves. 3.3 Minimize Frontend Asset Size Minimize the size of your frontend assets: Use minified versions of CSS and JavaScript files. Combine smaller CSS and JS files into single files to reduce HTTP requests. 4. Maintainable Code and Version Control 4.1 Use Version Control (Git) Make sure your codebase is under version control, and follow these best practices: Create meaningful commit messages. Use feature branches for new development and keep the main branch stable. 4.2 Code Reviews Before merging new features or changes, perform code reviews: Review for code quality, consistency, and adherence to Oqtane best practices. Test the code in different environments (development, staging, production). 5. Backup and Recovery Strategy 5.1 Regular Backups Create regular backups for your Oqtane application, including: The application files and configuration. The database, especially before and after migrations. 5.2 Disaster Recovery Plan Develop a disaster recovery plan that includes: Restoring the application from a backup. Handling server outages or data corruption. 6. Documentation and Knowledge Sharing 6.1 Maintain Clear Documentation Ensure that your code and processes are well-documented: Write clear documentation for custom modules, themes, and configuration settings. Update documentation regularly to reflect changes in functionality. 6.2 Share Knowledge with Your Team Encourage team collaboration by: Sharing best practices and lessons learned with other developers. Maintaining an internal knowledge base for troubleshooting and solutions."
  },
  "guides/database-management/database-schema.html": {
    "href": "guides/database-management/database-schema.html",
    "title": "Oqtane Schema Documentation - Version 6.0.0 | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Schema Documentation - Version 6.0.0 Table of Contents Enums LogFunction Enum LogLevel Enum MigrationType Enum ResourceDeclaration Enum (Deprecated) ResourceLevel Enum ResourceLocation Enum ResourceType Enum Runtime Enum SearchSortField Enum SearchSortOrder Enum SecurityAccessLevel Enum Models Alias Model Culture Model Database Model ExternalLoginProvider Model Installation Model JobLog Model Log Model MigrationHistoryTable Model ModuleContent Model Package Model RequestCulture Model Resource Model Result Model Route Model SearchContent Model SearchContentProperty Model SearchContentWord Model SearchQuery Model SearchResults Model SearchWord Model Sitemap Model SiteTemplate Model PageTemplate Model PageTemplateModule Model SqlQuery Model Sync Model Template Model ThemeControl Model UrlMapping Model UserValidateResult Model Visitor Model Enums LogFunction Enum The LogFunction enum categorizes log entries based on the type of operation being performed. Create: Logs when a new entity is created. Read: Logs when an entity is read. Update: Logs when an entity is updated. Delete: Logs when an entity is deleted. Security: Logs security-related activities. Other: Logs other activities not covered by the above. Example: LogFunction logFunction = LogFunction.Create; LogLevel Enum The LogLevel enum sets the verbosity level for log entries. Higher levels indicate more severe messages. Trace: Detailed information for troubleshooting. Debug: Debugging information for development purposes. Information: Standard informational logs. Warning: Warnings about potential issues. Error: Logs errors that indicate a problem. Critical: Critical errors requiring immediate attention. None: No logging. Description: This enum is used to set the level of verbosity for log entries. The higher the level, the more severe the message. Example: LogLevel logLevel = LogLevel.Error; MigrationType Enum The MigrationType enum specifies whether to apply or roll back database changes during migration. Up: Migrating database schema upwards (applying changes). Down: Rolling back database schema changes. Example: MigrationType migrationType = MigrationType.Up; ResourceDeclaration Enum (Deprecated) Description: This enum was used to define whether a resource (like a script or stylesheet) is declared at a local or global level. It is now deprecated and should not be used. Local: Resource is declared at the local level (specific to the current scope). Global: Resource is available globally across the application. Note: Use ResourceLevel enum instead for specifying resource scope. ResourceLevel Enum The ResourceLevel enum specifies the scope of a resource's availability, determining the context in which a resource is accessible. Undefined: Resource level is not specified. Site: Resource is associated with a specific site. Page: Resource is associated with a specific page. Module: Resource is associated with a specific module. Example: ResourceLevel resourceLevel = ResourceLevel.Page; ResourceLocation Enum The ResourceLocation enum specifies whether a resource (such as a script or CSS file) should be loaded in the <head> or <body> of an HTML document. Head: Resource is placed in the <head> section. Body: Resource is placed just before the closing </body> tag. Example: ResourceLocation resourceLocation = ResourceLocation.Head; ResourceType Enum The ResourceType enum defines the type of resource, which can either be a CSS file or a JavaScript file. Stylesheet: Resource is a CSS stylesheet. Script: Resource is a JavaScript script. Example: ResourceType resourceType = ResourceType.Stylesheet; Runtime Enum The Runtime enum specifies the runtime environment of the application, helping determine the appropriate execution context. Server: Application is running on the server. WebAssembly: Application is running in the WebAssembly environment (browser). Auto: Automatically detects the runtime environment. Hybrid: Supports both server and WebAssembly environments. Example: Runtime runtime = Runtime.Server; SearchSortField Enum The SearchSortField enum specifies the sorting order for search results, allowing control based on relevance, title, or last modified timestamp. Relevance: Sort results by relevance to the search query. Title: Sort results by the resource title. LastModified: Sort results by the last modified date. Example: SearchSortField sortField = SearchSortField.Relevance; SearchSortOrder Enum The SearchSortOrder enum defines whether the search results should be sorted in ascending or descending order. Ascending: Sort in ascending order. Descending: Sort in descending order. Example: SearchSortOrder sortOrder = SearchSortOrder.Ascending; SecurityAccessLevel Enum The SecurityAccessLevel enum controls the level of access a user has in the system, ranging from no access (Anonymous) to full administrative or host access. Anonymous: No authentication required; accessible by everyone. View: Users can view content. Edit: Users can edit content. Admin: Users have administrative privileges. Host: Users have host-level access (highest privilege). Example: SecurityAccessLevel accessLevel = SecurityAccessLevel.Admin; Notes: These enums are critical for managing various functionalities in the Oqtane framework, such as logging, resource management, security, and search sorting. The ResourceDeclaration enum is marked as obsolete and should no longer be used in new development. Models Alias Model The Alias model represents an alias for a site within the Oqtane framework. Properties: AliasId: Primary key used for internal site identification. Name: The alias name, representing the URL (e.g., oqtane.me or oqtane.me/products). TenantId: Foreign key referencing the Tenant to which the alias belongs. SiteId: Foreign key referencing the Site to which the alias belongs. IsDefault: Indicates whether this alias is the default for the Tenant/Site. Path: Extracted from the URL to provide the part after the first slash, used for routing. SiteKey: Combines TenantId and SiteId to create a unique identifier for the site. Protocol: Defines the protocol (e.g., http:// or https://) for accessing the alias. BaseUrl: Base URL for static resources, typically for remote clients. Example Usage: var alias = new Alias { AliasId = 1, Name = \"oqtane.me\", TenantId = 1, SiteId = 1, IsDefault = true }; // Access the Path property string path = alias.Path; // returns \"\" Change Log: Initial Creation: Added primary properties for AliasId, Name, TenantId, SiteId, and IsDefault. Enhancement: Added Path property to extract the URL part after the first slash. Update: Introduced SiteKey and Protocol properties for better identification and request handling. Refinement: Added BaseUrl property for accessing static resources. Culture Model The Culture model represents a culture used within the Oqtane framework. Properties: Name: The culture's short code (e.g., en or en-US). DisplayName: The friendly display name of the culture (e.g., English (United States)). IsDefault: Indicates if this culture is the default for the system (currently unverified). Example Usage: var culture = new Culture { Name = \"en-US\", DisplayName = \"English (United States)\", IsDefault = true }; Change Log: Initial Creation: Defined primary properties for Name, DisplayName, and IsDefault. Database Model The Database model represents a database configuration within the Oqtane framework. Properties: Name: The name of the database. ControlType: The UI control used to configure the database (e.g., SqlServerConfig). DBType: The full namespace of the database type (e.g., SqlServerDatabase). IsDefault: A flag indicating whether this database is the default database provider. Example Usage: var database = new Database { Name = \"OqtaneDB\", ControlType = \"Oqtane.Installer.Controls.SqlServerConfig, Oqtane.Client\", DBType = \"Oqtane.Database.SqlServer.SqlServerDatabase, Oqtane.Database.SqlServer\", IsDefault = true }; Change Log: Initial Creation: Added properties for Name, ControlType, DBType, and IsDefault. ExternalLoginProvider Model The ExternalLoginProvider model represents an external login provider within the Oqtane framework. Properties: Name: The name of the external login provider (e.g., Google, Facebook). Settings: A dictionary of key-value pairs for the provider's configuration settings. Example Usage: var externalLoginProvider = new ExternalLoginProvider { Name = \"Google\", Settings = new Dictionary<string, string> { {\"ClientId\", \"your-client-id\"}, {\"ClientSecret\", \"your-client-secret\"} } }; Change Log: Initial Creation: Defined properties for Name and Settings. File Model The File model represents a file within the Oqtane framework. Properties: FileId: Primary identifier for the file. FolderId: Foreign key referencing the folder the file belongs to. Name: The name of the file. Extension: File extension (e.g., 'jpg'), lowercase and without the dot. Size: File size in bytes. ImageHeight: Height of the image in pixels. ImageWidth: Width of the image in pixels. Description: Description of the file. IsDeleted: Flag indicating if the file is marked as deleted (deprecated, not used). Folder: Reference to the Folder object, used to determine the site the file belongs to. Url: URL for accessing the file. Example Usage: var file = new File { FileId = 1, FolderId = 10, Name = \"example.jpg\", Extension = \"jpg\", Size = 2048, ImageHeight = 1080, ImageWidth = 1920, Description = \"An example image file\", IsDeleted = false, Url = \"/files/example.jpg\" }; Change Log: Initial creation of File model. Added properties for image dimensions. Deprecated IsDeleted property. Folder Model The Folder model represents a folder within the Oqtane framework. Properties: FolderId: Primary identifier for the folder. SiteId: Foreign key referencing the site the folder belongs to. ParentId: Foreign key referencing the parent folder, if any. Type: Type of the folder based on predefined folder types. Name: The name of the folder. Path: Path to the folder. Order: Sorting order of the folder. ImageSizes: List of image sizes that can be generated from uploaded images. Capacity: Maximum capacity of the folder in bytes. IsSystem: Indicates if the folder is a system folder. IsDeleted: Deprecated flag indicating if the folder is marked as deleted. PermissionList: List of permissions for the folder. Level: Depth level of the folder in the hierarchy. HasChildren: Indicates if the folder has sub-items. Permissions: Deprecated property for folder permissions (use PermissionList instead). Example Usage: var folder = new Folder { FolderId = 1, SiteId = 1, ParentId = null, Type = \"Documents\", Name = \"Project Files\", Path = \"/project-files\", Order = 1, ImageSizes = \"200x200,x200,200x\", Capacity = 10485760, IsSystem = false, IsDeleted = false, PermissionList = new List<Permission>(), Level = 0, HasChildren = true }; // Accessing properties string folderName = folder.Name; // returns \"Project Files\" int folderCapacity = folder.Capacity; // returns 10485760 (10 MB) Change Log: Initial Creation: Added primary properties for FolderId, SiteId, ParentId, Type, Name, Path, Order, ImageSizes, Capacity, IsSystem, and IsDeleted. Enhancement: Added PermissionList, Level, and HasChildren properties. Update: Deprecated the Permissions property and provided a replacement with PermissionList. Installation Model The Installation model represents the result of an installation attempt within the Oqtane framework. Success: Boolean flag indicating whether the installation was successful. Message: Message or error description in case something failed. Alias: Current alias value retrieved from the server during installation. Example Usage: var installation = new Installation { Success = true, Message = \"Installation completed successfully.\", Alias = new Alias { AliasId = 1, Name = \"oqtane.me\", TenantId = 1, SiteId = 1 } }; // Accessing properties bool isSuccess = installation.Success; // returns true string installMessage = installation.Message; // returns \"Installation completed successfully.\" Alias installAlias = installation.Alias; // returns Alias object Change Log: Initial Creation: Added primary properties for Success, Message, and Alias. Job Model The Job model represents a scheduled task within the Oqtane framework. JobId: Internal ID of the job. Name: Name for simple identification. JobType: Type of job. Frequency: Unit used to define how often the job should run (e.g., 'm' for minutes, 'H' for hours). Interval: How often the job should run, in conjunction with Frequency. StartDate: When the job is to be run for the first time. EndDate: When the job is to be run for the last time. IsEnabled: Indicates if the job is activated/enabled. IsStarted: Indicates if the job has ever started running. IsExecuting: Indicates if the job is currently executing. NextExecution: When the job will run next. RetentionHistory: (Todo: Document the purpose of this property). Example Usage: var job = new Job { JobId = 1, Name = \"Daily Backup\", JobType = \"Backup\", Frequency = \"H\", Interval = 24, StartDate = DateTime.Now, EndDate = DateTime.Now.AddYears(1), IsEnabled = true, IsStarted = false, IsExecuting = false, NextExecution = DateTime.Now.AddHours(24), RetentionHistory = 30 }; // Accessing properties bool isEnabled = job.IsEnabled; // returns true DateTime? nextExecution = job.NextExecution; // returns the next execution time Change Log: Initial Creation: Added primary properties for JobId, Name, JobType, Frequency, Interval, StartDate, EndDate, IsEnabled, IsStarted, IsExecuting, and NextExecution. Enhancement: Added RetentionHistory property. JobLog Model The JobLog model represents a record of a job execution within the Oqtane framework. JobLogId: Internal ID of the job log. JobId: Reference to the job that was run. StartDate: Timestamp when the job started. FinishDate: Timestamp when the job ended. Succeeded: Indicates whether the job succeeded. Notes: Additional protocol information left after the job ran. Job: Reference to the job, though it's not clear if this is always populated. Example Usage: var jobLog = new JobLog { JobLogId = 1, JobId = 100, StartDate = DateTime.Now, FinishDate = DateTime.Now.AddMinutes(30), Succeeded = true, Notes = \"Backup completed successfully.\", Job = new Job { JobId = 100, Name = \"Daily Backup\" } }; // Accessing properties bool? succeeded = jobLog.Succeeded; // returns true string logNotes = jobLog.Notes; // returns \"Backup completed successfully.\" Change Log: Initial Creation: Added primary properties for JobLogId, JobId, StartDate, FinishDate, Succeeded, Notes, and Job. For the database-schema.md file, you can simplify the documentation to make it concise and focused on essential details. Here‚Äôs an example of how you might document the Language model without the full class definition: Language Model The Language model provides information about languages used on different sites within the Oqtane framework. Properties: LanguageId: Internal ID for the language. SiteId: Nullable reference to a Site. Not all languages need to be linked to a specific site, hence the property is nullable. Code: Language/Culture code (e.g., 'en-US') corresponding to Culture.Name. IsDefault: Indicates if this is the default language for a site. Name: (Not Mapped) Language name corresponding to Culture.DisplayName, not Culture.Name. Version: (Not Mapped) Version of the satellite assembly. Example Usage: var language = new Language { LanguageId = 1, SiteId = 100, Code = \"en-US\", IsDefault = true, Name = \"English (United States)\", Version = \"1.0.0\" }; // Cloning the language object var clonedLanguage = language.Clone(); Change Log: Initial Creation: Added primary properties for LanguageId, SiteId, Code, IsDefault, Name, and Version. Enhancement: Added Clone method for creating copies of the Language object. Log Model The Log model represents an entry in the events log within the Oqtane framework. Properties: LogId: Internal ID of the log entry. SiteId: Nullable reference to the Site related to this log entry. LogDate: Timestamp when the log entry was created. PageId: Nullable reference to the Page related to this log entry. ModuleId: Nullable reference to the Module related to this log entry. UserId: Nullable reference to the User related to this log entry. Url: URL relevant to this log entry, if applicable. Server: Name of the server that created this entry. Category: Usually the full type name related to the log entry. Feature: Feature associated with this log entry. Function: Function or method associated with this log entry. Level: Log level or severity of the log entry. Message: Log message. MessageTemplate: Template used for the log message. Exception: Information about any exceptions raised. Properties: Additional properties or metadata related to the log entry. Example Usage: var log = new Log { LogId = 1, SiteId = 10, LogDate = DateTime.Now, PageId = 20, ModuleId = 30, UserId = 40, Url = \"https://example.com\", Server = \"Server1\", Category = \"Oqtane.Pages.PageController\", Feature = \"PageLoad\", Function = \"GetPage\", Level = \"Error\", Message = \"An error occurred while loading the page.\", MessageTemplate = \"Error loading page {PageId}\", Exception = \"NullReferenceException\", Properties = \"Additional context or metadata\" }; Change Log: Initial Creation: Added primary properties for LogId, SiteId, LogDate, PageId, ModuleId, UserId, Url, Server, Category, Feature, Function, Level, Message, MessageTemplate, Exception, and Properties. MigrationHistoryTable Model The MigrationHistoryTable model provides information about the migration history table used for tracking database migrations within the Oqtane framework. Properties: TableName: Name of the migration history table. TableSchema: Schema of the migration history table. MigrationIdColumnName: Column name for the migration ID. ProductVersionColumnName: Column name for the product version. AppliedVersionColumnName: Column name for the applied version. AppliedDateColumnName: Column name for the date when the migration was applied. Example Usage: var migrationHistoryTable = new MigrationHistoryTable { TableName = \"MigrationHistory\", TableSchema = \"dbo\", MigrationIdColumnName = \"MigrationId\", ProductVersionColumnName = \"ProductVersion\", AppliedVersionColumnName = \"AppliedVersion\", AppliedDateColumnName = \"AppliedDate\" }; Change Log: Initial Creation: Added properties for TableName, TableSchema, MigrationIdColumnName, ProductVersionColumnName, AppliedVersionColumnName, and AppliedDateColumnName. ModelBase Class The ModelBase class is a base class for other models, providing common auditing properties. Properties: CreatedBy: The username or identifier of the user who created the record. CreatedOn: The timestamp when the record was created. ModifiedBy: The username or identifier of the user who last modified the record. ModifiedOn: The timestamp when the record was last modified. Example Usage: public class ExampleModel : ModelBase { public int ExampleModelId { get; set; } public string Name { get; set; } } var example = new ExampleModel { ExampleModelId = 1, Name = \"Sample\", CreatedBy = \"admin\", CreatedOn = DateTime.UtcNow, ModifiedBy = \"admin\", ModifiedOn = DateTime.UtcNow }; Change Log: Initial Creation: Added properties for CreatedBy, CreatedOn, ModifiedBy, and ModifiedOn. Module Model The Module model describes a module instance that will be shown on a page. This is different from a ModuleDefinition which describes the module itself. Properties: ModuleId: The ID of this instance. SiteId: Reference to the Site. ModuleDefinitionName: Reference to the ModuleDefinition. AllPages: Determines if this module should be shown on all pages of the current Site. ModuleDefinition: (Not Mapped) Reference to the ModuleDefinition used for this module. DeletedBy: (Not Mapped) The user who deleted this module (if applicable). DeletedOn: (Not Mapped) The timestamp when the module was deleted (if applicable). IsDeleted: (Not Mapped) Indicates if the module is deleted. PermissionList: (Not Mapped) List of permissions for this module. Settings: (Not Mapped) List of settings for this module. PageModuleId: (Not Mapped) The ID of the PageModule instance. PageId: (Not Mapped) Reference to the Page this module is on. Title: (Not Mapped) Title of the PageModule instance. Pane: (Not Mapped) The pane where this PageModule instance will be injected on the page. Order: (Not Mapped) The order of the PageModule instance within the pane. ContainerType: (Not Mapped) The container for the PageModule instance. EffectiveDate: (Not Mapped) Start of when this module is visible. ExpiryDate: (Not Mapped) End of when this module is visible. ModuleType: (Not Mapped) Stores the type name for the module component being rendered. PaneModuleIndex: (Not Mapped) The position of the module instance in a pane. PaneModuleCount: (Not Mapped) The number of modules in a pane. RenderId: (Not Mapped) A unique ID to help determine if a component should be rendered. SecurityAccessLevel: (Not Mapped) The minimum access level to view the component being rendered. ControlTitle: (Not Mapped) An optional title for the component. Actions: (Not Mapped) Optional mapping of URL actions to a component. UseAdminContainer: (Not Mapped) Indicates if a component should not be rendered with the default modal admin container. RenderMode: (Not Mapped) Optionally specify the render mode for the component (overrides the site setting). Prerender: (Not Mapped) Optionally specify if the component should be prerendered (overrides the site setting). Permissions: (Deprecated, Not Mapped) Use PermissionList instead. Example Usage: var module = new Module { ModuleId = 1, SiteId = 2, ModuleDefinitionName = \"TextModule\", AllPages = false, PageModuleId = 10, PageId = 20, Title = \"Sample Module\", Pane = \"ContentPane\", Order = 1, ContainerType = \"Default\", EffectiveDate = DateTime.Now, ExpiryDate = DateTime.Now.AddYears(1), DeletedBy = null, DeletedOn = null, IsDeleted = false, ModuleType = \"Oqtane.Modules.Text.TextModule\", PaneModuleIndex = 0, PaneModuleCount = 1, RenderId = Guid.NewGuid(), SecurityAccessLevel = SecurityAccessLevel.View, ControlTitle = \"Text Module\", Actions = \"View;Edit\", UseAdminContainer = true, RenderMode = \"Server\", Prerender = false, PermissionList = new List<Permission>(), Settings = new Dictionary<string, string>() }; // Cloning the module object var clonedModule = module.Clone(); Change Log: Initial Creation: Added primary properties for ModuleId, SiteId, ModuleDefinitionName, AllPages, DeletedBy, DeletedOn, IsDeleted, PermissionList, Settings, PageModuleId, PageId, Title, Pane, Order, ContainerType, EffectiveDate, ExpiryDate, ModuleType, PaneModuleIndex, PaneModuleCount, RenderId, SecurityAccessLevel, ControlTitle, Actions, UseAdminContainer, RenderMode, and Prerender. Enhancement: Added Clone method for creating copies of the Module object. ModuleContent Model The ModuleContent model is used for enabling import/export of module data within the Oqtane framework. Properties: ModuleDefinitionName: Reference to the ModuleDefinition for which this content is relevant. Version: Version of the ModuleDefinition used, not the version of the content. Content: Serialized content of the module for import/export. Example Usage: var moduleContent = new ModuleContent { ModuleDefinitionName = \"TextModule\", Version = \"1.0.0\", Content = \"{\\\"Text\\\":\\\"Hello, world!\\\"}\" }; Change Log: Initial Creation: Added properties for ModuleDefinitionName, Version, and Content. ModuleDefinition Model The ModuleDefinition model describes a module type in Oqtane. The available modules are determined at startup. Properties: ModuleDefinitionId: Reference to the ModuleDefinition. ModuleDefinitionName: Name of the ModuleDefinition. Name: Friendly name to show in the UI. Description: Module description for admin dialogs. Categories: Categories this module will be shown in (in the admin dialogs). Version: Version information of this module based on the DLL / NuGet package. Owner: (Not Mapped) Owner of the module. Url: (Not Mapped) URL for more information about the module. Contact: (Not Mapped) Contact information for the module. License: (Not Mapped) License information for the module. Runtimes: (Not Mapped) Supported runtimes for the module. Dependencies: (Not Mapped) Dependencies required for the module. PermissionNames: (Not Mapped) Names of permissions associated with the module. ServerManagerType: (Not Mapped) Type of the server manager for the module. ControlTypeRoutes: (Not Mapped) Routes for the control types used by the module. ReleaseVersions: (Not Mapped) Comma-delimited list of all official release versions of the module (e.g., \"1.0.0,1.0.1\"). DefaultAction: (Not Mapped) Default action for the module. SettingsType: (Not Mapped) Type of settings used by the module (added in 2.0.2). PackageName: (Not Mapped) Package name of the module (added in 2.1.0). Resources: (Not Mapped) List of resources used by the module (added in 4.0.0). IsAutoEnabled: (Not Mapped) Indicates if the module is auto-enabled (added in 4.0.0). PageTemplates: (Not Mapped) List of page templates associated with the module (added in 4.0.0). SiteId: (Not Mapped) Internal property for the site ID. IsEnabled: (Not Mapped) Indicates if the module is enabled. ControlTypeTemplate: (Not Mapped) Template for the control type. AssemblyName: (Not Mapped) Assembly name of the module. PermissionList: (Not Mapped) List of permissions associated with the module. Template: (Not Mapped) Template used by the module. IsPortable: (Not Mapped) Indicates if the module is portable. Permissions: (Deprecated, Not Mapped) Use PermissionList instead. Example Usage: var moduleDefinition = new ModuleDefinition { ModuleDefinitionId = 1, ModuleDefinitionName = \"TextModule\", Name = \"Text Module\", Description = \"A module for displaying text content.\", Categories = \"Content\", Version = \"1.0.0\", Owner = \"Oqtane\", Url = \"https://oqtane.org\", Contact = \"support@oqtane.org\", License = \"MIT\", Runtimes = \"netcoreapp3.1\", Dependencies = \"Oqtane.Modules.Text\", PermissionNames = \"View;Edit\", ServerManagerType = \"Oqtane.Modules.Text.ServerManager\", ControlTypeRoutes = \"View;Edit\", ReleaseVersions = \"1.0.0\", DefaultAction = \"View\", SettingsType = \"Oqtane.Modules.Text.Settings\", PackageName = \"Oqtane.Modules.Text\", Resources = new List<Resource>(), IsAutoEnabled = true, PageTemplates = new List<PageTemplate>(), SiteId = 1, IsEnabled = true, ControlTypeTemplate = \"Oqtane.Modules.Text.Template\", AssemblyName = \"Oqtane.Modules.Text\", PermissionList = new List<Permission>(), Template = \"Default\", IsPortable = true }; Change Log: Initial Creation: Added primary properties for ModuleDefinitionId, ModuleDefinitionName, Name, Description, Categories, Version, Owner, Url, Contact, License, Runtimes, Dependencies, PermissionNames, ServerManagerType, ControlTypeRoutes, ReleaseVersions, DefaultAction, SettingsType, PackageName, Resources, IsAutoEnabled, PageTemplates, SiteId, IsEnabled, ControlTypeTemplate, AssemblyName, PermissionList, Template, and IsPortable. Enhancement: Added Permissions property as deprecated and provided PermissionList as a replacement. Notification Model The Notification model represents a notification for a user, usually meant to be sent as an email. Properties: NotificationId: Internal ID. SiteId: Reference to the Site on which the notification was created. FromUserId: Nullable ID of the user who created the notification. FromDisplayName: Display name of the creator. FromEmail: Email address of the creator. ToUserId: Nullable ID of the recipient user (can be null if the recipient is not a user). ToDisplayName: Display name of the recipient. ToEmail: Email address of the recipient. ParentId: Nullable reference to an optional parent Notification in case of a thread with reply messages. Subject: Subject of the notification. Body: Body/content of the notification. CreatedOn: Timestamp when the notification was created. IsDelivered: Indicates whether the notification has been delivered. DeliveredOn: Nullable timestamp when the notification was delivered. DeletedBy: User who deleted the notification (if applicable). DeletedOn: Nullable timestamp when the notification was deleted. IsDeleted: Indicates whether the notification is deleted. SendOn: Nullable timestamp when the notification should be sent. IsRead: Indicates whether the notification has been read. Example Usage: var notification = new Notification { NotificationId = 1, SiteId = 1, FromUserId = 2, FromDisplayName = \"Admin\", FromEmail = \"admin@example.com\", ToUserId = 3, ToDisplayName = \"User\", ToEmail = \"user@example.com\", Subject = \"Welcome to Oqtane\", Body = \"Hello, welcome to Oqtane!\", CreatedOn = DateTime.UtcNow, IsDelivered = false, SendOn = DateTime.UtcNow.AddHours(1) }; Change Log: Initial Creation: Added properties for NotificationId, SiteId, FromUserId, FromDisplayName, FromEmail, ToUserId, ToDisplayName, ToEmail, ParentId, Subject, Body, CreatedOn, IsDelivered, DeliveredOn, DeletedBy, DeletedOn, IsDeleted, SendOn, and IsRead. Package Model The Package model represents a software package for installation within the Oqtane framework. Properties: PackageId: ID of the package, usually constructed from the namespace. Owner: Owner of the package. OwnerUrl: URL for the owner of the package. Name: Friendly name of the package. Description: Description of the package. LogoFileId: Nullable ID for the logo file. LogoUrl: URL for the logo image. License: License for the package. ProductUrl: URL for the product. Version: Version as defined in the NuGet package. Downloads: Download count to show how popular the package is. ReleaseDate: Date the package was released. PackageUrl: Direct URL for downloading the package. SupportUrl: Direct URL for getting support for the package. Vulnerabilities: Indicates if any known security vulnerabilities exist. Price: (Commercial) Nullable price of the package. PaymentUrl: (Commercial) URL for purchasing the package. TrialPeriod: (Commercial) Trial period in days. ExpiryDate: (Commercial) Nullable expiry date of the package. Example Usage: var package = new Package { PackageId = \"Oqtane.Modules.Text\", Owner = \"Oqtane\", OwnerUrl = \"https://oqtane.org\", Name = \"Text Module\", Description = \"A module for displaying text content.\", LogoFileId = null, LogoUrl = \"https://oqtane.org/images/logo.png\", License = \"MIT\", ProductUrl = \"https://oqtane.org\", Version = \"1.0.0\", Downloads = 1000, ReleaseDate = DateTime.UtcNow, PackageUrl = \"https://oqtane.org/downloads/textmodule.zip\", SupportUrl = \"https://oqtane.org/support\", Vulnerabilities = 0, Price = 0.0m, PaymentUrl = \"https://oqtane.org/payment\", TrialPeriod = 30, ExpiryDate = null }; Change Log: Initial Creation: Added properties for PackageId, Owner, OwnerUrl, Name, Description, LogoFileId, LogoUrl, License, ProductUrl, Version, Downloads, ReleaseDate, PackageUrl, SupportUrl, Vulnerabilities, Price, PaymentUrl, TrialPeriod, and ExpiryDate. Page Model The Page model describes a page in Oqtane. Properties: PageId: ID of the page. SiteId: Reference to the Site. Path: Path of the page. ParentId: Nullable reference to the parent Page, if it has one. Name: Name of the page. Title: Page title shown in the browser tab. Order: Sort order in the list of sibling pages. Url: Full URL to this page. ThemeType: Reference to the Theme used to display this page. DefaultContainerType: Reference to the container used for modules on this page. HeadContent: Content to be included in the head of the page. BodyContent: Content to be included in the body of the page. Icon: Icon class name for this page. IsNavigation: Indicates if this page should be included in the navigation menu. IsClickable: Indicates if this page should be clickable in the navigation menu. IsPersonalizable: Indicates if the page is personalizable, allowing users to create custom versions. UserId: Nullable reference to the user who owns the personalized page. EffectiveDate: Nullable start date of when this page is visible. ExpiryDate: Nullable end date of when this page is visible. Level: (Not Mapped) The hierarchical level of the page. HasChildren: (Not Mapped) Indicates if the page has sub-pages. PermissionList: (Not Mapped) List of permissions for this page. Settings: (Not Mapped) List of settings for this page. Panes: (Not Mapped) List of pane names for the theme assigned to this page. Resources: (Not Mapped) List of resources (CSS, JS) needed to render this page properly. DeletedBy: User who deleted the page (if applicable). DeletedOn: Nullable timestamp when the page was deleted. IsDeleted: Indicates if the page is deleted. EditMode: (Deprecated, Not Mapped) Indicates if the page is in edit mode. LayoutType: (Deprecated, Not Mapped) Layout type of the page. Permissions: (Deprecated, Not Mapped) Use PermissionList instead. Example Usage: var page = new Page { PageId = 1, SiteId = 1, Path = \"home\", ParentId = null, Name = \"Home\", Title = \"Home Page\", Order = 1, Url = \"/home\", ThemeType = \"DefaultTheme\", DefaultContainerType = \"DefaultContainer\", HeadContent = \"<meta name=\\\"description\\\" content=\\\"Home page\\\">\", BodyContent = \"<div>Welcome to the home page!</div>\", Icon = \"home\", IsNavigation = true, IsClickable = true, IsPersonalizable = false, UserId = null, EffectiveDate = DateTime.UtcNow, ExpiryDate = null, Level = 0, HasChildren = false, PermissionList = new List<Permission>(), Settings = new Dictionary<string, string>() }; // Cloning the page object var clonedPage = page.Clone(); Change Log: Initial Creation: Added properties for PageId, SiteId, Path, ParentId, Name, Title, Order, Url, ThemeType, DefaultContainerType, HeadContent, BodyContent, Icon, IsNavigation, IsClickable, IsPersonalizable, UserId, EffectiveDate, ExpiryDate, Level, HasChildren, PermissionList, Settings, Panes, Resources, DeletedBy, DeletedOn, IsDeleted, EditMode, LayoutType, and Permissions. Enhancement: Added Clone method for creating copies of the Page object. PageModule Model The PageModule model provides information about a Module instance on a Page. Properties: PageModuleId: Internal ID to identify this instance. PageId: Reference to the Page. ModuleId: Reference to the Module. Title: Module title shown in the container if the container shows titles. Pane: The pane in which this module instance appears. Order: The sorting order or position in the pane where this module appears. ContainerType: Reference to a Razor container that wraps this module instance. EffectiveDate: Nullable start date of when this assignment is valid. ExpiryDate: Nullable end date of when this assignment is valid. DeletedBy: User who deleted the instance (if applicable). DeletedOn: Nullable timestamp when the instance was deleted. IsDeleted: Indicates if the instance is deleted. Module: The Module itself. Page: The Page itself. Example Usage: var pageModule = new PageModule { PageModuleId = 1, PageId = 2, ModuleId = 3, Title = \"Sample Module\", Pane = \"ContentPane\", Order = 1, ContainerType = \"DefaultContainer\", EffectiveDate = DateTime.UtcNow, ExpiryDate = DateTime.UtcNow.AddYears(1), DeletedBy = null, DeletedOn = null, IsDeleted = false, Module = new Module { ModuleId = 3, SiteId = 1, ModuleDefinitionName = \"TextModule\" }, Page = new Page { PageId = 2, SiteId = 1, Path = \"home\" } }; Change Log: Initial Creation: Added properties for PageModuleId, PageId, ModuleId, Title, Pane, Order, ContainerType, EffectiveDate, ExpiryDate, DeletedBy, DeletedOn, IsDeleted, Module, and Page. Permission Model The Permission model provides information about permissions for entities in Oqtane. Entities in Oqtane can be identified and described using this model. Properties: PermissionId: Internal ID storing this information. SiteId: Reference to the Site which contains both the target entity and permissions. EntityName: Name of the entity these permissions apply to (e.g., Module). EntityId: ID of the entity these permissions apply to (e.g., a ModuleId). A value of -1 indicates the permission applies to all entity names regardless of ID (e.g., API permissions). PermissionName: Name of the permission (e.g., View). RoleId: Nullable ID of the Role this permission applies to. If null, then this is a user permission. RoleName: (Not Mapped) The role name associated with the RoleId. UserId: Nullable ID of the User this permission applies to. If null, then this is a role permission. IsAuthorized: Indicates the type of permission (grant = true, deny = false). Example Usage: var permission = new Permission { PermissionId = 1, SiteId = 1, EntityName = \"Module\", EntityId = 10, PermissionName = \"View\", RoleId = null, RoleName = \"Administrator\", UserId = null, IsAuthorized = true }; // Cloning the permission object var clonedPermission = permission.Clone(); Change Log: Initial Creation: Added properties for PermissionId, SiteId, EntityName, EntityId, PermissionName, RoleId, RoleName, UserId, and IsAuthorized. Enhancement: Added Clone method for creating copies of the Permission object. Profile Model The Profile model represents a single profile property information of a User. A user will have multiple profile properties to fully describe their profile. Properties: ProfileId: Internal ID. SiteId: Nullable reference to the Site. Certain users, like super-users, may not belong to any specific site. Name: Name of the profile property (not the user name). Title: Label of the profile property. Description: Description of the property for the UI. Category: Category of the profile property for grouping, etc. ViewOrder: Order of the property in the list of profile properties. MaxLength: Limits the input length of the property. DefaultValue: Initial or default value of the property. IsRequired: Indicates if the profile property is required. IsPrivate: Indicates if the profile property is private, meaning other users won't see them. Options: Possible values for dropdown input fields. Validation: Optional regular expression validation. Rows: Optional number of rows for textarea input. Autocomplete: Autocomplete setting for the property, enabling autocomplete for the corresponding input field if set. Example Usage: var profile = new Profile { ProfileId = 1, SiteId = 2, Name = \"FirstName\", Title = \"First Name\", Description = \"User's first name\", Category = \"Personal Information\", ViewOrder = 1, MaxLength = 50, DefaultValue = \"\", IsRequired = true, IsPrivate = false, Options = null, Validation = \"^[A-Za-z]+$\", Rows = 1, Autocomplete = \"given-name\" }; Change Log: Initial Creation: Added properties for ProfileId, SiteId, Name, Title, Description, Category, ViewOrder, MaxLength, DefaultValue, IsRequired, IsPrivate, Options, Validation, Rows, and Autocomplete. RequestCulture Model The RequestCulture model describes culture information for a request, including both formatting and UI cultures. Properties: Culture: Gets the CultureInfo for the request to be used for formatting. UICulture: Gets the CultureInfo for the request to be used for text, i.e., language. Example Usage: var requestCulture = new RequestCulture(\"en-US\"); // Accessing properties CultureInfo culture = requestCulture.Culture; // returns CultureInfo for \"en-US\" CultureInfo uiCulture = requestCulture.UICulture; // returns CultureInfo for \"en-US\" Constructors: RequestCulture(CultureInfo culture): Creates a new RequestCulture object with both Culture and UICulture properties set to the same CultureInfo value. RequestCulture(string culture): Creates a new RequestCulture object with both Culture and UICulture properties set to the same CultureInfo value. RequestCulture(string culture, string uiCulture): Creates a new RequestCulture object with Culture and UICulture properties set to the respective CultureInfo values provided as strings. RequestCulture(CultureInfo culture, CultureInfo uiCulture): Creates a new RequestCulture object with Culture and UICulture properties set to the respective CultureInfo values provided. Change Log: Initial Creation: Added properties for Culture and UICulture, and various constructors for initializing these properties. Resource Model The Resource model describes a JavaScript or CSS file which is needed by the module to work. Properties: ResourceType: A ResourceType so the interop can properly create script or link tags. Url: Path to the resource (query string parameters can be included for cache busting, e.g., ?v=#). Integrity: Integrity checks to increase the security of resources accessed, especially common in CDN resources. CrossOrigin: Cross-origin rules for this resource, usually anonymous. Bundle: For scripts, a bundle can be used to identify dependencies and ordering in the script loading process. Level: For stylesheets, this defines the relative position for cascading purposes. Location: For scripts, this defines if the resource should be included in the head or body. ES6Module: For scripts, allows type=\"module\" registrations (not applicable to stylesheets). Content: Allows specification of inline script (not applicable to stylesheets). RenderMode: For scripts, this defines the render mode (default is all render modes) - not applicable to stylesheets. Reload: Indicates that a script should be reloaded on every page transition - not applicable to stylesheets. Namespace: The namespace of the component that declared the resource, used only in SiteRouter. Declaration: (Deprecated) Use ResourceDeclaration instead. Example Usage: var resource = new Resource { ResourceType = ResourceType.Script, Url = \"/scripts/myscript.js?v=1.0.0\", Integrity = \"sha384-abc123\", CrossOrigin = \"anonymous\", Bundle = \"main\", Level = ResourceLevel.Page, Location = ResourceLocation.Body, ES6Module = true, Content = \"console.log('Hello, world!');\", RenderMode = \"Server\", Reload = true, Namespace = \"Oqtane.Modules\" }; // Cloning the resource object var clonedResource = resource.Clone(ResourceLevel.Page, \"Oqtane.Modules\"); Change Log: Initial Creation: Added properties for ResourceType, Url, Integrity, CrossOrigin, Bundle, Level, Location, ES6Module, Content, RenderMode, Reload, Namespace, and Declaration. Enhancement: Added Clone method for creating copies of the Resource object. Result Model The Result model represents the outcome of an operation, including a success flag and an optional message. Properties: Success: Indicates whether the operation was successful. Message: An optional message providing additional information about the result. Example Usage: var result1 = new Result(true); var result2 = new Result(false, \"An error occurred\"); // Accessing properties bool isSuccess = result1.Success; // returns true string message = result2.Message; // returns \"An error occurred\" Constructors: Result(bool success): Initializes a new instance of the Result class with a success flag. Result(bool success, string message): Initializes a new instance of the Result class with a success flag and a message. Change Log: Initial Creation: Added properties for Success and Message, along with constructors for initializing these properties. Role Model The Role model describes a security role in Oqtane. Properties: RoleId: Primary ID. SiteId: Nullable reference to a Site, if applicable. Name: Role name to show in admin dialogs. Description: Brief description for admin dialogs. IsAutoAssigned: Determines if users automatically get assigned to this role. IsSystem: Indicates if the role is a system role. Example Usage: var role = new Role { RoleId = 1, SiteId = 2, Name = \"Administrator\", Description = \"Admin role with full permissions\", IsAutoAssigned = false, IsSystem = true }; Change Log: Initial Creation: Added properties for RoleId, SiteId, Name, Description, IsAutoAssigned, and IsSystem. Route Model The Route model describes a route comprising multiple components. The structure is {scheme}://{hostname}/{aliaspath}/{pagepath}/*/{moduleid}/{action}/!/{urlparameters}?{query}#{fragment}. Properties: Authority: The host name or IP address and port number (does not include scheme or trailing slash). Scheme: A fully qualified route contains a scheme (e.g., http, https). Host: A fully qualified route contains a host name, which may include a port number. Port: A host name may contain a port number. AbsolutePath: The absolute path for the route. PathAndQuery: The absolute path for the route including the query string. AliasPath: An absolute path may contain an alias path. PagePath: An absolute path may contain a page path. ModuleId: A route may contain a module ID, located after the module delimiter segment (/*/). Action: A route may contain an action, located after the module ID. UrlParameters: A route may contain parameters located after the URL parameter delimiter segment (/!/). Query: All query string parameters (prefixed with a ? delimiter). Fragment: A route may contain a fragment located after the # delimiter. RootUrl: Contains the resource identifier for the root of an Oqtane installation (including scheme). SiteUrl: Contains the resource identifier for the home page of a specific Oqtane site (including scheme and possibly an alias path). Example Usage: var route = new Route(\"https://example.com/oqtane/home/*/10/View/!/param1?query=value#fragment\", \"oqtane\"); // Accessing properties string authority = route.Authority; // returns \"example.com\" string scheme = route.Scheme; // returns \"https\" string host = route.Host; // returns \"example.com\" string port = route.Port; // returns \"443\" string absolutePath = route.AbsolutePath; // returns \"/oqtane/home/*/10/View/!/param1\" string pathAndQuery = route.PathAndQuery; // returns \"/oqtane/home/*/10/View/!/param1?query=value\" string aliasPath = route.AliasPath; // returns \"oqtane\" string pagePath = route.PagePath; // returns \"home\" string moduleId = route.ModuleId; // returns \"10\" string action = route.Action; // returns \"View\" string urlParameters = route.UrlParameters; // returns \"param1\" string query = route.Query; // returns \"?query=value\" string fragment = route.Fragment; // returns \"#fragment\" string rootUrl = route.RootUrl; // returns \"https://example.com\" string siteUrl = route.SiteUrl; // returns \"https://example.com/oqtane\" Constructors: Route(): Parameterless constructor to prevent deserialization exceptions. Route(string route, string aliaspath): Initializes a new instance of the Route class using the provided route and alias path. Change Log: Initial Creation: Added properties for Authority, Scheme, Host, Port, AbsolutePath, PathAndQuery, AliasPath, PagePath, ModuleId, Action, UrlParameters, Query, Fragment, RootUrl, and SiteUrl. Enhancement: Added constructors for initializing these properties. SearchContent Model The SearchContent model provides information about searchable content within a site in the Oqtane framework. Properties: SearchContentId: Internal ID of the searchable content. SiteId: ID of the site containing this content. EntityName: Name of the entity that this content pertains to. EntityId: ID of the entity that this content pertains to. Title: Title of the content. Description: Description of the content. Body: Body text of the content. Url: URL where the content can be accessed. Permissions: Comma-delimited string of permissions in the format EntityName:EntityId. ContentModifiedBy: Username or identifier of the user who last modified the content. ContentModifiedOn: Timestamp when the content was last modified. AdditionalContent: Additional content or metadata. CreatedOn: Timestamp when the content was created. SearchContentProperties: (Not Mapped) List of properties related to the search content, used only during updates. Count: (Not Mapped) Count of matching records, populated only for queries. IsDeleted: (Not Mapped) Indicates if the content is deleted, used only during updates. TenantId: (Not Mapped) ID of the tenant, used only during updates. UniqueKey: (Not Mapped) Unique key for the content in the format TenantId:SiteId:EntityName:EntityId. Example Usage: var searchContent = new SearchContent { SearchContentId = 1, SiteId = 1, EntityName = \"Page\", EntityId = \"10\", Title = \"Home Page\", Description = \"This is the home page.\", Body = \"<p>Welcome to the home page!</p>\", Url = \"/home\", Permissions = \"Page:10,Module:20\", ContentModifiedBy = \"admin\", ContentModifiedOn = DateTime.UtcNow, AdditionalContent = \"\", CreatedOn = DateTime.UtcNow, SearchContentProperties = new List<SearchContentProperty>(), Count = 0, IsDeleted = false, TenantId = 1 }; // Accessing the unique key string uniqueKey = searchContent.UniqueKey; // returns \"1:1:Page:10\" Change Log: Initial Creation: Added properties for SearchContentId, SiteId, EntityName, EntityId, Title, Description, Body, Url, Permissions, ContentModifiedBy, ContentModifiedOn, AdditionalContent, CreatedOn, SearchContentProperties, Count, IsDeleted, TenantId, and UniqueKey. SearchContentProperty Model The SearchContentProperty model represents a property related to search content within a site in the Oqtane framework. Properties: PropertyId: Internal ID of the search content property. SearchContentId: ID of the associated search content. Name: Name of the property. Value: Value of the property. Example Usage: var searchContentProperty = new SearchContentProperty { PropertyId = 1, SearchContentId = 10, Name = \"Author\", Value = \"John Doe\" }; Change Log: Initial Creation: Added properties for PropertyId, SearchContentId, Name, and Value. SearchContentWord Model The SearchContentWord model represents the relationship between search content and search words, tracking occurrences of specific words within the content. Properties: SearchContentWordId: Internal ID of the search content word relationship. SearchContentId: ID of the associated search content. SearchWordId: ID of the associated search word. Count: Number of times the word appears in the content. CreatedOn: Timestamp when the relationship was created. ModifiedOn: Timestamp when the relationship was last modified. SearchWord: The associated SearchWord object. SearchContent: The associated SearchContent object. Example Usage: var searchContentWord = new SearchContentWord { SearchContentWordId = 1, SearchContentId = 10, SearchWordId = 5, Count = 3, CreatedOn = DateTime.UtcNow, ModifiedOn = DateTime.UtcNow, SearchWord = new SearchWord { SearchWordId = 5, Word = \"example\" }, SearchContent = new SearchContent { SearchContentId = 10, Title = \"Example Content\" } }; Change Log: Initial Creation: Added properties for SearchContentWordId, SearchContentId, SearchWordId, Count, CreatedOn, ModifiedOn, SearchWord, and SearchContent. SearchQuery Model The SearchQuery model represents the parameters used to perform a search within a site in the Oqtane framework. Properties: SiteId: ID of the site in which the search is performed. Alias: The Alias associated with the site. Keywords: Keywords used for the search. IncludeEntities: Comma-delimited entities to include in the search. ExcludeEntities: Comma-delimited entities to exclude from the search. FromDate: Start date for the search range. ToDate: End date for the search range. Properties: Additional properties or filters for the search, represented as a dictionary. PageIndex: Index of the current page of results. PageSize: Number of results per page. SortField: Field by which to sort the search results. SortOrder: Order in which to sort the search results (ascending or descending). BodyLength: Length of the body text to return in the search results, defaulting to 255 characters. Example Usage: var searchQuery = new SearchQuery { SiteId = 1, Alias = new Alias { AliasId = 1, Name = \"Default\" }, Keywords = \"Oqtane\", IncludeEntities = \"Page,Module\", ExcludeEntities = \"User\", FromDate = DateTime.UtcNow.AddMonths(-1), ToDate = DateTime.UtcNow, Properties = new Dictionary<string, string> { { \"Category\", \"Documentation\" } }, PageIndex = 0, PageSize = 10, SortField = SearchSortField.Title, SortOrder = SearchSortOrder.Ascending, BodyLength = 255 }; Change Log: Initial Creation: Added properties for SiteId, Alias, Keywords, IncludeEntities, ExcludeEntities, FromDate, ToDate, Properties, PageIndex, PageSize, SortField, SortOrder, and BodyLength. SearchResult Model The SearchResult model extends the SearchContent model to include additional properties related to search results, such as score and snippet. Properties: SearchContentId: Inherited from SearchContent - Internal ID of the searchable content. SiteId: Inherited from SearchContent - ID of the site containing this content. EntityName: Inherited from SearchContent - Name of the entity that this content pertains to. EntityId: Inherited from SearchContent - ID of the entity that this content pertains to. Title: Inherited from SearchContent - Title of the content. Description: Inherited from SearchContent - Description of the content. Body: Inherited from SearchContent - Body text of the content. Url: Inherited from SearchContent - URL where the content can be accessed. Permissions: Inherited from SearchContent - Comma-delimited string of permissions in the format EntityName:EntityId. ContentModifiedBy: Inherited from SearchContent - Username or identifier of the user who last modified the content. ContentModifiedOn: Inherited from SearchContent - Timestamp when the content was last modified. AdditionalContent: Inherited from SearchContent - Additional content or metadata. CreatedOn: Inherited from SearchContent - Timestamp when the content was created. SearchContentProperties: Inherited from SearchContent - List of properties related to the search content, used only during updates. Count: Inherited from SearchContent - Count of matching records, populated only for queries. IsDeleted: Inherited from SearchContent - Indicates if the content is deleted, used only during updates. TenantId: Inherited from SearchContent - ID of the tenant, used only during updates. UniqueKey: Inherited from SearchContent - Unique key for the content in the format TenantId:SiteId:EntityName:EntityId. Score: Score of the search result. DisplayScore: Display score of the search result, formatted as a string. Snippet: Snippet of the content to display in the search result. Example Usage: var searchResult = new SearchResult { SearchContentId = 1, SiteId = 1, EntityName = \"Page\", EntityId = \"10\", Title = \"Home Page\", Description = \"This is the home page.\", Body = \"<p>Welcome to the home page!</p>\", Url = \"/home\", Permissions = \"Page:10,Module:20\", ContentModifiedBy = \"admin\", ContentModifiedOn = DateTime.UtcNow, AdditionalContent = \"\", CreatedOn = DateTime.UtcNow, SearchContentProperties = new List<SearchContentProperty>(), Count = 0, IsDeleted = false, TenantId = 1, Score = 0.95f, DisplayScore = \"95%\", Snippet = \"Welcome to the home page!\" }; Change Log: Initial Creation: Added properties for Score, DisplayScore, and Snippet. SearchResults Model The SearchResults model represents the outcome of a search query, containing the list of search results and the total number of results. Properties: Results: List of search results (List<SearchResult>). TotalResults: Total number of results returned by the search query. Example Usage: var searchResults = new SearchResults { Results = new List<SearchResult> { new SearchResult { SearchContentId = 1, SiteId = 1, EntityName = \"Page\", EntityId = \"10\", Title = \"Home Page\", Description = \"This is the home page.\", Body = \"<p>Welcome to the home page!</p>\", Url = \"/home\", Permissions = \"Page:10,Module:20\", ContentModifiedBy = \"admin\", ContentModifiedOn = DateTime.UtcNow, AdditionalContent = \"\", CreatedOn = DateTime.UtcNow, SearchContentProperties = new List<SearchContentProperty>(), Count = 0, IsDeleted = false, TenantId = 1, Score = 0.95f, DisplayScore = \"95%\", Snippet = \"Welcome to the home page!\" } }, TotalResults = 1 }; Change Log: Initial Creation: Added properties for Results and TotalResults. SearchWord Model The SearchWord model represents a word that has been indexed for search purposes within a site in the Oqtane framework. Properties: SearchWordId: Internal ID of the search word. Word: The word that has been indexed. CreatedOn: Timestamp when the word was indexed. Example Usage: var searchWord = new SearchWord { SearchWordId = 1, Word = \"example\", CreatedOn = DateTime.UtcNow }; Change Log: Initial Creation: Added properties for SearchWordId, Word, and CreatedOn. Setting Model The Setting model represents a setting for various objects such as Tenant, Site, Page, Module, etc., within the Oqtane framework. Properties: SettingId: ID in the database, mainly used to later update an existing setting. EntityName: Name of the entity the setting is for (e.g., Page, Site). EntityId: ID of the entity being described (e.g., Site number 2). SettingName: Name of the setting. SettingValue: The value of the setting. It is always a string, so ensure to convert or cast as needed. IsPrivate: Indicates if this setting is private, meaning it should be maintained on the server and not sent to the client. Example Usage: var setting = new Setting { SettingId = 1, EntityName = \"Site\", EntityId = 2, SettingName = \"Theme\", SettingValue = \"Default\", IsPrivate = false }; Change Log: Initial Creation: Added properties for SettingId, EntityName, EntityId, SettingName, SettingValue, and IsPrivate. Site Model The Site model describes a site in a Tenant within an Oqtane installation. Sites can have multiple Aliases. Properties: SiteId: The ID of the site. TenantId: Reference to the Tenant the site is in. Name: The site name. LogoFileId: Reference to a File that has the logo for this site. Should be an image. FaviconFileId: Reference to a File that has the favicon for this site. Should be an image. DefaultThemeType: Default theme for the site. DefaultContainerType: Default container for the site. AdminContainerType: Default admin container. PwaIsEnabled: Indicates if the site is a progressive web application (PWA). PwaAppIconFileId: The app icon for the PWA. PwaSplashIconFileId: The splash icon for the PWA. AllowRegistration: Determines if visitors may register or create user accounts. VisitorTracking: Determines if site visitors will be recorded. CaptureBrokenUrls: Determines if broken URLs (404s) will be captured automatically. SiteGuid: Unique GUID to identify the site. RenderMode: The default render mode for the site (e.g., Static, Interactive, Headless). Runtime: The render mode for UI components requiring interactivity (e.g., Server, WebAssembly, Auto). Prerender: Indicates if the site supports prerendering (only applies to Interactive render mode). Hybrid: Indicates if a site can be integrated with an external .NET MAUI hybrid application. Version: Keeps track of site configuration changes and is used by the ISiteMigration interface. HomePageId: The home page of the site. The \"/\" path will be used by default if no home page is specified. HeadContent: Content to be included in the head of the page. BodyContent: Content to be included in the body of the page. IsDeleted: Indicates if the site is deleted. DeletedBy: The user who deleted the site. DeletedOn: The date the site was deleted. ImageFiles: (Not Mapped) The allowable image file extensions. UploadableFiles: (Not Mapped) The allowable file extensions which can be uploaded. SiteTemplateType: (Not Mapped) Used when provisioning a site from a site template. Settings: (Not Mapped) The settings for the site. Pages: (Not Mapped) List of pages for the site. Languages: (Not Mapped) List of languages for the site. Themes: (Not Mapped) List of themes for the site. Example Usage: var site = new Site { SiteId = 1, TenantId = 1, Name = \"Example Site\", LogoFileId = null, FaviconFileId = null, DefaultThemeType = \"DefaultTheme\", DefaultContainerType = \"DefaultContainer\", AdminContainerType = \"AdminContainer\", PwaIsEnabled = false, PwaAppIconFileId = null, PwaSplashIconFileId = null, AllowRegistration = true, VisitorTracking = true, CaptureBrokenUrls = true, SiteGuid = Guid.NewGuid().ToString(), RenderMode = \"Static\", Runtime = \"Server\", Prerender = false, Hybrid = false, Version = \"1.0.0\", HomePageId = 1, HeadContent = \"<meta name=\\\"description\\\" content=\\\"Example site\\\">\", BodyContent = \"<div>Welcome to the example site!</div>\", IsDeleted = false, DeletedBy = null, DeletedOn = null, ImageFiles = \".jpg,.png,.gif\", UploadableFiles = \".jpg,.png,.gif,.pdf,.docx\", SiteTemplateType = \"DefaultTemplate\", Settings = new Dictionary<string, string>(), Pages = new List<Page>(), Languages = new List<Language>(), Themes = new List<Theme>() }; // Cloning the site object var clonedSite = site.Clone(); Change Log: Initial Creation: Added properties for SiteId, TenantId, Name, LogoFileId, FaviconFileId, DefaultThemeType, DefaultContainerType, AdminContainerType, PwaIsEnabled, PwaAppIconFileId, PwaSplashIconFileId, AllowRegistration, VisitorTracking, CaptureBrokenUrls, SiteGuid, RenderMode, Runtime, Prerender, Hybrid, Version, HomePageId, HeadContent, BodyContent, IsDeleted, DeletedBy, DeletedOn, ImageFiles, UploadableFiles, SiteTemplateType, Settings, Pages, Languages, and Themes. Enhancement: Added Clone method for creating copies of the Site object. Sitemap Model The Sitemap model describes a sitemap within the Oqtane framework. Properties: Url: URL of the sitemap. ModifiedOn: Timestamp indicating when the sitemap was last modified. Example Usage: var sitemap = new Sitemap { Url = \"https://example.com/sitemap.xml\", ModifiedOn = DateTime.UtcNow }; Change Log: Initial Creation: Added properties for Url and ModifiedOn. SiteTemplate Model The SiteTemplate model represents a template for creating a new site within the Oqtane framework. Properties: Name: Name of the site template. TypeName: Type name of the site template. Example Usage: var siteTemplate = new SiteTemplate { Name = \"Default Site Template\", TypeName = \"Oqtane.SiteTemplates.Default\" }; Change Log: Initial Creation: Added properties for Name and TypeName. PageTemplate Model The PageTemplate model represents a template for creating a new page within the Oqtane framework. Properties: Path: The path of the page. Parent: The parent path of the page. Name: The name of the page. Title: The title of the page. Order: The order of the page. Url: The URL of the page. ThemeType: The theme type of the page. DefaultContainerType: The default container type of the page. HeadContent: The content to be included in the head of the page. BodyContent: The content to be included in the body of the page. Icon: The icon of the page. IsNavigation: Indicates if the page should be included in the navigation menu. IsClickable: Indicates if the page should be clickable in the navigation menu. IsPersonalizable: Indicates if the page is personalizable. IsDeleted: Indicates if the page is deleted. PermissionList: List of permissions for the page. PageTemplateModules: List of modules for the page. AliasName: The alias name of the page. Version: The version of the page. Update: Indicates if the page should be updated. EditMode: (Obsolete) Indicates if the page is in edit mode. PagePermissions: (Obsolete) Use PermissionList instead. Example Usage: var pageTemplate = new PageTemplate { Path = \"/example\", Parent = \"/\", Name = \"Example Page\", Title = \"Example Page Title\", Order = 1, Url = \"/example\", ThemeType = \"DefaultTheme\", DefaultContainerType = \"DefaultContainer\", HeadContent = \"<meta name=\\\"description\\\" content=\\\"Example page\\\">\", BodyContent = \"<div>Welcome to the example page!</div>\", Icon = \"example-icon\", IsNavigation = true, IsClickable = true, IsPersonalizable = false, IsDeleted = false, PermissionList = new List<Permission> { new Permission(PermissionNames.View, RoleNames.Admin, true), new Permission(PermissionNames.Edit, RoleNames.Admin, true) }, PageTemplateModules = new List<PageTemplateModule>(), AliasName = \"default\", Version = \"1.0.0\", Update = false }; Change Log: Initial Creation: Added properties for Path, Parent, Name, Title, Order, Url, ThemeType, DefaultContainerType, HeadContent, BodyContent, Icon, IsNavigation, IsClickable, IsPersonalizable, IsDeleted, PermissionList, PageTemplateModules, AliasName, Version, Update, EditMode, and PagePermissions. PageTemplateModule Model The PageTemplateModule model represents a module within a page template in the Oqtane framework. Properties: ModuleDefinitionName: The name of the module definition. Title: The title of the module. Pane: The pane in which the module is placed. Order: The order of the module within the pane. ContainerType: The container type of the module. IsDeleted: Indicates if the module is deleted. PermissionList: List of permissions for the module. Content: The content of the module. ModulePermissions: (Obsolete) Use PermissionList instead. Example Usage: var pageTemplateModule = new PageTemplateModule { ModuleDefinitionName = \"TextModule\", Title = \"Text Module\", Pane = \"ContentPane\", Order = 1, ContainerType = \"DefaultContainer\", IsDeleted = false, PermissionList = new List<Permission> { new Permission(PermissionNames.View, RoleNames.Admin, true), new Permission(PermissionNames.Edit, RoleNames.Admin, true) }, Content = \"Sample text content\" }; Change Log: Initial Creation: Added properties for ModuleDefinitionName, Title, Pane, Order, ContainerType, IsDeleted, PermissionList, Content, and ModulePermissions. SqlQuery Model The SqlQuery model represents a SQL query that belongs to a specific Tenant within the Oqtane framework. Properties: TenantId: Reference to the Tenant this query belongs to. DBType: Type of the database. DBConnectionString: Connection string for the database. Query: The SQL query to be executed. Results: List of results returned by the query, represented as a list of dictionaries. Example Usage: var sqlQuery = new SqlQuery { TenantId = 1, DBType = \"SQLServer\", DBConnectionString = \"Server=myServer;Database=myDB;User Id=myUser;Password=myPassword;\", Query = \"SELECT * FROM Users\", Results = new List<Dictionary<string, string>>() }; Change Log: Initial Creation: Added properties for TenantId, DBType, DBConnectionString, Query, and Results. Sync Model The Sync model represents a synchronization event within the Oqtane framework, containing the synchronization date and a list of synchronization events. Properties: SyncDate: The date and time when the synchronization occurred. SyncEvents: List of synchronization events (List<SyncEvent>). Example Usage: var sync = new Sync { SyncDate = DateTime.UtcNow, SyncEvents = new List<SyncEvent> { new SyncEvent { TenantId = 1, SiteId = 1, EntityName = \"Page\", EntityId = 10, Action = \"Update\", ModifiedOn = DateTime.UtcNow } } }; SyncEvent Model The SyncEvent model represents an individual synchronization event within the Oqtane framework. Properties: TenantId: ID of the tenant involved in the synchronization event. SiteId: ID of the site involved in the synchronization event. EntityName: Name of the entity involved in the synchronization event. EntityId: ID of the entity involved in the synchronization event. Action: Action performed in the synchronization event (e.g., \"Update\", \"Delete\"). ModifiedOn: Timestamp when the event occurred. Example Usage: var syncEvent = new SyncEvent { TenantId = 1, SiteId = 1, EntityName = \"Page\", EntityId = 10, Action = \"Update\", ModifiedOn = DateTime.UtcNow }; Change Log: Initial Creation: Added properties for SyncDate and SyncEvents to the Sync model. Initial Creation: Added properties for TenantId, SiteId, EntityName, EntityId, Action, and ModifiedOn to the SyncEvent model. Template Model The Template model defines metadata for a module or theme template within the Oqtane framework. Properties: Name: Name of the template (folder name). Title: Title of the template. Type: Type of template (Internal or External). Version: Minimum framework version dependency. Namespace: Namespace of the template, which uses tokens. Location: Location where the template will be created (dynamically set). Example Usage: var template = new Template { Name = \"MyModuleTemplate\", Title = \"My Module Template\", Type = \"Internal\", Version = \"1.0.0\", Namespace = \"Oqtane.Modules.MyModule\", Location = \"/path/to/template\" }; Change Log: Initial Creation: Added properties for Name, Title, Type, Version, Namespace, and Location. Tenant Model The Tenant model describes a tenant in Oqtane. Tenants can contain multiple Sites and have all their data in a separate database. Properties: TenantId: ID of the tenant. Name: Name of the tenant to show in tenant lists. DBConnectionString: Connection string to access this tenant's database. DBType: Type of database used by this tenant (new in v2.1.0). Version: Version of the tenant. Example Usage: var tenant = new Tenant { TenantId = 1, Name = \"Default Tenant\", DBConnectionString = \"Server=myServer;Database=myTenantDB;User Id=myUser;Password=myPassword;\", DBType = \"SQLServer\", Version = \"1.0.0\" }; Change Log: Initial Creation: Added properties for TenantId, Name, DBConnectionString, DBType, and Version. Theme Model The Theme model provides information about a theme in Oqtane. Properties: ThemeId: Reference ID of the theme. ThemeName: Full namespace/identifier of the theme. Name: Friendly name to show in the UI. Version: (Not Mapped) Version of the theme. Owner: (Not Mapped) Owner of the theme. Url: (Not Mapped) URL associated with the theme. Contact: (Not Mapped) Contact information for the theme owner. License: (Not Mapped) License of the theme. Dependencies: (Not Mapped) Dependencies required by the theme. ThemeSettingsType: (Not Mapped) Type of settings for the theme (added in v2.0.2). ContainerSettingsType: (Not Mapped) Type of settings for the container (added in v2.0.2). PackageName: (Not Mapped) Name of the package (added in v2.1.0). Resources: (Not Mapped) List of resources associated with the theme (added in v4.0.0). IsAutoEnabled: (Not Mapped) Indicates if the theme is auto-enabled (added in v4.0.0). SiteId: (Not Mapped) Internal site ID. IsEnabled: (Not Mapped) Indicates if the theme is enabled. AssemblyName: (Not Mapped) Assembly name of the theme. Themes: (Not Mapped) List of theme controls. Containers: (Not Mapped) List of container controls. Template: (Not Mapped) Template associated with the theme. ThemeControls: (Obsolete, Not Mapped) Use Themes instead. PaneLayouts: (Obsolete, Not Mapped) Use Layouts instead. ContainerControls: (Obsolete, Not Mapped) Use Containers instead. Layouts: (Obsolete, Not Mapped) List of theme layouts. Example Usage: var theme = new Theme { ThemeId = 1, ThemeName = \"Oqtane.Themes.Default\", Name = \"Default Theme\", Version = \"1.0.0\", Owner = \"Oqtane Community\", Url = \"https://oqtane.org\", Contact = \"support@oqtane.org\", License = \"MIT\", Dependencies = \"\", ThemeSettingsType = \"DefaultSettings\", ContainerSettingsType = \"DefaultContainerSettings\", PackageName = \"Oqtane.DefaultTheme\", Resources = new List<Resource>(), IsAutoEnabled = true, SiteId = 1, IsEnabled = true, AssemblyName = \"Oqtane.DefaultTheme\", Themes = new List<ThemeControl>(), Containers = new List<ThemeControl>(), Template = \"DefaultTemplate\" }; Change Log: Initial Creation: Added properties for ThemeId, ThemeName, Name, Version, Owner, Url, Contact, License, Dependencies, ThemeSettingsType, ContainerSettingsType, PackageName, Resources, IsAutoEnabled, SiteId, IsEnabled, AssemblyName, Themes, Containers, Template, ThemeControls, PaneLayouts, ContainerControls, and Layouts. ThemeControl Model The ThemeControl model provides information about a theme control within the Oqtane framework. Properties: TypeName: Type name of the theme control. Name: Friendly name of the theme control. Thumbnail: URL or path to the thumbnail image of the theme control. Panes: Information about the panes in the theme control. Example Usage: var themeControl = new ThemeControl { TypeName = \"Oqtane.Themes.Default.DefaultTheme\", Name = \"Default Theme\", Thumbnail = \"/images/default-theme-thumbnail.png\", Panes = \"ContentPane, SidePane\" }; Change Log: Initial Creation: Added properties for TypeName, Name, Thumbnail, and Panes. UrlMapping Model The UrlMapping model describes a URL mapping in Oqtane. Properties: UrlMappingId: ID of this URL mapping. SiteId: Reference to a Site. Url: A fully qualified URL. MappedUrl: A URL to which the visitor will be redirected. Requests: Number of requests all time for the URL. CreatedOn: Date when the URL was first requested for the site. RequestedOn: Date when the URL was last requested for the site. Example Usage: var urlMapping = new UrlMapping { UrlMappingId = 1, SiteId = 1, Url = \"https://example.com/old-url\", MappedUrl = \"https://example.com/new-url\", Requests = 100, CreatedOn = DateTime.UtcNow.AddMonths(-6), RequestedOn = DateTime.UtcNow }; Change Log: Initial Creation: Added properties for UrlMappingId, SiteId, Url, MappedUrl, Requests, CreatedOn, and RequestedOn. User Model The User model describes a user in Oqtane. Properties: UserId: ID of the user. Username: Username used for login. DisplayName: Name shown in menus and dialogs. Email: User's email address. PhotoFileId: Reference to a File containing the user's photo. LastLoginOn: Timestamp of the user's last login. LastIPAddress: IP address when the user last logged in. TwoFactorRequired: Indicates if the user requires 2-factor authentication to sign in. TwoFactorCode: Stores the 2-factor verification code. TwoFactorExpiry: Expiry date and time for the 2-factor verification code. SecurityStamp: (Not Mapped) A token indicating if a user's security properties have been modified. SiteId: (Not Mapped) Reference to the Site this user belongs to. Roles: (Not Mapped) Semi-colon delimited list of role names for the user. DeletedBy: (IDeletable) The user who deleted this user. DeletedOn: (IDeletable) Date when the user was deleted. IsDeleted: (IDeletable) Indicates if the user is deleted. Password: (Not Mapped) The user's password (not plaintext). IsAuthenticated: (Not Mapped) Indicates if the user is authenticated. FolderPath: (Not Mapped) Path name of the user's personal folder. EmailConfirmed: (Not Mapped) Indicates if the user's email address is confirmed. SuppressNotification: (Not Mapped) Indicates if new user should be notified by email. Settings: (Not Mapped) Public user settings. Example Usage: var user = new User { UserId = 1, Username = \"john.doe\", DisplayName = \"John Doe\", Email = \"john.doe@example.com\", PhotoFileId = null, LastLoginOn = DateTime.UtcNow, LastIPAddress = \"192.168.1.1\", TwoFactorRequired = true, TwoFactorCode = \"123456\", TwoFactorExpiry = DateTime.UtcNow.AddMinutes(10), SecurityStamp = \"XYZ\", SiteId = 1, Roles = \"Admin;User\", DeletedBy = null, DeletedOn = null, IsDeleted = false, Password = null, IsAuthenticated = true, EmailConfirmed = true, SuppressNotification = false, Settings = new Dictionary<string, string> { { \"Theme\", \"Dark\" } } }; // Accessing FolderPath string folderPath = user.FolderPath; // returns \"Users/1/\" Change Log: Initial Creation: Added properties for UserId, Username, DisplayName, Email, PhotoFileId, LastLoginOn, LastIPAddress, TwoFactorRequired, TwoFactorCode, TwoFactorExpiry, SecurityStamp, SiteId, Roles, DeletedBy, DeletedOn, IsDeleted, Password, IsAuthenticated, FolderPath, EmailConfirmed, SuppressNotification, and Settings. UserRole Model The UserRole model assigns a Role to a User. Properties: UserRoleId: ID of this assignment. UserId: Reference to the User who receives this Role assignment. RoleId: Reference to the Role which the User receives. EffectiveDate: Start date of when this assignment is valid. ExpiryDate: End date of when this assignment is valid. IgnoreSecurityStamp: (Not Mapped) Indicates that the User Security Stamp should not be updated when this user role is added or updated. Role: Direct reference to the Role object. User: Direct reference to the User object. Example Usage: var userRole = new UserRole { UserRoleId = 1, UserId = 10, RoleId = 2, EffectiveDate = DateTime.UtcNow, ExpiryDate = DateTime.UtcNow.AddYears(1), IgnoreSecurityStamp = false, Role = new Role { RoleId = 2, Name = \"Admin\" }, User = new User { UserId = 10, Username = \"john.doe\" } }; Change Log: Initial Creation: Added properties for UserRoleId, UserId, RoleId, EffectiveDate, ExpiryDate, IgnoreSecurityStamp, Role, and User. UserValidateResult Model The UserValidateResult model represents the result of validating a user within the Oqtane framework. Properties: Succeeded: Indicates whether the validation succeeded. Errors: Dictionary containing error messages, if any, with the key as the error field and the value as the error message. Example Usage: var userValidateResult = new UserValidateResult { Succeeded = true, Errors = new Dictionary<string, string> { { \"Email\", \"Invalid email format\" }, { \"Password\", \"Password must be at least 6 characters long\" } } }; Change Log: Initial Creation: Added properties for Succeeded and Errors. Visitor Model The Visitor model describes a visitor in Oqtane. Properties: VisitorId: ID of this visitor. SiteId: Reference to a Site. UserId: Reference to a User, if applicable. Visits: Number of times a visitor has visited the site. IPAddress: Last recorded IP address of the visitor. UserAgent: Last recorded user agent of the visitor. Language: Last recorded language of the visitor. Url: Last recorded URL of the visitor. Referrer: Last recorded referrer of the visitor. CreatedOn: Date the visitor first visited the site. VisitedOn: Date the visitor last visited the site. User: Direct reference to the User object, if applicable. Example Usage: var visitor = new Visitor { VisitorId = 1, SiteId = 1, UserId = 10, Visits = 5, IPAddress = \"192.168.1.1\", UserAgent = \"Mozilla/5.0\", Language = \"en-US\", Url = \"https://example.com\", Referrer = \"https://google.com\", CreatedOn = DateTime.UtcNow.AddMonths(-3), VisitedOn = DateTime.UtcNow, User = new User { UserId = 10, Username = \"john.doe\" } }; Change Log: Initial Creation: Added properties for VisitorId, SiteId, UserId, Visits, IPAddress, UserAgent, Language, Url, Referrer, CreatedOn, VisitedOn, and User."
  },
  "guides/database-management/index.html": {
    "href": "guides/database-management/index.html",
    "title": "Database Management in Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Database Management in Oqtane Managing databases is a key part of working with Oqtane. This section covers everything from database best practices to migration and schema management. Below is an overview of the topics related to database management. Best Practices Before diving into specific topics, it's important to be familiar with the best practices for managing databases in Oqtane. Refer to the Best Practices guide for tips and recommendations on optimizing your database performance, security, and scalability. Database Setup and Installation The installation of your chosen database system (SQL Server, MySQL, PostgreSQL, or SQLite) is crucial to ensure proper integration with Oqtane. For detailed instructions on setting up databases in various environments, refer to the Database Installation Guide, which provides step-by-step instructions for Windows and Linux platforms. Database Migrations Database migrations in Oqtane allow you to evolve your database schema over time. If you're looking to perform or manage migrations, refer to the Database Migrations guide, which covers the process of migrating your database schema with each Oqtane release. Database Schema Understanding the database schema is key to effective database management. The schema outlines the structure of the Oqtane database and is essential for customizations, troubleshooting, and performance optimizations. For detailed information on the Oqtane database schema, refer to the Database Schema page. Related Pages Database Management Best Practices Database Migrations Database Schema Database Installation Guide For a comprehensive setup guide, please refer to the Installation Guide for environment-specific instructions. ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/database-management/troubleshooting.html": {
    "href": "guides/database-management/troubleshooting.html",
    "title": "Troubleshooting Database Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Database Management Overview This section provides resources and guidance for troubleshooting various database-related issues in Oqtane. Whether you're configuring your database, resolving migration issues, or troubleshooting performance problems, this guide will help you navigate and fix common database issues. Common Database Troubleshooting Topics Below are the key areas covered in this troubleshooting guide: Database Setup Issues Troubleshoot common setup issues, including database connection problems and configuration errors. Database Migrations Understand and resolve issues related to database migrations, including failed migrations and version conflicts. Performance Problems Tips for identifying slow queries, optimizing database performance, and scaling your database effectively. Database Integrity and Security Resolve issues with database security, access control, data corruption, and backup recovery. For detailed troubleshooting steps and solutions to specific database issues, refer to the full Database Troubleshooting Guide."
  },
  "guides/docs/api-menu.html": {
    "href": "guides/docs/api-menu.html",
    "title": "How the API-Navigation (TOC) Works | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "How the API-Navigation (TOC) Works The API navigation can be quite tricky, because the default docfx behavior results in a very hard-to-use TOC-menu on the side. Because of this, we use a special trick where a JavaScript in layout\\oqtane\\toc.extension.js optimizes the names based on some rules. Here's what it does The prefix Oqtane. is removed by default (unless that's all there is) If the remaining namespace has more than 2 parts, it will be truncated with a prefix ... to make it fit better üòé In addition, it looks up if the namespace has metadata (in the namespace-metadata.js) to give it better colors and icons."
  },
  "guides/docs/build.html": {
    "href": "guides/docs/build.html",
    "title": "Build and Deploy the Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Build and Deploy the Documentation Setup To set everything up, clone the oqtane.docs and the oqtane.framework repositories in the same parent folder (e.g., c:\\projects\\oqtane), creating a structure like: c:\\projects\\oqtane (example) oqtane.docs cloned from oqtane.docs oqtane.framework cloned from oqtane.framework some-root\\ ‚îú‚îÄ‚îÄ oqtane.docs ‚îú‚îÄ‚îÄ oqtane.framework That will look like this: Build and Test Locally Depending on your preferred toolchain, you can use VS Code (recommendedüåü) Visual Studio 2022 Build and Test Locally using VS Code Run with VS Code: Open the Oqtane.Docs.code-workspace workspace located in the /src folder. Rebuild the entire solution Either using Ctrl+Shift+B. Or by hitting Ctrl + Shift + P and selecting \"Run Task\" ...and then \"Build\". In the output you should then see a bunch of stuff - ending with Build Succeeded It is generated into the root /docs folder. Test Locally - three options: Recommended üåü: Use the Live Server extension to serve the /docs folder on http://localhost:5500` using Alt + L, Alt + O. Alternatively: Use IIS Express Extension to serve the /docs folder on http://localhost:27629` using Ctrl+F5. Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me. Build and Test Locally using Visual Studio 2022 Run with Visual Studio: Open the Oqtane.Docs.sln solution located in the /src folder. Rebuild the entire solution. It is generated into the root /docs folder. Test Locally Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me. Note If you encounter build errors like shown below: You may also need to execute the following commands in terminal: Unblock-File -Path .\\.config\\dotnet-tools.json dotnet tool restore After running these commands, the build errors should be resolved. Tip To see your updates in the locally hosted IIS website, make sure to use the Rebuild Solution option. Publish / Deploy to GitHub Push the result back to the repository. GitHub will automatically publish the updated documentation to https://docs.oqtane.org. Questions For further discussions, feedback, or questions, head over to GitHub Discussions or GitHub Issues."
  },
  "guides/docs/code.html": {
    "href": "guides/docs/code.html",
    "title": "Document Code | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Document Code Basic Documentation Add normal documentation with /// <summary> tags to your code, like this: /// <summary> /// Constructor which does xyz /// </summary> /// <param name=\"id\">the id</param> public MyMethod(int id) { } All this is automatically picked up and converted to documentation. Adding Extensive Documentation Let's assume you have a class Oqtane.Example.MyClass and you would like to add images and a lot of markdown to explain what it does. This is your code: namespace Oqtane.Example; public class MyClass { } Now go to the documentation project Oqtane.Docs in the solution and open the apidoc\\Example folder (create it, if it doesn't exist yet'). In this, create a MyClass.md file which contains this --- uid: Oqtane.Example.MyClass --- Here is some **great** additional [Information](https://oqtane.org). 1. Do this 1. Then that Because you have the uid: ... header in your file, docfx will now combine these documentations in the output. You can also add images, html, or whatever you need. You can also find examples of this merge in the apidoc\\Documentation\\PublicApi.md file. Documenting Namespaces It's usually very helpful to document what a namespace does. Using the same mechanism with the uid: you can create markdown files which will show extensive instructions. Check out the apidoc\\Documentation\\index.md file for an example."
  },
  "guides/docs/conventions.html": {
    "href": "guides/docs/conventions.html",
    "title": "Oqtane Documentation Conventions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Conventions The following conventions should help all docs contributors work together. Images / Files / Assets When using files, especially images, please follow these conventions. 1. Remember: Case Sensitive when Hosted Be aware that the final docs will be hosted on github, which is case-sensitive. So MyImage.png and myimage.png are different files This is important when you're linking to files Always use lower-case file names Note If you accidentally get this wrong (eg. MyImage.png), and linking myimage.png it will work on your IIS/Windows, but not when finally hosted on Github. 2. Put Files Close to Where They Are Used Put all files in the assets folder below the page where they are used. This makes it easier to find the files when you're editing the page. It also makes it easier to move the page to a different location. This also helps to \"see\" when files are not used any more. Only use files in the \"own\" asset folder. Don't use files from far-away asset folders. 3. Use Relative Paths ./assets/myimage.png or assets/myimage.png Rarely ../assets/myimage.png (only if you're in a sub-folder), but the file is still part of the same topic and should be reused 4. Creativity and Contribution There‚Äôs no hard and fast rule about how you create or edit images and videos. Any contribution is welcome. Feel free to use tools that you‚Äôre comfortable with. For instance, Windows Screen Snippet is a fast and easy tool for creating and saving files. Remember, the goal is to make the documentation as clear and helpful as possible."
  },
  "guides/docs/folders.html": {
    "href": "guides/docs/folders.html",
    "title": "Folders and Files in the Oqtane Docs Project | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Folders and Files in the Oqtane Docs Project API Documentation Folders The api folder contains the home-page for the API docs. The apidoc folder contains markdown .md files which are merged with comments in the code. The merging happens because the unique ID of the md files matches the full namespace of the code. Article Folders The articles folder contains general articles The how-to folder The specs folder contains specifications, concepts etc. IDs of Contents in this folder should start with Specs Assets Folders We recommend placing all assets - mostly images - in assets subfolders everywhere. This ensures that the image really belongs to that folder and can be deleted again, if not in use."
  },
  "guides/docs/how-it-works.html": {
    "href": "guides/docs/how-it-works.html",
    "title": "How the Documentation System Works | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "How the Documentation System Works The initial configuration starts with the docfx.json file. Basically this says what code it should pick up, where the .md files are and where to put the output. We've tried to make it very clear where we made relevant changes and smuggled comment-nodes into the file for clarity. Layout The layout is configured in the docfx.json where it will start with the default template, extend it with statictoc (generate real html menu-structures, not just JS) and then apply the layout specified in layout\\oqtane. It will also include images in layout\\images like logos etc. because this was configured in docfx.json. Site Navigation The site navigation is cascaded through the toc.yml files in each folder. Tip You may also find examples online which use toc.md files but you'll run into requirements that will force you to switch back to YAML. So we recommend you stick to the yaml format everywhere. What Code is included in the Docs The initial set is configured in the docfx.json with the base path cwd and include/filter files. Then we have a few basic rules, which are all configured in the filterConfig.yml file. Ignore all Microsoft.*, System.* and Oqtane.Test.* namespaces Troubleshooting Problems with MSBuild or .net SDK DocFX runs MSBuild to compile the projects it finds. This can easily cause trouble if your Dev-PC has been through various versions of Visual-Studio. If you need to troubleshoot this, best contact iJungleboy on GitHub. Problems with Old / Unexpected Results MSBuild will compile everything into the obj folder of this docs-project. This is used as a cache for the next builds. If you run into unexpected results, always clean out the obj folder first. Problems with Github links DocFX automatically links all the auto-generated docs with the git-repo. So make sure that the oqtane.framework is pulled from the official location https://github.com/oqtane/oqtane.framework - otherwise the links will point to another repo."
  },
  "guides/docs/index.html": {
    "href": "guides/docs/index.html",
    "title": "Oqtane Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Here we'll explain how the documentation works, with all the magic in it. The Basics Tip The Oqtane.Docs project generates the documentation for Oqtane using docfx. So for the most part, you'll want to read the docfx documentation to understand how it works. The Source Code This project has a src folder containing... markdown files in /pages for standalone docs pages markdown files in /apidoc for merging with XML-docs in the source of Oqtane various YAML files (.yml) which describe the navigation structure Solution (.sln) and project (.csproj) files to build the documentation docfx configurations (docfx.json and filterConfig.yml) various json configs so it also works in VS-Code It also requires the Oqtane.Framework project to be in a sibling folder (see setup) The Build Process flowchart TD CS[Oqtane C# Source\\n<code>../../oqtane.framework</code>] -->|‚öôÔ∏èCompiler| XD XD[\"Xml Docs\\n(temp)\"] --> MD[\"Merged API Docs\\n(temp)\"] DM[Docs Mixins\\n~/apidocs] --> MD CONTENT[Content/Articles\\n~/pages] --> Docs[Docs HTML\\n../docs/] ASS[Assets/Images\\n**/assets] --> Docs MD --> Docs TOC[\"TOC Files\\n**/toc.yml\"] --> TOCG Docs -->|generate| TOCG[\"Various TOCs\\n(Tables of Contents)\"] When you build this project, it will Compile Oqtane Extract the XML documentation from Oqtane and generate YAML and markdown files Merge the generated files with the ones in this project Generate a ../docs folder with static HTML files that can be hosted anywhere Note To test the generated docs locally, you'll need to host the ../docs folder on a web server. This is because there are some absolute paths used in some JavaScripts for the TOC (table of contents) and search functionality. The setup is explained below. Deployment When pushed back to Github, Github will automatically build and deploy to https://docs.oqtane.org Setup üëâ continue with Setup, Build, Test and Deploy"
  },
  "guides/docs/markdown.html": {
    "href": "guides/docs/markdown.html",
    "title": "Markdown Tips in the Oqtane Docs | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Markdown Tips in the Oqtane Docs Refer to Markdown for how to write markdown files. Here the most important tips for people working with this: Links Link to a website [website](https://www.oqtane.org/) Link to another page [page](./build.md) Link to some [](xref:Oqtane.Models) - will automatically pick the name of the target Link to a class [](xref:Oqtane.Models.File) Images Images can be added it two ways - using markdown, or the HTML counterpart. We recommend to always place images in an assets folder below the markdown file you're using the image on. Here's an example using markdown: ![Folder structure for Building](./assets/folder-structure-for-building.jpg) Here an example using an <img> tag which lets you provide more settings: <img src=\"./assets/folder-structure-for-building.jpg\" class=\"full-width\"> Checklists If you want to add checklists like this example, just use this checklist üòé Videos Todo"
  },
  "guides/docs/project.html": {
    "href": "guides/docs/project.html",
    "title": "Oqtane Documentation Project | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Project There are kind of internal notes for the project team. It's based on various discussions in the team and the community. Docs Team The docs team is responsible for the documentation of Oqtane. It currently consists of: @iJungleboy (Team Lead) @thebaum @GregStevenson Top Level View Things to consider for the docs project Content: breadth, depth and quality of docs Maintenance / Timeliness: keep docs up to date with features & changes Use: get people to find use the docs Contribute: get people to contribute Content This covers a lot of areas: Content Breadth, Depth and Quality Code Documentation - volume and quality These are the XML comments in the source code which are maintained in the main repo Backgrounds / Concepts These are the \"What is Oqtane\" and \"What is a Module\" type of docs which both help understand something, and often serve as background for other docs. Without these backgrounds, pages will tend to repeat the same information since there's no primary link. User Help (what does this dialog / button do) Guides / How-To Link other resources Maintenance Things we should consider for maintenance new features changes in Oqtane which result in different UIs different ways to do things as a user different ways to develop something Use Bring people to docs eg. move \"Getting Started\" from Github to docs and link from Github/Oqtane Contribute Questions what motivates people to contribute to docs? how can we make it easy to contribute? can we provide benefits or visibility to contributors?"
  },
  "guides/docs/run-in-iis.html": {
    "href": "guides/docs/run-in-iis.html",
    "title": "Run Oqtane Docs Locally | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Run Oqtane Docs Locally The generated docs are static pages and contain various JavaScripts to provide menu and search functionality. These do not work, if you just open the index.html in a browser. So you need to run it in a local IIS to fully test it. This is how you can set it up: Warning about Caching The navigation / menus in docfx use JavaScript, so you'll sometimes see an old cached menu on your local system. Just activate F12 and disable cache to ensure that you're always viewing the latest build."
  },
  "guides/docs/tips/index.html": {
    "href": "guides/docs/tips/index.html",
    "title": "Oqtane Documentation Tips | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Tips The following tips should help you be more productive when working on the docs. Use VS Code instead of Visual Studio VS Code is much lighter and faster than visual studio. It also has some neat features which will help, like: Markdown preview Markdown linting Live Server to see the built docs without having to setup IIS Install Recommended Extensions The VS Code docs project has recommended extensions which will help you be more productive. If you open the project the first time, it will ask you to install them. To install them later, go to the extensions tab and find the \"Show Recommended Extensions\". Use VS Code Preview VS-Code has a nice preview built in: But the improved Markdown Preview Enhanced extension is even better, as it even supports Mermaid. Learn Keyboard Shortcuts Build the docs using Ctrl + Alt + B. Use Live Server for Preview The Live Server extension lets you see the built docs without having to setup IIS. It also automatically refreshes the browser on every change, making it super-comfy. Install the extension run it using Alt + L, Alt + O... ...or by clicking the \"Go Live\" button in the status bar Use Markdown Linting Install the Markdown Lint extension. Disable Xml-Docs While Editing Content Rebuilding everything incl. the XML-docs from the Oqtane source code takes much longer than just building the docs from the markdown files. On my PC (iJungleboy) it takes about 32 seconds vs. 10 seconds. You want fast rebuilds while editing content (eg. not updating docs from the Oqtane source code). To \"temporarily\" disable the Xml-Docs, change the /docfx.json file from: { \"metadata\": [ { // Blank src sample // This should be used when making changes to the theme and wanting to see changes quickly, as it skips parsing the source code // To use, rename this to \"src\" and rename the real src to \"dummy-src\" while developing, then revert when done \"dummy-src\": [], // Oqtane Source Code - where it will extract the API docs from \"src\": [ to { \"metadata\": [ { // Blank src sample // This should be used when making changes to the theme and wanting to see changes quickly, as it skips parsing the source code // To use, rename this to \"src\" and rename the real src to \"dummy-src\" while developing, then revert when done \"src\": [], // Oqtane Source Code - where it will extract the API docs from \"-src\": [ Tip Don't forget to undo this change before committing your changes."
  },
  "guides/extensions/best-practices/create-solutions-for-each-extension.html": {
    "href": "guides/extensions/best-practices/create-solutions-for-each-extension.html",
    "title": "Oqtane Dev Best Practices: Separate Solutions for Each Extension | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Dev Best Practices: Separate Solutions for Each Extension To create custom themes and modules, you will typically create them in a separate solution. This has benefits such as: Your code base and the git-repos are small and focused. It helps keep your code organized and makes it easier to share your work with others. It allows you to more easily update the Oqtane runtime without affecting your custom code. It ensures your extensions actually work in a vanilla Oqtane. Typically these projects and solutions will have the following folder structure: /parent /oqtane.framework /SomeTheme /SomeModule /SomeOtherExtension This structure allows the modules to easily deploy the build output to the oqtane.framework folder, so it can be run in the Oqtane after every build. Tip Oqtane has built in assistants to generate template modules and themes. These will follow the above convention and also generate build-projects which will deploy the output to the oqtane.framework folder. Tip As you get more experienced, you can then adjust these automatic mechanisms to better suit your own workflow. In this setup, most Oqtane Modules/Themes will also reference the Oqtane framework project - but only to make it easier to run and debug directly from Visual Studio."
  },
  "guides/extensions/best-practices/use-nuget-for-dependencies.html": {
    "href": "guides/extensions/best-practices/use-nuget-for-dependencies.html",
    "title": "Oqtane Dev Best Practices: Use Nuget for Oqtane Dependencies | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Dev Best Practices: Use Nuget for Oqtane Dependencies Important The recommended structure may imply that the add-on solutions such as the themes should reference the oqtane.framework project or output DLLs. This is not recommended, as it will make your add-ons less portable and harder to maintain. Instead, you should use Nuget packages to reference the Oqtane framework in the version you currently target."
  },
  "guides/extensions/build/dev.html": {
    "href": "guides/extensions/build/dev.html",
    "title": "Oqtane Extension - Dev Build and Deployment | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Dev Build and Deployment These guides will help you understand how Oqtane Extensions (Themes and Modules) are built and deployed for development. This is not about building/distributing Oqtane itself, but about developing your own Themes and Modules. What Happens in a Dev-Build? This is the typical debug.cmd for a dev-build: XCOPY \"..\\Client\\bin\\Debug\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.dll\" \"..\\..\\oqtane.framework\\Oqtane.Server\\bin\\Debug\\net8.0\\\" /Y XCOPY \"..\\Client\\bin\\Debug\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.pdb\" \"..\\..\\oqtane.framework\\Oqtane.Server\\bin\\Debug\\net8.0\\\" /Y XCOPY \"..\\Client\\wwwroot\\*\" \"..\\..\\oqtane.framework\\Oqtane.Server\\wwwroot\\\" /Y /S /I As you can see, it will deploy your work to the Oqtane.Server project: Copy the DLL and PDB files into the Oqtane.Server folder which is right beside the current module - see Best Practices Copy the files in the wwwroot folder into the wwwroot folder of the Oqtane.Server project Tip As you can see, the debug.cmd has project names and paths hard-wired. You may need to adjust these values as your DLL names change or you move your projects around. Warning The DLLs are compiles to a specific path, e.g. ‚Ä¶\\bin\\Debug\\net8.0\\‚Ä¶. Upon upgrading to a newer .net framework, you must adjust these paths. Remember to Restart your Oqtane After you have deployed your work, you must restart your Oqtane solution. This is because the DLLs are loaded into memory and will not be reloaded until the application is restarted."
  },
  "guides/extensions/build/index.html": {
    "href": "guides/extensions/build/index.html",
    "title": "Oqtane Extension - Build and Distribution (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Build and Distribution (WIP) These guides will help you understand how Oqtane Extensions (Themes and Modules) are packaged and distributed. This is not about building/distributing Oqtane itself, but about building and distributing your own Themes and Modules. Background Oqtane is a .net 8.0 Blazor application that is designed to be modular and extensible. This means that you can create your own modules, themes, and other extensions to customize your Oqtane solution. To get comfortable with Oqtane, you will need to understand how to package and distribute your themes and modules. We want to cover the following topics: What is a Build and What's Inside it? How does the Build Process Work? What is a package? What is a deployment? Build and deploy during development Build and deploy for distribution Distribute through Nuget, Github and the Oqtane Marketplace Basics: What is a Build and What's Inside it? A build is the process of taking your work preparing it to run. When we say your work this usually means: Your C# code Your Blazor code Your HTML, CSS, JavaScript Any additional images, fonts, etc. The build is usually done by Visual Studio and typically involves 3 steps: Compiling any JavaScript, SASS etc. using Webpack Compiling your C# and Razor code into one .net assembly Deploying the results, together with any other files (eg. supporting DLLs) deployment can be into other folders, or into a Nuget package How does the Build Process Work? The build process is usually done by Visual Studio. If you follow the current conventions, you will have a dedicated project called Oqtane...Package which is only responsible for the building process. Tip If you only build the main project, the result will just sit around and do nothing. You must build the package project to see anything useful. What is Triggered by the Build Process? The build process is configured in the Oqtane...Package.csproj file, explained here: <Project Sdk=\"Microsoft.NET.Sdk\"> <!-- some parts skipped for brevity --> <!-- This is where the distribution / package steps are configured, \"PostBuild\" --> <Target Name=\"PostBuild\" AfterTargets=\"PostBuildEvent\"> <!-- If Windows and creating a Dev-Build, Run \"debug.cmd\" --> <Exec Condition=\"'$(OS)' == 'Windows_NT' And '$(Configuration)' == 'Debug'\" Command=\"debug.cmd\" /> <!-- If Mac/Linux and creating a Dev-Build, Run \"debug.sh\" using bash --> <Exec Condition=\"'$(OS)' != 'Windows_NT' And '$(Configuration)' == 'Debug'\" Command=\"bash $(ProjectDir)debug.sh\" /> <!-- If Windows and creating a Release-Build, Run \"release.cmd\" --> <Exec Condition=\"'$(OS)' == 'Windows_NT' And '$(Configuration)' == 'Release'\" Command=\"release.cmd\" /> <!-- If Mac/Linux and creating a Release-Build, Run \"release.sh\" using bash --> <Exec Condition=\"'$(OS)' != 'Windows_NT' And '$(Configuration)' == 'Release'\" Command=\"bash $(ProjectDir)release.sh\" /> </Target> </Project> What Happens in a Dev-Build? ‚û°Ô∏è Read more about the Dev-Build What Happens in a Release-Build? ‚û°Ô∏è Read more about the Release-Build What's missing here? The previous example shows a default setup for a Theme. As you may have noticed, it doesn't have a WebPack or other JavaScript build steps. Tip As of now, the default templates/modules don't include examples for TypeScript or SASS."
  },
  "guides/extensions/build/installation.html": {
    "href": "guides/extensions/build/installation.html",
    "title": "Oqtane Extension - Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Installation Package Installation In most scenarios you will install a nuget package. Extension Package installation can be done by either: uploading the nuget package in the Modules section of the admin area by auto-downloading it from the Oqtane marketplace by placing it in the Packages folder of your Oqtane installation manually copying the files to your Oqtane installation ...and then restarting Oqtane. Manual File-Copy Installation You can also install an extension without a package. This actually happens when you build your extension in debug mode. In this case, the debug.cmd will just copy all the files to the correct places. When doing this, remember to restart Oqtane after copying the files."
  },
  "guides/extensions/build/package.html": {
    "href": "guides/extensions/build/package.html",
    "title": "Oqtane Extension - Nuget Package | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Nuget Package Extensions like Themes / modules are usually distributed as nuget packages. Internally such a nuget package is actually just a ZIP file. It contains: a .nuspec file containing information about it's contents a lib folder containing the DLL file(s) a wwwroot folder containing the JS and CSS files an icon.png file and some other files which are not important to us"
  },
  "guides/extensions/build/release.html": {
    "href": "guides/extensions/build/release.html",
    "title": "Oqtane Extension - Release Build (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Release Build (WIP) These guides will help you understand how Oqtane Extensions (Themes and Modules) are packaged and distributed. This is not about building/distributing Oqtane itself, but about packaging and distributing releases of your own Themes and Modules. What Happens in a Release-Build? This is the typical release.cmd for a release-build: del \"*.nupkg\" \"..\\..\\oqtane.framework\\oqtane.package\\nuget.exe\" pack Oqtane.Theme.Arsha.nuspec XCOPY \"*.nupkg\" \"..\\..\\oqtane.framework\\Oqtane.Server\\wwwroot\\Themes\\\" /Y As you can see, it will Delete any previous Nuget packages Use nuget.exe to pack the Nuget package instructions from the .nuspec file Copy the Nuget package into the wwwroot\\Themes folder of the Oqtane.Server project Tip The same warnings apply as for the debug.cmd - you may need to adjust paths and names. What is a (Nuget) Package? A package is a collection of files that are bundled together. In Oqtane, they are distributed in a .nupkg file, which is a Nuget package. Internally, a Nuget package is a ZIP file with a specific structure, so for discovery you can just rename a nuget package to .zip and open it. The definition of what goes inside a package is defined in a .nuspec file. The compiler will call nuget.exe and give it a NuSpec file to create the package. ‚û°Ô∏è see also Oqtane Extension - Nuget Package What is a NuSpec file? Here is an example of a .nuspec file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\"> <!-- Package information if publishing on Nuget.org --> <metadata> <!-- Nuget ID, must be unique to this extension --> <id>Oqtane.Theme.Arsha</id> <!-- Version, Copyright, URL etc. --> <version>1.0.0</version> <authors>Oqtane Labs Inc</authors> <owners>Oqtane Labs Inc</owners> <title>Arsha</title> <description>Arsha Theme for Oqtane</description> <copyright>Oqtane Labs Inc</copyright> <requireLicenseAcceptance>false</requireLicenseAcceptance> <license type=\"expression\">MIT</license> <projectUrl>https://github.com/oqtane/oqtane.framework</projectUrl> <!-- Icon file to be shown eg. on nuget.org, if published there --> <icon>icon.png</icon> <tags>oqtane theme</tags> <releaseNotes></releaseNotes> <summary></summary> <!-- Dependencies, in this case the Oqtane.Framework - These will be listed on Nuget.org (if you publish it there) - Oqtane may also check if they are installed before allowing installation --> <dependencies> <dependency id=\"Oqtane.Framework\" version=\"5.1.0\" /> </dependencies> </metadata> <!-- Files to be included in the package --> <files> <!-- DLLs and PDBs (PDBs contains line-numbers for debugging exceptions) --> <file src=\"..\\Client\\bin\\Release\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.dll\" target=\"lib\\net8.0\" /> <file src=\"..\\Client\\bin\\Release\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.pdb\" target=\"lib\\net8.0\" /> <!-- All the files in your main projects wwwroot --> <file src=\"..\\Client\\wwwroot\\**\\*.*\" target=\"wwwroot\" /> <!-- Icon file, located in the same folder as the nuspec file --> <file src=\"icon.png\" target=\"\" /> </files> </package> Release Build FAQs What is a DLL and a PDB? A DLL is a Dynamic Link Library, which is a compiled .NET assembly. It contains the compiled code of your project, and can be executed by the .NET runtime. A PDB is a Program Database, which contains additional information for debugging. It contains line-numbers, variable names, and other information that can be used to debug exceptions. How can I Add more Files to the Package If you need to add more files to the package, you can add more <file> elements to the .nuspec file. You can also use wildcards, like **\\*.* to include all files in a folder. Tip Make sure you don't include any unnecessary files, as they will increase the size of your package. You will typically only want to include release files, and not include source files. How can I change the Icon Just replace the icon.png in the same folder as the .nuspec file. Make sure your file is really a png, and not a jpg or other format."
  },
  "guides/extensions/index.html": {
    "href": "guides/extensions/index.html",
    "title": "Oqtane Extensions Development Guides (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extensions Development Guides (WIP) These guides will help you get started with developing Extensions on/with Oqtane. This is not about building Oqtane itself, but about building your own Extensions such as Themes and Modules. Background Oqtane is a .net 8.0 Blazor application that is designed to be modular and extensible. This means that you can create your own modules, themes, and other extensions to customize your Oqtane solution. Extensions can be: Themes Themes are the visual appearance of your Oqtane solution. They can be as simple as changing the colors and fonts, or as complex as changing the layout and adding new components. Modules Modules are the functional components of your Oqtane solution. They can be as simple as a single page with some text, or as complex as a full-featured application with a database backend. Language Packs Language Packs are translations of the user interface into different languages. They can be as simple as a few words, or as complex as a full translation of the entire user interface. Pure Extensions Pure Extensions are any other type of extension that you can think of. For example, an Image-Resizer which doesn't have a UI. Prerequisites To develop on Oqtane, you will typically need the following skills / tools: Visual Studio 2022 with the latest .net 8.0 SDK SQL Server (alternatives are possible, but this is the easiest to get started) C# programming skills The following skills are also useful, or will need to be developed as you go: Blazor programming skills HTML / CSS / JavaScript / Bootstrap5 skills Git / GitHub skills Oqtane installation Basic Setup You will need to install Oqtane on your development machine to get started. For this you have 2 options: Clone/Fork the Oqtane Source Code to your local machine and run using Visual Studio This is the most common option, and the best way to also track down any issues. Install a runtime version of Oqtane in your web server This is the method you'll use when you create many Oqtane solutions, since it will run faster and allow you to focus on only the code you write. Next Steps Read about: Best Practices Themes Modules ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "Welcome to the Oqtane Guides | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Welcome to the Oqtane Guides Welcome to the Oqtane Guides page! This will be your entry point for exploring deeper and more complex topics related to Oqtane. Whether you're new or an experienced user, this page will help you navigate through various guides that cover installation, migration, extensions development, troubleshooting, and more. Note This page is a work in progress. Some content may be moved to other sections as the documentation evolves. üìö Current Guides Explore the guides listed below to get started with Oqtane. These will walk you through key concepts, installation steps, and advanced topics. üëâ Select a guide from the menu to dive in: Concepts Learn the foundational concepts behind Oqtane's framework and architecture. Extensions Development Develop your own extensions and modules for Oqtane. This guide provides everything from basics to advanced techniques. Installation Step-by-step guide to getting Oqtane set up in your environment. Covers system requirements, installation procedures, and first-time setup. Migration Instructions for migrating your Oqtane environment from development to production or between servers. Modules Learn how to work with modules, from installation to management and customization. Themes Customize the look and feel of your Oqtane application with theme development and troubleshooting. Marketplace Explore the Oqtane Marketplace, where you can find pre-built modules and extensions. Troubleshooting Solutions to common problems with installation, modules, themes, and user management. ü§ù Community Support For help, discussions, or questions, reach out to our community: Oqtane Framework Discussions Join the discussion on GitHub for Oqtane Framework-specific queries and development-related conversations. Oqtane Docs Discussions Have questions about the documentation or need clarification on topics? Engage with the documentation community here. Join Our Discord For more interactive discussions and real-time community support, join our Discord server. üîó External Guides & Articles Here are some external resources and articles that provide additional insights and advanced information for Oqtane developers: Oqtane Official Blog ‚Äì Stay updated with Oqtane announcements, news, and tips. Configuring the Blazor Oqtane Blog Module ‚Äì A comprehensive guide to configuring and using the Blog module. Creating a Custom Distribution of Blazor Oqtane Using Site Templates ‚Äì Learn how to create custom Blazor Oqtane distributions with site templates. Deploying Oqtane to Azure ‚Äì Steps to deploy your Oqtane application on Microsoft Azure. Installing Blazor Oqtane ‚Äì A step-by-step guide on installing Oqtane in a Blazor environment. Oqtane Module Creator ‚Äì Learn how to create and manage custom modules in Oqtane. What is Blazor Oqtane? ‚Äì An introduction to Blazor Oqtane and its features. üöÄ Next Steps Explore our Roadmap & History for insights into the ongoing development of Oqtane. Need help with documentation or contributing? Visit our Documentation Page to learn how you can get involved with contributing to Oqtane‚Äôs documentation and improving the guides. Have questions or need support? Feel free to reach out through our community channels for assistance! üì£ Stay Updated For the latest updates on Oqtane, including new features, bug fixes, and community-driven developments, make sure to subscribe to our official blog."
  },
  "guides/installation/databases.html": {
    "href": "guides/installation/databases.html",
    "title": "Databases | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Databases This section provides a general setup guide for popular database systems such as SQL Server, MySQL, PostgreSQL, and SQLite on both Windows and Linux environments. Each database system includes steps for downloading, installing, configuring, and connecting to the database, along with relevant tools and documentation. SQL Server Windows Download SQL Server: Navigate to the SQL Server Downloads page and download the appropriate version of SQL Server for Windows. Install SQL Server: Follow the installation guide provided on the SQL Server website to install SQL Server on your Windows machine. Make sure to select the appropriate options during the installation process according to your requirements. Download SQL Server Management Studio (SSMS): Once SQL Server is installed, download and install SQL Server Management Studio (SSMS) from the official website. Configure SQL Server: After installation, configure SQL Server according to your specific needs. This may include setting up databases, configuring security settings, and adjusting server options. Linux Download SQL Server: Navigate to the SQL Server Downloads page and follow the instructions for installing SQL Server on Ubuntu or your preferred Linux distribution. Install SQL Server: Use the provided package manager (such as apt for Ubuntu) to install SQL Server on your Linux machine. Make sure to follow the instructions carefully and resolve any dependencies as needed. Configure SQL Server: Once SQL Server is installed, configure it according to your requirements. This may involve setting up databases, configuring security settings, and adjusting server options. Refer to the SQL Server documentation for detailed instructions on configuration. Connect to SQL Server: After installation and configuration, you can connect to SQL Server using tools like SQL Server Management Studio (SSMS) or command-line tools like sqlcmd to manage databases and execute queries. MySQL Windows Download MySQL: Visit the MySQL Downloads page and download the MySQL Community Edition for Windows. Install MySQL: Run the installer and follow the installation wizard to install MySQL on your Windows machine. During installation, you may need to configure options such as the installation directory, root password, and port settings. Download MySQL Workbench: After installing MySQL, download MySQL Workbench from the official website. MySQL Workbench is a graphical tool for managing MySQL databases and can be useful for administration tasks. Configure MySQL: Once installed, configure MySQL according to your requirements. This may involve setting up databases, creating users, and configuring security settings. Refer to the MySQL documentation for detailed instructions on configuration. Linux Download MySQL: Visit the MySQL Downloads page and follow the instructions for installing MySQL on Ubuntu or your preferred Linux distribution. Install MySQL: Use the provided package manager (such as apt) to install MySQL on your Linux machine. Make sure to follow the instructions carefully and resolve any dependencies as needed. Configure MySQL: After installing MySQL, configure it according to your requirements. This may include setting up databases, configuring security settings, and adjusting server options. Refer to the MySQL documentation for detailed instructions on configuration. Connect to MySQL: Once MySQL is installed and configured, you can connect to it using MySQL Workbench or command-line tools like mysql to manage databases and execute queries. PostgreSQL Windows Download PostgreSQL: Visit the PostgreSQL Downloads page and download the installer for PostgreSQL on Windows. Install PostgreSQL: Run the installer and follow the installation wizard to install PostgreSQL on your Windows machine. During installation, you may need to specify the installation directory, port settings, and provide a password for the default postgres user. Download pgAdmin: After installing PostgreSQL, download pgAdmin from the official website. pgAdmin is a popular graphical administration tool for PostgreSQL databases and can be helpful for managing databases and running queries. Configure PostgreSQL: Once installed, configure PostgreSQL according to your requirements. This may involve setting up databases, creating users, and configuring security settings. Refer to the PostgreSQL documentation for detailed instructions on configuration. Linux Install PostgreSQL: On Ubuntu or your preferred Linux distribution, use the package manager to install PostgreSQL. Run the following command in the terminal: sudo apt update sudo apt install postgresql postgresql-contrib Configure PostgreSQL: After installation, PostgreSQL should be up and running. By default, it creates a postgres user with administrative privileges. You may need to set a password for this user and configure access permissions as needed. Refer to the PostgreSQL documentation for detailed instructions on configuration. Connect to PostgreSQL: Once PostgreSQL is installed and configured, you can connect to it using pgAdmin or command-line tools like psql. Use these tools to manage databases, create tables, and execute SQL queries. SQLite Windows Download SQLite: Visit the SQLite Downloads page and download the SQLite tools for Windows. You can choose between the precompiled binaries or the command-line shell. Install SQLite: After downloading, extract the contents of the downloaded file to a directory of your choice. SQLite is a self-contained, serverless database engine, so there's no formal installation process required. Set up Environment Variables (Optional): If you plan to use SQLite from the command line frequently, you may want to add the directory containing the SQLite executable to your system's PATH environment variable. This will allow you to run SQLite commands from any directory in the command prompt. Linux Install SQLite: SQLite is likely available in your Linux distribution's package repositories. Use your package manager to install SQLite. For example, on Ubuntu, you can use the following command: sudo apt update sudo apt install sqlite3 Verify Installation: After installation, verify that SQLite is installed correctly by running the following command in the terminal: sqlite3 --version This command should display the installed version of SQLite. Start Using SQLite: Once installed, you can start using SQLite from the command line by running the sqlite3 command followed by the name of the database file you want to create or connect to. For example: sqlite3 mydatabase.db This command will open the SQLite command-line interface and create or connect to a database file named mydatabase.db. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio .NET Core Related Pages Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/deploy-to-azure.html": {
    "href": "guides/installation/deploy-to-azure.html",
    "title": "Deploy to Azure | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Deploy to Azure The Oqtane framework is a modular application framework for Blazor that allows you to easily deploy and manage web applications on Azure. Prerequisites An Azure account. If you don‚Äôt have one, you can create one for free here. The Oqtane GitHub repository. You can access it here. Steps Click on the Deploy to Azure button above. This will open the Azure portal and prompt you to log in with your Azure account. On the Custom deployment form, select an existing Resource group or create a new one. A resource group is a logical container for your Azure resources. Fill in the values for Sql Server Name and Blazor Website Name. These values must be unique to any other values on Azure. You can also change the other settings if you want, such as the location, the pricing tier, and the database size. Click the Purchase button. This will create and deploy the resources needed for your Oqtane application, such as the app service plan, the web app, and the SQL database. Wait for the deployment to finish. You can monitor the progress on the Deployment details page. Once the deployment is complete, you can access your Oqtane application by visiting the URL of your Blazor Website Name. For example, if your Blazor Website Name is my-oqtane-app, then your URL would be https://my-oqtane-app.azurewebsites.net/. Follow the installation wizard to set up your Oqtane application. You will need to enter the host email and password, and optionally once the installation process has completed you can set the site name, logo plus more in the administration dashboard site settings. Congratulations You have successfully deployed your Oqtane application on Azure. Enjoy! üòä Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/development-vs-code-linux.html": {
    "href": "guides/installation/development-vs-code-linux.html",
    "title": "Install Oqtane for Development using Visual Studio Code on Linux (VS Code Linux Ubuntu) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Development using Visual Studio Code on Linux (VS Code Linux Ubuntu) This document provides general instructions for installing Oqtane for development using Visual Studio Code on Linux Ubuntu. Oqtane is an open-source, modular application framework for Blazor that allows you to easily deploy and manage web applications on Azure or any web server. TODO: Review and update all steps to ensure things are as clear, easy and not missing steps, and also adding images. This page will become more uniform with the others as this evolves. Prerequisites Before you start, make sure you have the following prerequisites: A Linux Ubuntu machine with internet access and administrator privileges. .NET SDK installed on your machine. A database server installed on your machine or accessible from your network. You can use MySQL, PostgreSQL, SQLite, or SQL Server. Steps Install Visual Studio Code: Install Visual Studio Code on your machine. You can either download the .deb package from the Visual Studio Code website and install it using the command sudo dpkg -i code*.deb, or use the snap package manager and run the command sudo snap install --classic code. Clone the Oqtane GitHub Repository: Clone the Oqtane GitHub repository to your local machine using the following command: git clone https://github.com/oqtane/oqtane.framework.git Open the Oqtane Folder in Visual Studio Code: Open the Oqtane folder in Visual Studio Code using the command: code oqtane.framework Install Required Extensions: Install the required extensions for Blazor development, such as C#, Razor+, and Blazor Snippets, from the Extensions tab on the left sidebar of Visual Studio Code. Build the Oqtane Solution: Build the Oqtane solution using the integrated terminal in Visual Studio Code. Navigate to the src folder and run the command: dotnet build Publish the Oqtane Project: Publish the Oqtane project to a folder by running the command: dotnet publish -c Release -o publish Note: This may not copy everything over, please review contents of all the latest dll files are copied properly. Copy Folder Contents to Apache Folder: Copy the folder contents to the Apache folder that hosts the site using the command: sudo cp -r publish /var/www/html/oqtane You may need to change the destination folder according to your Apache configuration. Configure Apache: Configure Apache to serve the Oqtane application following the instructions from the Oqtane installation documentation on how to install Oqtane with Apache and MySQL or PostgreSQL. Access Your Oqtane Application: Access your Oqtane application by visiting the URL of your virtual host. For example, if your virtual host is oqtane.example.com, then your URL would be http://oqtane.example.com/. Follow the Installation Wizard: Follow the installation wizard to set up your Oqtane application. You will need to enter the administrator email and password, and optionally the site name and logo. Congratulations! You have successfully installed Oqtane for development using Visual Studio Code on Linux Ubuntu. Enjoy! üòä Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Apache HTTPD Server Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Framework Development Using Visual Studio Code with Windows Oqtane Framework Development Using Visual Studio with Windows ‚Üê Back to Installation Home"
  },
  "guides/installation/development-vs-code.html": {
    "href": "guides/installation/development-vs-code.html",
    "title": "Install Oqtane for Development using Visual Studio Code (VS Code) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Development using Visual Studio Code (VS Code) Overview Developing Oqtane applications with Visual Studio Code (VS Code) offers a lightweight yet powerful environment for coding, debugging, and managing project resources. While VS Code may not provide the full IDE experience of Visual Studio, it offers extensive support for web development tasks, including CSS editing, theme development, and module creation. Development For general development and keeping up with the latest features, you can use the development branch of the Oqtane Framework. However, for module development, it is recommended to target a stable release version of the Oqtane Framework. Install Latest .NET SDK Release: Ensure you have the latest .NET SDK installed on your system. You can download it from the official .NET website. Install Visual Studio Code: Download and install the latest edition of Visual Studio Code. Ensure that the ASP.NET and web development workload is enabled during installation. Oqtane works with all editions of Visual Studio Code, from Community to Enterprise. Optional: Install Data Storage and Processing Extensions: If you prefer to use LocalDB for development (although not required, as Oqtane supports SQLite, MySQL, and PostgreSQL), you must install the necessary Data storage and processing extensions in VS Code. Clone Oqtane Dev Branch: Visit the Oqtane Framework GitHub Repository and clone the Oqtane dev branch source code to your local system using Git Bash with the following command: git clone -b dev https://github.com/oqtane/oqtane.framework.git Open Oqtane Solution\": Navigate to the cloned directory and open the Oqtane.sln solution file in Visual Studio Code. Copy Files to Hosted Folder Location: Copy the necessary files to the hosted folder location, which could be IIS or Apache root directory. This typically includes the compiled binaries and any static assets required for the application to run. Build the solution: Build the solution using the built-in terminal or the .NET CLI by running the following command: dotnet build Run Application: After building the solution, you can run the Oqtane application locally using IIS or Apache. Ensure to stop/start the app pool or services related to the Oqtane app on the web server when updating file changes. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Development Using Visual Studio Code with Linux Oqtane Framework Development Using Visual Studio with Windows ‚Üê Back to Installation Home"
  },
  "guides/installation/development.html": {
    "href": "guides/installation/development.html",
    "title": "Install Oqtane for Visual Studio Development | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Visual Studio Development Development Version (Latest) For general development and keeping up with the latest features, you can use the development branch of Oqtane Framework. However, for module development, it is recommended to target a stable release version of Oqtane Framework. Install Latest .NET SDK Release. Install the latest edition of Visual Studio with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL, and PostgreSQL), you must also install the Data storage and processing. Visit the Oqtane Framework GitHub Repository to download and extract the Oqtane Dev Branch Source Zip File or clone the Oqtane dev branch source code to your local system using Git Bash with the following command: git clone -b dev https://github.com/oqtane/oqtane.framework.git Open the Oqtane.sln solution file. Build the solution. Ensure that you specify Oqtane.Server as the Startup Project. Run the application. Release and Legacy Development Below is a list of current and prior releases for module development targeting different frameworks. Check the official release page for any newer versions not listed. Oqtane Version 5 (.net 8) Install .NET 8 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the Official Oqtane 5 Release Source. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project Run the application. Oqtane Version 4 (.net 7) Install .NET 7 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the Official Oqtane Release Source 4.0.6. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 3 (.net 6) Install .NET 6 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the latest Official Oqtane Release Source 3.4.3. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 2 (.net 5) Install the latest .NET 5 SDK (v5.0.100) Install the latest edition (v16.8 or higher) of Visual Studio 2019 (Community, Professional, or Enterprise Editions) with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you do not have a SQL Server installation available already and you wish to use LocalDB for development, you must also install the .NET desktop development workload. Download the Official Oqtane Release Source 2.3.1. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 1 (.net core 3) Install .NET Core 3.1 SDK (v3.1) Install Visual Studio 2019 (Community, Professional, or Enterprise Editions) with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you do not have a SQL Server installation available already and you wish to use LocalDB for development, you must also install the .NET desktop development workload. Download the Official Oqtane Release Source 1.0.4. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Development Using Visual Studio Code Oqtane Development Using Linux and Visual Studio Code ‚Üê Back to Installation Home"
  },
  "guides/installation/index.html": {
    "href": "guides/installation/index.html",
    "title": "Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Oqtane is a modular application framework that allows you to create dynamic web sites and applications using Blazor and .NET MAUI. Oqtane supports various deployment scenarios and databases. This section provides installation instructions for different environments and configurations. Download an Official Release Find the official Oqtane releases on GitHub and follow these steps to download: Visit the Official Oqtane Releases page on GitHub. Browse the list of releases to find the version you need. Click on the release to view its details. Download the release package by clicking on the appropriate link. Reset an Existing Oqtane Installation If you need to perform a clean database install for a previous version of Oqtane, follow these steps: Open the Oqtane.Server\\appsettings.json file. Locate the DefaultConnection value and set it to \"\". Run the application to trigger the re-installation process, which will execute the database installation scripts. Upgrade Learn how to upgrade your existing Oqtane installation manually or through an automated process: Upgrading Oqtane: This section provides information on how to upgrade your existing Oqtane installation manually or through an automated process. Development This section provides installation instructions for development purposes. You can choose between Windows or Linux development environments and use Visual Studio or Visual Studio Code as your IDE. Windows Windows Visual Studio Development: Install Oqtane quickly for development, primarily for Visual Studio and Windows development. Windows Visual Studio Code Development: Install Oqtane quickly for development, primarily for Visual Studio Code and Windows development. Linux Linux Visual Studio Code Development: Install Oqtane quickly for development, primarily for Visual Studio Code and Linux development. Deploy This section provides installation instructions for deploying Oqtane to various environments using a release package. You will learn how to install the prerequisites, create a database, and configure the web server for your Oqtane application. You can choose between the following deployment options: Azure Install Oqtane using the Deploy to Azure feature: Deploy Oqtane To Azure: This guide shows you how to install Oqtane using the above Deploy To Azure feature. Windows IIS Install Oqtane with various configurations on Windows using IIS: Install Oqtane with IIS Express and SQL Express: This guide shows you how to install Oqtane on Windows using IIS Express and SQL Express Server. Install Oqtane with IIS Express and LocalDB: This guide shows you how to install Oqtane on Windows using IIS (Express) and LocalDb. Install Oqtane with IIS and SQL Server: This guide shows you how to install Oqtane on Windows using IIS and SQL Server. Linux Apache Install Oqtane with Apache on Linux (Ubuntu) with MySQL or PostgreSQL: Install Oqtane with Apache and MySQL: This guide shows you how to install Oqtane on Linux using Apache and MySQL. Install Oqtane with Apache and PostgreSQL: This guide shows you how to install Oqtane on Linux using Apache and PostgreSQL. Resources Explore additional installation resources and access the Oqtane blog and GitHub repository: Oqtane Installation Troubleshooting Tips: If you encounter issues during the installation, upgrade, development, or deployment process, you can refer to our troubleshooting tips. Oqtane Supported Databases: Find detailed information on all databases supported by Oqtane for both Windows and Linux. Oqtane Installation Resources: Access comprehensive installation guides and resources for deploying Oqtane on various platforms. Oqtane Blog: Stay updated with the latest news, announcements, and insights from the Oqtane community by exploring the Oqtane blog. Oqtane GitHub Repository: Access the Oqtane framework's GitHub repository to explore the source code, contribute to development, and stay informed about the latest updates and releases. ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/installation/linux-ubuntu-apache-mysql.html": {
    "href": "guides/installation/linux-ubuntu-apache-mysql.html",
    "title": "Installing Oqtane Using Ubuntu Desktop, Apache and MySQL (Linux) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installing Oqtane Using Ubuntu Desktop, Apache and MySQL (Linux) Step 1: Install Ubuntu Desktop Visit the Ubuntu Desktop download page to download the latest version of Ubuntu Desktop. Choose the appropriate version based on your system architecture (32-bit or 64-bit) and click on the \"Download\" button. Once the download is complete, create a bootable USB drive or DVD from the downloaded ISO file. You can use tools like Rufus for Windows or Etcher for macOS and Linux to create the bootable media. Insert the bootable USB drive or DVD into your computer and boot from it. Follow the on-screen instructions to start the Ubuntu installation process. During the installation process, you will be prompted to choose various options such as language, keyboard layout, and installation type. Make your selections according to your preferences and proceed with the installation. When prompted, choose the option to install Ubuntu alongside your existing operating system or replace it entirely, depending on your requirements. Follow the remaining steps to complete the installation. Once finished, restart your computer to boot into the newly installed Ubuntu Desktop. After booting into Ubuntu Desktop, follow the initial setup wizard to configure your system preferences and create a user account. Once the setup is complete, you will have Ubuntu Desktop installed and ready for use. For more information on installing Ubuntu Desktop, refer to the official Ubuntu Desktop Installation Guide. For additional resources and documentation, visit the Ubuntu documentation home page. Step 2: Installing MySQL Database on Ubuntu This guide provides detailed instructions on how to install and configure MySQL Database on Ubuntu. MySQL is a popular open-source relational database management system used by many applications and frameworks, including Oqtane Framework. Prerequisites Ubuntu Desktop installed and configured on your system. Step 1: Download MySQL APT Repository Configuration Open a web browser and navigate to the MySQL APT Repository download page. Select the appropriate release package for your Ubuntu distribution and architecture, then download it to your system. Once the download is complete, navigate to the directory where the package is saved. Step 2: Install MySQL APT Repository Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Navigate to the directory where you downloaded the MySQL APT repository configuration package. Step 3: Install MySQL Package Navigate to the directory where the downloaded MySQL package is located. Use the following command to install the downloaded package, replacing version-specific-package-name.deb with the actual name of the downloaded package: sudo dpkg -i version-specific-package-name.deb For example, if the downloaded package is named mysql-apt-config_w.x.y-z_all.deb, the command would be: sudo dpkg -i mysql-apt-config_w.x.y-z_all.deb During the installation process, you will be prompted to choose the versions of MySQL server and other components you want to install. If you are unsure, you can stick with the default options. Once the installation is complete, update the package information from the MySQL APT repository: sudo apt-get update Step 4: Configure MySQL Server After installing MySQL, you may need to configure it based on your specific requirements. This includes settings such as the default character set, server collation, and other options. Open a terminal window and log in to MySQL as the root user: sudo mysql -u root -p Enter the root password you set during installation when prompted. Once logged in, you can use SQL commands to configure MySQL. For example, to set the default character set to UTF-8, you can run: SET GLOBAL character_set_server = utf8; Refer to the MySQL documentation for a comprehensive list of configuration options and best practices. Step 5: Secure MySQL Installation After configuring MySQL, it's essential to secure the installation to protect your data and prevent unauthorized access. Run the MySQL security script to secure the installation: sudo mysql_secure_installation Follow the prompts to configure security options for your MySQL installation. This may include setting the root password, removing anonymous users, disallowing remote root login, and removing the test database. Choose the appropriate options based on your security requirements. Step 6: Verify MySQL Installation Once the installation and configuration are complete, verify the status of the MySQL service to ensure it is running: sudo systemctl status mysql If MySQL is not running, start the service using the following command: sudo systemctl start mysql You can also check the MySQL version to confirm the installation: mysql --version Step 7: Create Oqtane Database To create a new MySQL database for the Oqtane Framework, log in to the MySQL command-line interface as the root user: sudo mysql -u root -p Enter the root password you set during installation when prompted. Once logged in, run the following SQL command to create a new database named oqtanedb: CREATE DATABASE oqtanedb; Next, create a new MySQL user named oqtaneuser and grant it privileges to access the oqtanedb database: CREATE USER 'oqtaneuser'@'localhost' IDENTIFIED BY 'OqtaneDevPassword1-1'; GRANT ALL PRIVILEGES ON oqtanedb.* TO 'oqtaneuser'@'localhost'; After creating the user and granting privileges, flush the MySQL privileges to apply the changes: FLUSH PRIVILEGES; Step 3: Install Apache Server This step covers the installation of Apache HTTP Server on Ubuntu. Apache is a widely-used web server that can serve HTML files and other content over HTTP. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install Apache: Install Apache HTTP Server using the following command: sudo apt install apache2 Start Apache Service: Once the installation is complete, Apache service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start apache2 Enable Apache Service to Start on Boot: To ensure that Apache starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable apache2 Check Apache Status: To verify that Apache is running without any errors, you can check its status using: sudo systemctl status apache2 Access Apache Default Page: Open a web browser and navigate to http://localhost. You should see the Apache default page if the installation was successful. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. Ubuntu Server Guide: Comprehensive guide for Ubuntu Server, which includes instructions for installing and configuring various software packages. Step 4: Install .NET Core This step covers the installation of .NET Core on Ubuntu. .NET Core is a cross-platform, open-source framework for building modern, cloud-based, and internet-connected applications. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Register Microsoft Product Repository: To install .NET Core, you first need to register the Microsoft product repository. Run the following command to download and install the Microsoft package signing key: wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install .NET SDK: Once the repository is registered, update the package list and install the .NET SDK using the following commands: sudo apt update sudo apt install -y apt-transport-https sudo apt update sudo apt install -y dotnet-sdk Verify Installation: After installation, verify that the .NET SDK has been successfully installed by running: dotnet --version Install ASP.NET Core Runtime (Optional): If you plan to deploy ASP.NET Core applications, you may also want to install the ASP.NET Core Runtime. Use the following command to install it: sudo apt install -y aspnetcore-runtime Additional Resources .NET Documentation: Official documentation for .NET. .NET Core Download Page: Official download page for .NET Core SDK and runtime. Step 5: Configure Host and Service Files for Apache This step involves creating configuration files for Apache virtual host and service to serve your .NET Core application. Prerequisites Apache server installed on your Ubuntu system. .NET Core SDK installed on your system. Oqtane Framework files ready to be deployed. Configuration Process Create Apache Virtual Host Configuration File: Open a terminal window and navigate to the Apache sites-available directory: cd /etc/apache2/sites-available Create a new virtual host configuration file for your .NET Core application. Replace example.com with your domain name: sudo nano example.com.conf Add the following configuration to the file, adjusting the values as needed: <VirtualHost *:80> ServerName example.com DocumentRoot /var/www/example.com ErrorLog ${APACHE_LOG_DIR}/example.com-error.log CustomLog ${APACHE_LOG_DIR}/example.com-access.log combined </VirtualHost> Save the file and exit the text editor. If you're not familiar with nano, you can learn more about it in the nano documentation. Create Document Root Directory: Create the document root directory where your .NET Core application files will be stored: sudo mkdir /var/www/example.com Configure Apache Service: Enable the newly created virtual host configuration and restart the Apache service: sudo a2ensite example.com.conf sudo systemctl restart apache2 Deploy .NET Core Application: Copy or publish your .NET Core application files to the document root directory (/var/www/example.com) of the virtual host. Adjust File Permissions (Optional): Depending on the deployment scenario, you may need to adjust file permissions to ensure that Apache can access and serve your .NET Core application files properly. Verify Configuration: Open a web browser and navigate to your domain name (e.g., http://example.com). If configured correctly, you should see your .NET Core application running. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. .NET Core Deployment Guide: Official deployment guide for .NET Core applications. Step 6: Setup App Files and Folders Create Directory Structure: Begin by creating a directory structure to organize your Oqtane application files. Choose a location on your Ubuntu system where you want to store the application files. For example: sudo mkdir /var/www/oqtane Download Oqtane Framework: Download ZIP Archive: Visit the Oqtane Framework releases page on GitHub. Click on the \"Oqtane.Framework.x.x.x.Install.zip\" file under the latest release to download it. Once downloaded, extract the ZIP archive to the /var/www/oqtane directory. Extract the downloaded ZIP archive to the /var/www/oqtane directory. Set Permissions (Optional): Depending on your setup, you may need to adjust file permissions to ensure that the web server can access the Oqtane application files properly. Use the following commands to set appropriate permissions: sudo chown -R www-data:www-data /var/www/oqtane sudo chmod -R 755 /var/www/oqtane Configure Web Server: If you haven't already configured Apache to serve your Oqtane application, you'll need to set up a virtual host and configure the necessary Apache directives to point to the application directory. Refer to the Apache documentation for detailed instructions on virtual host configuration. Step 7: Install Oqtane Framework (Linux) To install the Oqtane Framework on Linux, follow these steps: Download Oqtane Release: Download the latest release of Oqtane from the official GitHub repository. Choose the appropriate version and download the ZIP file containing the release files. Extract Release Files: After downloading the ZIP file, extract its contents to a directory on your Linux machine where you want to host the Oqtane application. Set Permissions: Ensure that the appropriate permissions are set for the Oqtane files and directories, allowing the web server user to read and execute the files. You can use the following commands in the terminal to set permissions: sudo chown -R www-data:www-data /path/to/oqtane sudo chmod -R 755 /path/to/oqtane Configure Database Connection: Update the database connection string in the appsettings.json file located in the root directory of your Oqtane application. Use the connection string for your preferred database server (e.g., MySQL, PostgreSQL). Access Oqtane Installation Wizard: Open a web browser and navigate to the URL associated with your Oqtane installation directory. If everything is configured correctly, you should see the Oqtane installation wizard, where you can proceed with the installation and setup of your Oqtane application. By following these steps, you will have successfully installed and configured the Oqtane Framework on your Linux machine, making your application accessible via a web browser. Step 8: Test the Installation After completing the installation process, it's important to test your Oqtane application to ensure everything is working correctly. Follow these steps to test the installation: Access Oqtane Application: Open a web browser and navigate to the URL associated with your Oqtane application. This should be the URL you configured during the installation process. Verify Functionality: Once the Oqtane application loads, verify that it is running correctly. Test various features and functionalities to ensure that everything is working as expected. Login and Administration: If applicable, log in to the Oqtane application using the provided credentials and verify that you have access to the administration interface. This will allow you to manage users, modules, pages, and other aspects of your Oqtane application. Test User Experience: Test the user experience by navigating through different pages, interacting with modules, and performing common tasks within the application. Ensure that the application is responsive and functions properly across different devices and screen sizes. By testing the installation and functionality of your Oqtane application, you can identify any issues or errors early on and address them accordingly, ensuring a smooth and successful deployment. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/linux-ubuntu-apache-postgresql.html": {
    "href": "guides/installation/linux-ubuntu-apache-postgresql.html",
    "title": "Install Oqtane Using Linux Ubuntu, Apache, and PostgreSQL | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Linux Ubuntu, Apache, and PostgreSQL Step 1: Install Ubuntu Desktop Visit the Ubuntu Desktop download page to download the latest version of Ubuntu Desktop. Choose the appropriate version based on your system architecture (32-bit or 64-bit) and click on the \"Download\" button. Once the download is complete, create a bootable USB drive or DVD from the downloaded ISO file. You can use tools like Rufus for Windows or Etcher for macOS and Linux to create the bootable media. Insert the bootable USB drive or DVD into your computer and boot from it. Follow the on-screen instructions to start the Ubuntu installation process. During the installation process, you will be prompted to choose various options such as language, keyboard layout, and installation type. Make your selections according to your preferences and proceed with the installation. When prompted, choose the option to install Ubuntu alongside your existing operating system or replace it entirely, depending on your requirements. Follow the remaining steps to complete the installation. Once finished, restart your computer to boot into the newly installed Ubuntu Desktop. After booting into Ubuntu Desktop, follow the initial setup wizard to configure your system preferences and create a user account. Once the setup is complete, you will have Ubuntu Desktop installed and ready for use. For more information on installing Ubuntu Desktop, refer to the official Ubuntu Desktop Installation Guide. For additional resources and documentation, visit the Ubuntu documentation home page. Step 2: Install PostgreSQL Database This step covers the installation of PostgreSQL Database on Ubuntu. PostgreSQL is a powerful, open-source relational database management system used for storing and managing data. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install PostgreSQL: Install PostgreSQL Database Server using the following command: sudo apt install postgresql Start PostgreSQL Service: Once the installation is complete, PostgreSQL service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start postgresql Enable PostgreSQL Service to Start on Boot: To ensure that PostgreSQL starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable postgresql Access PostgreSQL Command-Line Interface: To access the PostgreSQL command-line interface, use the following command: sudo -u postgres psql Additional Resources PostgreSQL Documentation: Official documentation for PostgreSQL. Step 3: Create Database and User in PostgreSQL This step covers creating a new database and user in PostgreSQL for Oqtane Framework. Additionally, it includes instructions for using pgAdmin, a popular graphical user interface for PostgreSQL administration. Prerequisites PostgreSQL installed and running on your Ubuntu system. Process Access PostgreSQL Command-Line Interface: Open a terminal window and access the PostgreSQL command-line interface as the postgres user: sudo -u postgres psql Create a New Database: Within the PostgreSQL command-line interface, run the following SQL command to create a new database for Oqtane Framework. Replace oqtanedb with your desired database name: CREATE DATABASE oqtanedb; Create a New User: Next, create a new user for accessing the Oqtane database. Replace oqtaneuser with your desired username and OqtaneDevPassword1-1 with a strong password: CREATE USER oqtaneuser WITH PASSWORD 'OqtaneDevPassword1-1'; Grant Privileges to the User: Grant all privileges on the Oqtane database to the newly created user: GRANT ALL PRIVILEGES ON DATABASE oqtanedb TO oqtaneuser; Exit PostgreSQL Command-Line Interface: After completing the database setup, exit the PostgreSQL command-line interface: \\q (Optional) Use pgAdmin for PostgreSQL Administration: pgAdmin is a feature-rich graphical user interface for PostgreSQL administration. You can install pgAdmin on your Ubuntu system and use it to manage your PostgreSQL databases, users, and more. Installation: Visit the pgAdmin download page and download the appropriate package for Ubuntu. Follow the installation instructions provided on the download page to install pgAdmin on your system. Usage: Once installed, launch pgAdmin from the applications menu or by running the pgadmin4 command in the terminal. Connect to your PostgreSQL server by providing the necessary connection details, including host, port, username, and password. Once connected, you can perform various database administration tasks using pgAdmin's intuitive graphical interface. Additional Resources PostgreSQL Tutorial: Comprehensive tutorial for PostgreSQL beginners. pgAdmin Documentation: Official documentation for pgAdmin. Step 4: Install Apache Server This step covers the installation of Apache HTTP Server on Ubuntu. Apache is a widely-used web server that can serve HTML files and other content over HTTP. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install Apache: Install Apache HTTP Server using the following command: sudo apt install apache2 Start Apache Service: Once the installation is complete, Apache service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start apache2 Enable Apache Service to Start on Boot: To ensure that Apache starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable apache2 Check Apache Status: To verify that Apache is running without any errors, you can check its status using: sudo systemctl status apache2 Access Apache Default Page: Open a web browser and navigate to http://localhost. You should see the Apache default page if the installation was successful. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. Ubuntu Server Guide: Comprehensive guide for Ubuntu Server, which includes instructions for installing and configuring various software packages. Step 5: Install .NET Core This step covers the installation of .NET Core on Ubuntu. .NET Core is a cross-platform, open-source framework for building modern, cloud-based, and internet-connected applications. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Register Microsoft Product Repository: To install .NET Core, you first need to register the Microsoft product repository. Run the following command to download and install the Microsoft package signing key: wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install .NET SDK: Once the repository is registered, update the package list and install the .NET SDK using the following commands: sudo apt update sudo apt install -y apt-transport-https sudo apt update sudo apt install -y dotnet-sdk Verify Installation: After installation, verify that the .NET SDK has been successfully installed by running: dotnet --version Install ASP.NET Core Runtime (Optional): If you plan to deploy ASP.NET Core applications, you may also want to install the ASP.NET Core Runtime. Use the following command to install it: sudo apt install -y aspnetcore-runtime Additional Resources .NET Documentation: Official documentation for .NET. .NET Core Download Page: Official download page for .NET Core SDK and runtime. Step 6: Configure Host and Service Files for Apache This step involves creating configuration files for Apache virtual host and service to serve your .NET Core application. Prerequisites Apache server installed on your Ubuntu system. .NET Core SDK installed on your system. Oqtane Framework files ready to be deployed. Configuration Process Create Apache Virtual Host Configuration File: Open a terminal window and navigate to the Apache sites-available directory: cd /etc/apache2/sites-available Create a new virtual host configuration file for your .NET Core application. Replace example.com with your domain name: sudo nano example.com.conf Add the following configuration to the file, adjusting the values as needed: <VirtualHost *:80> ServerName example.com DocumentRoot /var/www/example.com ErrorLog ${APACHE_LOG_DIR}/example.com-error.log CustomLog ${APACHE_LOG_DIR}/example.com-access.log combined </VirtualHost> Save the file and exit the text editor. If you're not familiar with nano, you can learn more about it in the nano documentation. Create Document Root Directory: Create the document root directory where your .NET Core application files will be stored: sudo mkdir /var/www/example.com Configure Apache Service: Enable the newly created virtual host configuration and restart the Apache service: sudo a2ensite example.com.conf sudo systemctl restart apache2 Deploy .NET Core Application: Copy or publish your .NET Core application files to the document root directory (/var/www/example.com) of the virtual host. Adjust File Permissions (Optional): Depending on the deployment scenario, you may need to adjust file permissions to ensure that Apache can access and serve your .NET Core application files properly. Verify Configuration: Open a web browser and navigate to your domain name (e.g., http://example.com). If configured correctly, you should see your .NET Core application running. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. .NET Core Deployment Guide: Official deployment guide for .NET Core applications. Step 7: Setup App Files and Folders Create Directory Structure: Begin by creating a directory structure to organize your Oqtane application files. Choose a location on your Ubuntu system where you want to store the application files. For example: sudo mkdir /var/www/oqtane Clone or Download Oqtane Framework: Navigate to the Oqtane Framework GitHub repository and clone the repository to your local machine using Git or download the source code as a ZIP archive. Option 1: Clone Repository sudo git clone https://github.com/oqtane/oqtane.framework.git /var/www/oqtane Option 2: Download ZIP Archive Visit the Oqtane Framework repository on GitHub. Click on the \"Code\" button and select \"Download ZIP\". Extract the downloaded ZIP archive to the /var/www/oqtane directory. Place Oqtane Files: Once you have obtained the Oqtane Framework files, place them in the directory structure you created earlier. Ensure that the files are organized correctly within the directory to maintain the application's structure. sudo cp -r /path/to/oqtane.framework/* /var/www/oqtane Set Permissions (Optional): Depending on your setup, you may need to adjust file permissions to ensure that the web server can access the Oqtane application files properly. Use the following commands to set appropriate permissions: sudo chown -R www-data:www-data /var/www/oqtane sudo chmod -R 755 /var/www/oqtane Configure Web Server: If you haven't already configured Apache to serve your Oqtane application, you'll need to set up a virtual host and configure the necessary Apache directives to point to the application directory. Refer to the Apache documentation for detailed instructions on virtual host configuration. By following these steps, you have successfully set up the directory structure and placed the Oqtane Framework files in the appropriate location on your Ubuntu system. Your application is now ready for further configuration and deployment. Step 8: Install Oqtane Framework (Linux) To install the Oqtane Framework on Linux, follow these steps: Download Oqtane Release: Download the latest release of Oqtane from the official GitHub repository. Choose the appropriate version and download the ZIP file containing the release files. Extract Release Files: After downloading the ZIP file, extract its contents to a directory on your Linux machine where you want to host the Oqtane application. Set Permissions: Ensure that the appropriate permissions are set for the Oqtane files and directories, allowing the web server user to read and execute the files. You can use the following commands in the terminal to set permissions: sudo chown -R www-data:www-data /path/to/oqtane sudo chmod -R 755 /path/to/oqtane Configure Database Connection: Update the database connection string in the appsettings.json file located in the root directory of your Oqtane application. Use the connection string for your preferred database server (e.g., MySQL, PostgreSQL). Access Oqtane Installation Wizard: Open a web browser and navigate to the URL associated with your Oqtane installation directory. If everything is configured correctly, you should see the Oqtane installation wizard, where you can proceed with the installation and setup of your Oqtane application. By following these steps, you will have successfully installed and configured the Oqtane Framework on your Linux machine, making your application accessible via a web browser. Step 9: Test the Installation After completing the installation process, it's important to test your Oqtane application to ensure everything is working correctly. Follow these steps to test the installation: Access Oqtane Application: Open a web browser and navigate to the URL associated with your Oqtane application. This should be the URL you configured during the installation process. Verify Functionality: Once the Oqtane application loads, verify that it is running correctly. Test various features and functionalities to ensure that everything is working as expected. Login and Administration: If applicable, log in to the Oqtane application using the provided credentials and verify that you have access to the administration interface. This will allow you to manage users, modules, pages, and other aspects of your Oqtane application. Test User Experience: Test the user experience by navigating through different pages, interacting with modules, and performing common tasks within the application. Ensure that the application is responsive and functions properly across different devices and screen sizes. By testing the installation and functionality of your Oqtane application, you can identify any issues or errors early on and address them accordingly, ensuring a smooth and successful deployment. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/maui-setup.html": {
    "href": "guides/installation/maui-setup.html",
    "title": "Setting Up Oqtane.Maui for Development with Visual Studio | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Setting Up Oqtane.Maui for Development with Visual Studio Introduction Oqtane.Maui is a hybrid .NET MAUI application that integrates with the Oqtane framework, allowing developers to create cross-platform applications with ease. This guide provides a step-by-step process to set up Oqtane.Maui for development using Visual Studio and .NET 8, specifically for Oqtane version 5.1. Prerequisites Visual Studio installed and updated on your machine. Latest .NET 8 SDK installed. A database server installed on your machine or accessible from your network. You can use MySQL, PostgreSQL, SQLite, or SQL Server. Step-by-Step Setup Guide 1. Install Oqtane Follow the official Oqtane getting started guide here. Ensure you have the required dependencies installed. 2. Configure Oqtane for Hybrid .NET MAUI Open the Oqtane Admin Dashboard. Navigate to Site Settings Navigate to UI Component Settings Set the option for Hybrid? to Yes. 3. Edit the MauiConstants.cs File (Option #1) Open your Oqtane.Maui project in Visual Studio. Locate the MauiConstants.cs file in your project directory. Modify the file to point to your Oqtane web application: namespace Oqtane.Maui; public static class MauiConstants { // the API service url (used as fallback if not set in appsettings.json) public static string ApiUrl = \"\"; // public static string ApiUrl = \"http://localhost:44357/\"; // for local development (Oqtane.Server must be already running for MAUI client to connect) //public static string apiurl = \"http://localhost:44357/sitename/\"; // local microsite example //public static string apiurl = \"https://www.dnfprojects.com/\"; // for testing remote site // specify if you wish to allow users to override the url via appsettings.json in the AppDataDirectory public static bool UseAppSettings = true; } For local development you may set this as shown in the image below by commenting/uncommenting lines. 4. Modify appsettings.json (Option #2 Preferred) The preferred way to configure the URL is through the appsettings.json file. Note that the Oqtane.Maui app supports an appsettings.json file located in the FileSystem.Current.AppDataDirectory. The first time you run the Oqtane.Maui app, it will look in that location for the appsettings.json file, and if it does not exist, it will create one and display a message in the UI: This option allows you to modify the appsettings.json without having to change the MauiConstants.cs file and recompile the app (although that approach works as well). 5. Build and Deploy the Application Open the Oqtane.Maui project in Visual Studio. Build the application: Go to Build > Build Solution or press Ctrl + Shift + B. Run/launch the application: Set the Oqtane.Maui project as the startup project. Press F5 to start debugging or Ctrl + F5 to run without debugging. Alternatively, you can run the application by clicking on Windows Machine within Visual Studio. If you prefer, you can also find the application deployed on your Windows machine and run it from your desktop. Additional Tips and Troubleshooting Ensure all dependencies are correctly installed. Oqtane Framework must be running on a seperate instance of Visual Studio or a web server. For additional user functionality like file uploads you may need to create a user token. This can be accomplished by navigating to Admin Dashboard > User Management > Token Settings and setting the *Secret: option. For further assistance, refer to the Oqtane community discussion forums. Conclusion By following these steps, you should have a fully functional Oqtane.Maui setup for development with Visual Studio. If you encounter any issues or have suggestions for improving this guide, please contribute to the documentation."
  },
  "guides/installation/resources.html": {
    "href": "guides/installation/resources.html",
    "title": "Resources | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Resources This section provides a collection of links and resources that can help you with Oqtane installation, development, and usage. You can find information and guidance on various topics, such as Oqtane framework, IDE tools, IIS and .NET Core hosting, databases, modules, themes, localization, security, and more. You can also access the Oqtane blog and GitHub repository for the latest news, tips, and tutorials. Note: The links in this section are external and may lead to websites that are not affiliated with Oqtane. Please use them at your own discretion and follow their respective terms and policies. Oqtane Framework Oqtane Framework Releases: Download the latest Oqtane release for installation. Oqtane GitHub Repository: Contribute to the Oqtane project and report issues on GitHub. Oqtane Blog: Stay updated with the latest news, tips, and tutorials. IDE Tools Visual Studio and VS Code Downloads: Download Visual Studio (Windows Only) and Visual Studio Code (Windows and Linux) IDEs for development. IIS & .NET Core Hosting Microsoft .NET Downloads: Download the .NET Core Hosting Bundle for hosting .NET Core applications on Windows servers. IIS URL Rewrite Module: Download and install URL Rewrite Module for configuring URL rewriting rules in IIS. WebSocket Support on IIS: Instructions for enabling WebSockets on IIS. Publish an ASP.NET Core app to IIS: This tutorial demonstrates how to host an ASP.NET Core app on an IIS server. ASP.NET Core security topics: This article provides an overview of ASP.NET Core security features, including authentication, authorization, data protection, HTTPS enforcement, safe storage of app secrets, XSRF/CSRF prevention, CORS, and XSS attack prevention. Databases SQL Server SQL Server Downloads: Download SQL Server. Windows SQL Server 2022 Evaluation Download: A free trial version of SQL Server 2022, the latest release of the relational database management system from Microsoft. SQL Server Management Studio (SSMS) Download: Download SQL Server Management Studio for database management. SQL Server Installation Guide for Linux Ubuntu: Detailed guide on installing SQL Server on Ubuntu. Visual Studio Code mssql Extension: The mssql extension for Visual Studio Code (VS Code) to work with databases in SQL Server on Windows, macOS, and Linux, as well as Azure SQL Database and Azure SQL Managed Instance. MySQL MySQL Downloads: Download MySQL Community Server. MySQL Workbench Download: MySQL Workbench for database administration. MySQL Documentation for Windows Installation: Installing MySQL on Microsoft Windows. MySQL Documentation for Ubuntu Installation: Quick guide for installing MySQL on Ubuntu using APT repository. PostgreSQL PostgreSQL Downloads: Download the latest version of PostgreSQL. pgAdmin Download: Tool for PostgreSQL administration. PostgreSQL Documentation Tutorial: Tutorial to help with installing, configuring and using PostgreSQL database server. PostgreSQL Documentation for Ubuntu Installation: Installation guide specific to Ubuntu environment. SQLite SQLite Downloads: Download SQLite for Ubuntu. SQLite Documentation: Official documentation for SQLite. Windows OS Windows Server 2022 Evaluation Download: A free trial version of Windows Server 2022, the latest release of the server operating system from Microsoft.application platform, and storage. Windows 11 Enterprise Evaluation Download: A free trial version of Windows 11 Enterprise, the most advanced and secure edition of Windows 11, the latest operating system from Microsoft. Linux Ubuntu OS Downloads: Ubuntu Downloads: Download the latest version of Ubuntu. Installation Guide Ubuntu Installation Guide: Step-by-step guide for installing Ubuntu Desktop edition. Ubuntu Server Installation Guide: Installation guide for Ubuntu Server edition. Nano Editor Online Manual: This is the online manual for the Nano text editor, providing detailed documentation on its usage and features. GNU Nano Official Website: Visit the official website of GNU Nano to find additional resources, downloads, and community support. GNU Nano Documentation: Access the comprehensive documentation for GNU Nano, including guides, FAQs, and release notes. Apache HTTP Server Apache HTTP Server Documentation: Official documentation for the Apache HTTP Server, providing comprehensive guides, configuration references, and troubleshooting tips. Apache Foundation: The official website of the Apache Software Foundation, where you can find information about all Apache projects, including the HTTP Server. Ubuntu: Install and Configure Apache: Tutorial going through the steps of setting up an Apache server on Ubuntu. Host ASP.NET Core on Linux with Apache: This article explains how to set up Apache as a reverse proxy server on CentOS 7 to redirect HTTP traffic to an ASP.NET Core web app running on the Kestrel server. Resources Mozilla Developer Network (MDN): Visit MDN for comprehensive documentation and resources on web development, including HTML, CSS, JavaScript, and more. Mozilla Server Side TLS Guidelines: Mozilla provides guidelines for configuring server-side TLS to enhance security. These guidelines cover various aspects of TLS configuration, including cipher suites, protocols, and certificate management. Mozilla SSL Configuration Generator: This tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Let's Encrypt: Let's Encrypt is a free, automated, and open certificate authority (CA) that provides SSL/TLS certificates to enable HTTPS on websites. Their website offers detailed documentation and resources for setting up HTTPS on web servers. ‚Üê Back to Installation Home"
  },
  "guides/installation/troubleshooting.html": {
    "href": "guides/installation/troubleshooting.html",
    "title": "Troubleshooting Installations | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Installations Overview This section provides resources and guidance for troubleshooting common installation issues in Oqtane. Whether you're setting up a fresh installation or addressing problems in an existing setup, these guides will help you resolve the most frequent installation challenges. Installation Troubleshooting Guides Below are two detailed guides for troubleshooting installations, tailored to the specific needs of users and administrators: Installation Issues This guide covers troubleshooting tips and solutions for common issues encountered during the installation process of Oqtane. It includes: Installation Failures: Steps to resolve issues when the installation does not complete successfully. Database Connection Problems: Solutions for troubleshooting database connection errors. File Permission Issues: Guidance on fixing file permission problems that may block the installation. Configuration File Errors: How to troubleshoot configuration file issues that prevent successful setup. Upgrading Installations This guide provides troubleshooting steps specifically for administrators upgrading their Oqtane installation. It addresses: Upgrade Failures: Identifying and resolving problems during the upgrade process. Compatibility Issues: Ensuring that the new version of Oqtane is compatible with your existing configuration. Data Migration Problems: Solutions for handling issues related to data migration during an upgrade. Post-Upgrade Issues: Resolving issues that arise after the upgrade is complete, such as broken links or missing data. Database Troubleshooting This guide addresses common database-related issues during both installation and upgrade. It includes: Database Connection Problems: Steps to resolve issues where the application cannot connect to the database. Database Migration Issues: Guidance on troubleshooting issues that occur when migrating databases. Data Integrity Problems: How to identify and resolve data corruption or missing data issues. Permissions and Access Control: Solutions for issues related to database access permissions and user roles. These guides are designed to provide practical solutions and best practices to help you install and upgrade Oqtane smoothly."
  },
  "guides/installation/upgrade.html": {
    "href": "guides/installation/upgrade.html",
    "title": "Upgrading Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Upgrading Oqtane Regularly upgrading Oqtane is crucial to maintain the latest fixes, features, and security patches. Below, you'll find simplified instructions for both manual and automated upgrade processes. Manual Upgrade Performing a manual upgrade ensures full control over the process. Follow these straightforward steps: Step 1: Download Upgrade Package Visit the Oqtane Framework releases page on GitHub. Download the package for your desired version that ends with *.Upgrade.zip (e.g., Oqtane.Framework.5.0.2.Upgrade.zip). Step 2: Access Installation Location Navigate to the root location where your Oqtane framework files were initially deployed. You can identify this location by files with a .dll extension (e.g., Oqtane.Server.dll). Step 3: Stop Oqtane Application Depending on your setup: Stop your website using your web server or cloud provider's interface. In IIS (Internet Information Services), stop the corresponding App Pool. For Apache or Linux alternatives, halt the relevant service. Alternatively, create an app_offline.htm file in the root folder to temporarily shut down your site. Step 4: Replace Files Extract all files from the Upgrade.zip package into the root location obtained in Step 2. When prompted, replace existing files with those from the upgrade package. Step 5: Restart Oqtane Application Restart your Oqtane application: Restart your site using your web server or cloud provider's interface. In IIS, restart the previously stopped App Pool. For Apache or Linux, restart the halted service. If you created an app_offline.htm file, delete it now. Step 6: Verify Upgrade Open your web browser and navigate to your site's URL. The upgrade scripts will automatically execute during application startup. Automated Upgrade Oqtane streamlines the upgrade process for non-technical users with its automated upgrade feature. Follow these steps: Log in to your Oqtane site as the host user. Navigate to the Admin Dashboard via the Control Panel. Choose the \"System Update\" option. 4.If a newer version is available on Nuget.org, click \"Upgrade to #.#.#\" to download and perform the upgrade automatically. If you're already up-to-date, you'll see a message indicating this. Alternatively, use the \"Upload\" tab to manually upload a framework upgrade package to the site and select a button to install it. This method also supports reinstallation or repair of an existing installation with the current version. Note: Automated upgrades may fail due to environmental factors. If this occurs, resort to the manual method described above. Oqtane Automated Upgrade Process By following these instructions, you'll ensure your Oqtane installation stays current with the latest enhancements and security fixes. Remember, stopping the Oqtane application is essential to replace files during the upgrade process. Automated upgrades streamline the process, but manual upgrades provide greater control, especially for custom installations. Resources Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/walkthrough-dev/index.html": {
    "href": "guides/installation/walkthrough-dev/index.html",
    "title": "Install Oqtane as CMS - Walkthrough for Developers | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane as CMS - Walkthrough for Developers This demonstrates a step-by-step walkthrough to install Oqtane on your local development machine. It shows both how to get it running in Visual Studio, as well as installing the extension CMS module 2sxc. Prerequisites This assumes that you have the following software installed on your machine: Visual Studio latest version .NET Core SDK latest version SQL Server If you need guidance on installing any of these prerequisites, refer to the links above. 1. Install Oqtane These slides start by running git clone -b master https://github.com/oqtane/oqtane.framework.git to get the latest build, then open the solution in Visual Studio make minor adjustments compile it run it specify the database connection etc. let the installation run login as super user 2. Install the CMS Extension Module 2sxc These slides show how to install the 2sxc module, which is a powerful content management system (CMS) for Oqtane. 3. Install the Default Content Configuration These slides show how to install the default content configuration for the 2sxc module. The content configuration basically tells the system what kinds of content exist (e.g. videos, text/images, etc.) and how they are presented to the end-user. Once it's installed, you can verify it works by trying to add content. 4. Add an App Apps are packages of functionality which can be added to your Oqtane installation. Typical examples are Blog, News, Galleries, Swipers, Real-Estate-Listings, etc. Related Pages ‚Üê Back to Installation Home"
  },
  "guides/installation/windows-iis-express-sql-express.html": {
    "href": "guides/installation/windows-iis-express-sql-express.html",
    "title": "Install Using Windows, IIS Express and MS SQL Express | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Using Windows, IIS Express and MS SQL Express Step 1: Install IIS Search for \"Turn Windows features on or off\" next to the Windows Start button. Enable Internet Information Services (IIS) ensuring WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Note: Ensure that the WebSocket Protocol is enabled and WebDAV Publishing is disabled to avoid conflicts with Blazor. Step 2: Install Url Rewrite Module Navigate to Url Rewrite Module. Download and install. Note: The URL Rewrite Module is necessary for configuring URL rewriting rules in IIS, which are often used in web applications like Oqtane. Step 3: Install .NET Core Hosting Bundle Navigate to .NET Core Hosting Bundle. Download and install the bundle. Restart your machine. Note: The .NET Core Hosting Bundle is required for hosting .NET Core applications on Windows servers. Step 4: Install LocalDB If doing a local install and wanting to use LocalDB for development, navigate to LocalDB installation and choose the appropriate package. Note: LocalDB is recommended for development environments but can be substituted with other database options supported by Oqtane such as SQLite, MySQL, PostgreSQL, or SQL Server. Step 5: Install Oqtane Download the latest Install package from Oqtane Releases. Extract the files to your desired directory. Note: Extract the files to a directory where you plan to host your application. Step 6: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" by searching for it using the search icon next to your Windows Start button. Expand the top node identifying your machine in the left-hand pane. Right-click on Application Pools and select \"Add Application Pool\". Provide a Name for the application pool, such as \"oqtane\". Specify No Managed Code for the .NET CLR version. Click OK. In the main Application Pools pane, select the newly created pool. In the right-hand Actions pane, select Advanced Settings. Scroll down to Process Model and find the Identity option. To ensure secure interaction with the file system and LocalDB without granting excessive privileges, it's recommended to modify the permissions of the folder containing the IIS Oqtane files to grant appropriate access to the Application Pool's identity. Right-click on the folder containing the Oqtane files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Add the Application Pool's identity (e.g., IIS AppPool\\oqtane) and grant it appropriate permissions, such as Modify access. This allows the application pool to write to the directory in addition to reading from it. Locate the LocalDB Data Directory: By default, LocalDB databases are stored in the user's profile directory under C:\\Users\\{username}\\AppData\\Local\\Microsoft\\Microsoft SQL Server Local DB\\Instances\\{instancename}\\. Modify Folder Permissions: Right-click on the folder containing the LocalDB database files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Click on \"Add\" and enter the name of the user account or group that you want to grant modify permissions to. This could be your current user account or the Application Pool's identity if it needs to write to the LocalDB files. After adding the user or group, select it from the list and check the \"Modify\" permission checkbox under \"Allow\". Click \"Apply\" and then \"OK\" to save the changes. Note: For development environments, setting the App Pool's Identity to \"LocalSystem\" may be acceptable for simplicity and ease of setup. However, exercise caution and consider using a more granular approach for production environments to adhere to security best practices. Step 7: Configure IIS Website In IIS, right-click on Sites and select \"Add Website\". Provide a name and choose the Application Pool created earlier. Specify the path to the Oqtane files. Specify a Host name, e.g., \"oqtane.dev\". Note: Ensure that the host name specified here is correctly mapped to the machine in the host file. Step 8: Add a Host Entry Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., \"127.0.0.1 oqtane.dev\". Save the file. Note: This step is only required for a local development environment. In shared or public environments, standard DNS configurations are used. Step 9: Navigate to Site Open your favorite browser and navigate to the specified host name, e.g., http://oqtane.dev. Follow the Oqtane install wizard, providing necessary database connection details and site administrator credentials. Click Install. Note: If encountering errors during the Install Wizard due to database creation permissions, consider creating the database manually before initiating the Install Wizard. Step 10: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/windows-iis-localdb.html": {
    "href": "guides/installation/windows-iis-localdb.html",
    "title": "Install Oqtane Using Windows, IIS Express and LocalDB | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Windows, IIS Express and LocalDB Step 1: Install IIS Search for \"Turn Windows features on or off\" next to the Windows Start button. Enable Internet Information Services (IIS) ensuring WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Note: Ensure that the WebSocket Protocol is enabled and WebDAV Publishing is disabled to avoid conflicts with Blazor. Step 2: Install Url Rewrite Module Navigate to Url Rewrite Module. Download and install. Note: The URL Rewrite Module is necessary for configuring URL rewriting rules in IIS, which are often used in web applications like Oqtane. Step 3: Install .NET Core Hosting Bundle Navigate to .NET Core Hosting Bundle. Download and install the bundle. Restart your machine. Note: The .NET Core Hosting Bundle is required for hosting .NET Core applications on Windows servers. Step 4: Install LocalDB If doing a local install and wanting to use LocalDB for development, navigate to LocalDB installation and choose the appropriate package. Note: LocalDB is recommended for development environments but can be substituted with other database options supported by Oqtane such as SQLite, MySQL, PostgreSQL, or SQL Server. Step 5: Install Oqtane Download the latest Install package from Oqtane Releases. Extract the files to your desired directory. Note: Extract the files to a directory where you plan to host your application. Step 6: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" by searching for it using the search icon next to your Windows Start button. Expand the top node identifying your machine in the left-hand pane. Right-click on Application Pools and select \"Add Application Pool\". Provide a Name for the application pool, such as \"oqtane\". Specify No Managed Code for the .NET CLR version. Click OK. In the main Application Pools pane, select the newly created pool. In the right-hand Actions pane, select Advanced Settings. Scroll down to Process Model and find the Identity option. To ensure secure interaction with the file system and LocalDB without granting excessive privileges, it's recommended to modify the permissions of the folder containing the IIS Oqtane files to grant appropriate access to the Application Pool's identity. Right-click on the folder containing the Oqtane files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Add the Application Pool's identity (e.g., IIS AppPool\\oqtane) and grant it appropriate permissions, such as Modify access. This allows the application pool to write to the directory in addition to reading from it. Locate the LocalDB Data Directory: By default, LocalDB databases are stored in the user's profile directory under C:\\Users\\{username}\\AppData\\Local\\Microsoft\\Microsoft SQL Server Local DB\\Instances\\{instancename}\\. Modify Folder Permissions: Right-click on the folder containing the LocalDB database files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Click on \"Add\" and enter the name of the user account or group that you want to grant modify permissions to. This could be your current user account or the Application Pool's identity if it needs to write to the LocalDB files. After adding the user or group, select it from the list and check the \"Modify\" permission checkbox under \"Allow\". Click \"Apply\" and then \"OK\" to save the changes. Note: For development environments, setting the App Pool's Identity to \"LocalSystem\" may be acceptable for simplicity and ease of setup. However, exercise caution and consider using a more granular approach for production environments to adhere to security best practices. Step 7: Configure IIS Website In IIS, right-click on Sites and select \"Add Website\". Provide a name and choose the Application Pool created earlier. Specify the path to the Oqtane files. Specify a Host name, e.g., \"oqtane.dev\". Note: Ensure that the host name specified here is correctly mapped to the machine in the host file. Step 8: Add a Host Entry Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., \"127.0.0.1 oqtane.dev\". Save the file. Note: This step is only required for a local development environment. In shared or public environments, standard DNS configurations are used. Step 9: Navigate to Site Open your favorite browser and navigate to the specified host name, e.g., http://oqtane.dev. Follow the Oqtane install wizard, providing necessary database connection details and site administrator credentials. Click Install. Note: If encountering errors during the Install Wizard due to database creation permissions, consider creating the database manually before initiating the Install Wizard. Step 10: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/installation/windows-iis-sql.html": {
    "href": "guides/installation/windows-iis-sql.html",
    "title": "Install Oqtane Using Windows, IIS and MS SQL Server | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Windows, IIS and MS SQL Server Overview This guide will walk you through the steps to install Oqtane on a Windows system using Internet Information Services (IIS) as the web server and Microsoft SQL Server as the database backend. We'll also use SQL Server Management Studio (SSMS) for database management. Prerequisites Before you begin, make sure you have the following: A Windows machine with administrative privileges. Internet Information Services (IIS) installed. Microsoft SQL Server installed, along with SQL Server Management Studio (SSMS). Step 1: Enable Internet Information Services (IIS) Open the \"Turn Windows features on or off\" menu next to the Windows Start button. Enable Internet Information Services (IIS), ensuring that the WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Step 2: Install URL Rewrite Module Navigate to the Url Rewrite Module page. Download and install the module. Step 3: Install .NET Core Hosting Bundle Navigate to the .NET Core Hosting Bundle page. Download and install the Windows hosting bundle. Restart your machine. Step 4: Install Microsoft SQL Server Download and install Microsoft SQL Server. Ensure that you enable SQL Server Authentication mode during the installation process. During the installation, choose the option to enable TCP/IP protocol for network communication. Step 5: Install SQL Server Management Studio (SSMS) Download and install SQL Server Management Studio (SSMS). Step 6: Configure SQL Server Open SQL Server Management Studio (SSMS). Connect to your SQL Server instance. Create a new database for Oqtane. Optionally, create a new SQL Server login or use an existing one for Oqtane. Step 7: Download and Extract Oqtane Download the latest release of Oqtane from the Oqtane Releases page. Extract the files to your desired directory. Step 8: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" from the Start menu. Create a new Application Pool named \"oqtane\" with No Managed Code for the .NET CLR version. Set appropriate permissions for the folder containing the Oqtane files. Note: Ensure that the folder containing the Oqtane files has appropriate modify permissions set for the \"IIS AppPool\\oqtane\" user to avoid any permission issues during installation or runtime. Step 9: Configure IIS Website In IIS Manager, right-click on Sites and select \"Add Website\". Provide a name and choose the \"oqtane\" Application Pool. Specify the path to the Oqtane files and a host name (e.g., \"oqtane.dev\"). Step 10: Add a Host Entry (Optional) Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., 127.0.0.1 oqtane.dev. Save the file. Step 11: Navigate to the Site Open your favorite web browser. Navigate to the specified host name, e.g., http://oqtane.dev. You should now see the Oqtane installation wizard. Follow the on-screen instructions to complete the installation process. Step 12: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/marketplace/assets/placeholder.html": {
    "href": "guides/marketplace/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/marketplace/index.html": {
    "href": "guides/marketplace/index.html",
    "title": "Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Marketplace Introduction The Oqtane Marketplace is a central hub where users and developers can discover, share, and distribute themes, modules, and translations for the Oqtane framework. Whether you're a developer looking to showcase your creations or a user seeking new features and enhancements for your Oqtane-based application, the Marketplace provides a convenient platform to meet your needs. Using the Oqtane Marketplace Learn how to navigate the Oqtane Marketplace, find and install themes and modules, and explore the available offerings. This guide will walk you through the process of discovering and utilizing resources from the Marketplace to enhance your Oqtane experience. Submitting Contributions Are you a developer interested in sharing your themes, modules, or translations with the Oqtane community? This manual provides detailed instructions on how to prepare and submit your contributions to the Oqtane Marketplace, making them accessible to users worldwide. Monetization Options Discover opportunities for monetization within the Oqtane Marketplace. Whether you're interested in offering commercial products or exploring sponsorship and advertising options, this guide outlines various strategies for monetizing your contributions to the Oqtane ecosystem. Troubleshooting Encountering issues while using the Oqtane Marketplace? This troubleshooting guide offers solutions to common problems and helps you resolve issues related to theme and module installation, compatibility, and other Marketplace functionalities. Explore the Oqtane Marketplace and unleash the full potential of your Oqtane-based applications today! ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/marketplace/monetization.html": {
    "href": "guides/marketplace/monetization.html",
    "title": "Monetization Options in the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Monetization Options in the Oqtane Marketplace Overview The Oqtane Marketplace offers various opportunities for developers to monetize their contributions, including themes, modules, and translations. Whether you're looking to generate revenue from your creations or support your development efforts, the Marketplace provides several monetization options to suit your needs. Pricing Models Explore different pricing models available in the Oqtane Marketplace, including free, freemium, subscription-based, and one-time purchase options. Learn how to choose the right pricing model for your products and maximize your revenue potential. Licensing and Usage Rights Understand the licensing and usage rights associated with products listed on the Oqtane Marketplace. From open-source licenses to commercial licenses, this section provides guidance on selecting the appropriate licensing model for your themes, modules, or translations. Payment Processing Learn about the payment processing options available for commercial products in the Oqtane Marketplace. Whether you prefer to use integrated payment gateways or manage transactions independently, this section covers the steps involved in setting up payment processing for your products. Sponsorship and Advertising Explore opportunities for sponsorship and advertising within the Oqtane Marketplace. From promoting your products to sponsoring specific features or sections of the Marketplace, this section discusses how to leverage sponsorship and advertising to increase visibility and reach a wider audience. Analytics and Reporting Gain insights into the performance of your products in the Oqtane Marketplace through analytics and reporting tools. Learn how to track key metrics such as downloads, revenue, and user engagement to optimize your monetization strategies and drive growth. Support and Maintenance Services Discover the value of offering support and maintenance services for your products listed on the Oqtane Marketplace. From providing timely updates and bug fixes to offering premium support packages, this section explores ways to enhance the customer experience and build long-term relationships with users. Promotional Strategies Develop effective promotional strategies to increase awareness and sales of your products in the Oqtane Marketplace. Whether through targeted marketing campaigns, cross-promotions with other developers, or participation in community events, this section offers practical tips for promoting your monetized offerings. By leveraging the monetization options available in the Oqtane Marketplace, you can turn your passion for development into a sustainable source of income while contributing to the growth and success of the Oqtane ecosystem."
  },
  "guides/marketplace/submitting-contributions.html": {
    "href": "guides/marketplace/submitting-contributions.html",
    "title": "Submitting Contributions to the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Submitting Contributions to the Oqtane Marketplace Overview This manual provides detailed instructions for developers interested in contributing themes, modules, and translations to the Oqtane Marketplace. By sharing your creations with the Oqtane community, you can make your work accessible to users worldwide and contribute to the growth of the ecosystem. Preparing Your Contributions Before submitting your themes, modules, or translations to the Marketplace, it's essential to ensure they meet certain standards and requirements. This section outlines the steps you need to take to prepare your contributions for submission. Submitting Themes Themes play a crucial role in defining the appearance and user experience of Oqtane-based applications. Learn how to package and submit your themes to the Marketplace, making them available for users to enhance the visual aesthetics of their sites. Submitting Modules Modules provide additional functionality and features to Oqtane applications. This section guides you through the process of packaging and submitting your modules to the Marketplace, enabling users to extend the capabilities of their applications. Submitting Translations Translating applications into different languages enhances accessibility and usability for users worldwide. Discover how to prepare and submit your translations to the Marketplace, allowing users to customize their applications to suit their linguistic preferences. Review Process Once you've submitted your contributions to the Marketplace, they will undergo a review process to ensure quality and compatibility. This section provides an overview of the review process and what to expect during the evaluation of your submissions. Making Updates After your contributions are live on the Marketplace, you may need to make updates or revisions based on user feedback or changes in Oqtane's framework. Learn how to manage and update your submissions to provide the best possible experience for users. Promoting Your Contributions Promoting your themes, modules, and translations can help increase visibility and adoption within the Oqtane community. Discover strategies for effectively promoting your contributions and reaching a broader audience of users. By following the guidelines outlined in this manual, you can contribute to the growth and development of the Oqtane ecosystem while showcasing your talents and expertise to the community."
  },
  "guides/marketplace/troubleshooting.html": {
    "href": "guides/marketplace/troubleshooting.html",
    "title": "Marketplace Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Marketplace Troubleshooting Overview This section provides resources and guidance for troubleshooting common issues related to the Oqtane Marketplace. Whether you're experiencing issues with installing, updating, or managing marketplace modules, this guide will help you resolve those problems efficiently. Common Marketplace Troubleshooting Topics Below are the main troubleshooting areas covered in this guide: Theme or Module Installation Error Learn how to troubleshoot errors during theme or module installation from the Oqtane Marketplace, including errors or conflicts. Compatibility Problems Resolve compatibility issues between themes, modules, or translations installed from the Marketplace and your Oqtane site. Marketplace Navigation Problems Fix problems related to navigating the Oqtane Marketplace or accessing specific sections. For detailed troubleshooting steps and solutions, refer to the full Marketplace Troubleshooting Guide."
  },
  "guides/marketplace/using-oqtane-marketplace.html": {
    "href": "guides/marketplace/using-oqtane-marketplace.html",
    "title": "Using The Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Using The Oqtane Marketplace Overview This manual will guide you through the process of using the Marketplace to enhance your Oqtane-based applications with themes, modules, and translations. To get started, navigate to the Module Management administration page to use the Oqtane Marketplace from the Administration Dashboard of your Oqtane site. From there, you can browse, install, and manage various resources to customize and extend your applications. Browsing and Discovering The Marketplace offers a vast selection of themes, modules, and translations for you to explore. Learn how to navigate the Marketplace and discover new resources for your Oqtane applications. Installing Resources Once you've found the themes, modules, or translations you need, it's time to install them on your Oqtane site. This section will walk you through the installation process, ensuring that you can quickly and easily add new features to your applications. Managing Installed Resources After installing resources from the Marketplace, you may need to manage them from time to time. Whether you want to enable, disable, or uninstall a resource, this section will show you how to effectively manage your installed themes, modules, and translations."
  },
  "guides/migrations/assets/placeholder.html": {
    "href": "guides/migrations/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/migrations/database-migration.html": {
    "href": "guides/migrations/database-migration.html",
    "title": "Database Migrations | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Database Migrations Database migrations are essential in Oqtane to ensure that the database schema aligns with the application's version. These migrations help to safely apply changes to the database structure, such as adding new tables, modifying columns, or altering indexes, and are executed as part of the upgrade process. This guide explains how to use the migration scripts, troubleshoot common issues, and resolve database-related problems during upgrades. Overview Oqtane uses migration scripts to handle changes to the database schema between versions. When upgrading from one version to another, migration scripts are applied to bring the database up to date with the new code changes. The migration process typically involves: Running pre-defined SQL scripts that modify the database structure. Ensuring that database schema changes are consistent with the code's expectations. Handling version-specific database changes (i.e., adding, altering, or removing columns or tables). Running Database Migrations To apply migrations, follow these steps: Backup the Database: Before applying any migrations, ensure that you have a recent backup of your database to prevent data loss in case of errors. Verify the Database Version: Ensure that you are upgrading from a compatible database version. Check your current database schema version and compare it with the version you're upgrading to. Run Migration Scripts: Oqtane provides migration scripts that can be executed on your database to bring it up to date. These scripts can typically be run using the Oqtane Admin interface or manually using SQL tools like SQL Server Management Studio (SSMS) for SQL Server or MySQL Workbench for MySQL. Check for Errors: If the migration fails, check the error messages for specific details. Look for issues such as: Missing columns or tables Foreign key constraints Compatibility issues between the database version and the schema Scripts that were not executed properly For most issues, detailed error messages will help guide you to the specific cause of the failure. Confirm Successful Migration: After the migration scripts are successfully executed, verify that the database schema matches the expected version. You may need to check specific tables or views to ensure that all changes were applied. Common Migration Issues and Solutions 1. Migration Fails Due to Missing or Incompatible Columns Symptom: The migration fails with an error message stating that certain columns or tables are missing. Solution: Verify that the migration script is correctly applied. Sometimes, manual changes to the database schema (e.g., column removals or modifications) can cause incompatibilities. Review the SQL script that was supposed to add the missing columns or tables and try to apply it manually. If a column or table was removed intentionally, ensure that your migration script accounts for these changes. 2. Error During Database Schema Comparison Symptom: There is a mismatch between the current database schema and the new version after running migration scripts. Solution: Check if the database schema was altered manually before applying migrations. If manual changes were made, you may need to reverse them to allow the migration script to apply properly. Compare the expected schema version with the current one and make necessary adjustments. Refer to the Database Schema Documentation for more details. 3. Migration Script Fails to Run on Production Database Symptom: Migration scripts run successfully in the development environment but fail in the production environment. Solution: Double-check that the correct database (development vs. production) is being used for the migration. Ensure that the production database has the necessary permissions for applying migrations. Review any environment-specific configurations that might be preventing the migration from executing properly on the production system. 4. Rollback Migration Script Symptom: The migration caused unintended changes to the database, and you need to revert to the previous version. Solution: If the migration supports rollback, use the rollback or revert command provided by Oqtane. If rollback is not supported, you will need to manually revert the database schema using backup files or reverse-engineer the changes made during the migration. Best Practices for Database Migrations Test in Development First: Always test the migration on a development or staging environment before applying it to production. This ensures that any issues with the migration scripts are caught early. Backup Your Database: Always take a full backup of the database before running any migrations. This protects your data in case something goes wrong. Review Release Notes: Check the release notes for the specific Oqtane version you're upgrading to. There may be migration-specific instructions or known issues that need to be addressed. Ensure Database Compatibility: Make sure the database server you're using is compatible with the version of Oqtane you're upgrading to. Database version upgrades may be required to fully support new schema changes. Conclusion Database migrations are an essential part of maintaining an up-to-date Oqtane application. While they help automate database updates, it is important to monitor the migration process closely for any errors and follow best practices to ensure a smooth transition. For additional information or troubleshooting, refer to the Migration Troubleshooting Guide or consult the Oqtane documentation for more details."
  },
  "guides/migrations/development-production-migration.html": {
    "href": "guides/migrations/development-production-migration.html",
    "title": "Migrating Oqtane Framework from Development to Production | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Migrating Oqtane Framework from Development to Production Overview This guide provides step-by-step instructions for migrating an Oqtane Framework instance from a development environment to a production environment. It covers preparation steps, configuration adjustments, and troubleshooting tips to ensure a smooth migration and deployment. Steps for Migrating Oqtane from Development to Production Follow the steps below to successfully migrate your Oqtane instance to a production environment: 1. Prepare the Development Environment for Migration Ensure All Features Are Tested: Before migrating, thoroughly test all modules, features, and configurations in your development environment to ensure everything works as expected. Backup Data and Configuration: Take a backup of your development database, configuration files, and any custom content or themes you‚Äôve created. Check Version Compatibility: Ensure that the Oqtane Framework version you're using in development is the same or compatible with the version you're installing in production. 2. Prepare the Production Environment Set Up the Production Server: Install and configure all necessary components (e.g., web server, database, application server) in your production environment. Set Appropriate File Permissions: Ensure that your production environment has the correct file permissions, especially for uploads, logs, and configuration files. Configure Security Settings: Set up SSL certificates, configure firewalls, and ensure that production security best practices are in place. Set Database Connection Strings: Adjust the connection strings in your production environment to point to your production database server. 3. Deploy the Oqtane Framework to Production Deploy Files: Copy all files from your development environment (including modules, themes, and content) to your production server. Update Database: If necessary, run any database migrations or schema updates required to bring the database in sync with the production environment. Update Configuration Settings: Modify any configuration settings (such as appsettings.json) to match the production environment, including things like logging levels, email settings, and application-specific parameters. 4. Testing in the Production Environment Verify the Application: Once the migration is complete, thoroughly test the application in the production environment to ensure all features and functionalities work correctly. Test Performance: Ensure that performance is optimal by testing load times, page responses, and checking for bottlenecks. Check Security Configurations: Verify that SSL is enabled, authentication methods are working, and access control is enforced. 5. Go Live DNS Configuration: Update your DNS settings to point to your production server. Monitor the Application: Use monitoring tools to track server performance, logs, and errors in the production environment. Troubleshooting Migration Issues If you encounter issues during the migration, here are some common troubleshooting steps: Configuration Mismatches: Ensure that all environment-specific settings (such as database connection strings, file paths, and email settings) are updated in the production environment. Missing Files: Check that all necessary files from development (such as themes, modules, and content) were copied to the production server. Permission Issues: Ensure that your production environment has the correct file permissions for writing logs, caching, and other necessary operations. Database Connectivity Issues: Ensure the production server can connect to the production database and that the schema is up to date. Broken Links or URLs: Double-check any hardcoded URLs or references in configuration files that might be pointing to the development environment. Best Practices for Production Environments Regular Backups: Set up regular backups for your production database and files. Logging and Monitoring: Implement comprehensive logging and monitoring solutions for error tracking and performance metrics. Scaling: Ensure your production server is capable of handling the anticipated traffic, with the option to scale resources as needed. This guide helps ensure that your Oqtane Framework instance is ready for production and that any migration issues can be efficiently resolved."
  },
  "guides/migrations/index.html": {
    "href": "guides/migrations/index.html",
    "title": "Migrations in Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Migrations in Oqtane Overview This section provides guidance on handling database migrations in Oqtane. Whether you're moving from development to production, performing standard migrations, or troubleshooting migration issues, this guide will help you through each step of the process. Migration Topics Below are the key migration guides that will help you with various migration tasks in Oqtane: Development to Production Migration This guide explains how to manage the migration of your Oqtane database and application from a development environment to a production environment. It covers the necessary steps, best practices, and potential pitfalls to avoid. Database Migration Learn how to perform and manage database migrations in Oqtane. This includes creating and applying migration scripts, handling database schema updates, and managing version control of database changes. Migration Troubleshooting If you're experiencing issues with database migrations, this guide provides common troubleshooting steps and solutions to resolve migration-related problems, ensuring your database migration process goes smoothly. For further details on specific migration scenarios, follow the guides above based on your needs. ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/migrations/troubleshooting.html": {
    "href": "guides/migrations/troubleshooting.html",
    "title": "Troubleshooting Migrations | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Migrations Overview This section provides resources and guidance for troubleshooting common issues encountered during the migration of Oqtane instances. Whether you're migrating from an older version or moving Oqtane to a new environment, these guides will help you resolve common migration challenges. Migration Troubleshooting Guides Below is a detailed guide for troubleshooting both migration and post-migration issues, tailored to the specific needs of users and administrators: Migration and Post-Migration Issues This guide covers troubleshooting tips and solutions for common issues encountered during the migration process of Oqtane, as well as problems that may arise after migration. Topics include: Migration failures Database migration problems Configuration errors File path and permission issues Missing data or modules Broken links or URLs Performance degradation User authentication problems This guide is designed to provide practical solutions and best practices to help you complete and troubleshoot your Oqtane migration successfully."
  },
  "guides/modules/adding-modules.html": {
    "href": "guides/modules/adding-modules.html",
    "title": "Adding Modules to a Page | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Adding Modules to a Page In order to add a module to a page, simply open the control panel with the gear icon in the top right of a page and in the control panel module management feature there is the ability to select a new module from the options of: Admin Module: These are only available to people within the administrator role and there are many more default modules available to put onto your webpages. Common Module: These are available both to administrators and to registered users to be able to use on pages that are specified as personalizable, meaning users can modify them as they see fit and they are unique and only viewable to registered users. Developer Module: This feature is for placing a module creator onto a page which will provide you with useful pre-built structure and methods for writing code for your own modules. There are also features after selecting the module that you would like which are the: Title: Which is what will be displayed directly above the module as its title, if nothing is selected then the module's name will be put as the title. Pane: Select which content pane you want the module to go inside of. Panes are made visible with the content editor. Container: Select if you would like to have a title displayed above the module or not have one. Adding One Module Across Multiple Pages As noted earlier, modules are reusable pieces of functionality, and as such a single module can be inserted across multiple pages in a site. Say, for example, you have an HTML module that holds a banner image and you want that banner image to also exist on five specific pages in your site. Instead of adding a new module to all five of those pages and then inserting the same image, you can simply go into the Control Panel and then click Add an Existing Module to the page. Adding already existing modules or sharing modules across multiple pages makes managing content that's repeated much more efficient. A content manager can then make edits in one module and instantly have those edits reflected across every page on which the module is shared. When a user hovers over the Modules menu item just below the Add New Module option is the Add Existing Module option. This is the option you select when you want to add a module that already exists in the site to a different page. When opting to use Add Existing Module, you must first select the page to copy a module from, which will populate the drop-down list of modules. You can then follow the same process of adding a module to the page."
  },
  "guides/modules/assets/placeholder.html": {
    "href": "guides/modules/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/modules/creating-a-module.html": {
    "href": "guides/modules/creating-a-module.html",
    "title": "Creating a Module | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Creating a Module Learn how to create custom modules for Oqtane to extend its functionality and add new features to your applications. Overview Creating a module in Oqtane involves several steps, including setting up the project, defining module components, implementing functionality, and testing the module in different environments. Getting Started To create a module for Oqtane, follow these steps: Use the Oqtane Administration Dashboard > Module Management Create Module button to scaffold a new module project. Navigate to the project which will be located in the root folder of the Oqtane.Framework folder. Open the solution file in another instance of Visual Studio and build the project. Restart your Oqtane.Server Visual Studio application used to create the module. Implement module components, including views, services, and controllers. Define module configuration settings and permissions. Test the module locally to ensure that it behaves as expected. Package the module for distribution and installation on other Oqtane sites. Development Process The module development process typically involves: Project setup and configuration Component implementation and integration Testing and debugging Documentation and packaging Best Practices Follow the Oqtane module development guidelines and coding standards. Use dependency injection for managing dependencies and promoting modularity. Utilize Oqtane services and APIs for interacting with the platform and accessing data. Test your module in different environments to ensure compatibility and stability."
  },
  "guides/modules/customizing-module-appearance.html": {
    "href": "guides/modules/customizing-module-appearance.html",
    "title": "Customizing Module Appearance | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Customizing Module Appearance Discover how to customize the appearance and styling of modules in Oqtane to match your site's design and branding. Overview Modules in Oqtane can be customized to align with your site's visual identity and user experience goals. By applying custom styles and design elements, you can enhance the look and feel of individual modules and create a cohesive user interface across your site. Styling Options To customize the appearance of modules in Oqtane, consider the following options: CSS stylesheets: Apply custom styles to module elements using CSS. Theme integration: Integrate modules with your site's theme to ensure consistency in design and branding. Bootstrap components: Utilize Bootstrap components and utilities for responsive and accessible design. Implementation To implement custom styling for modules in Oqtane, follow these steps: Identify the module components and elements you want to customize. Create CSS stylesheets or modify existing styles to achieve the desired appearance. Apply the styles to the module components using class names or CSS selectors. Test the custom styles across different devices and browsers to ensure compatibility and responsiveness. Best Practices Use modular CSS styles to facilitate maintenance and scalability. Leverage Oqtane's theming capabilities to ensure consistent design across modules and pages. Test custom styles in various scenarios to identify potential issues and ensure a seamless user experience."
  },
  "guides/modules/index.html": {
    "href": "guides/modules/index.html",
    "title": "Modules Overview | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Modules Overview Welcome to the Modules section of the Oqtane documentation. Here you'll find detailed guides on working with modules in your Oqtane-based applications. Whether you're adding new functionality, configuring existing modules, or troubleshooting issues, this section provides comprehensive resources to assist you. What is a Module? A module is a reusable, plug-and-play piece of functionality. It's a way to extend the functionality of the framework with whatever functionality you desire. Examples of modules could be photo galleries, blogs, rotators, forms, and so on. There can be multiple modules on a page and even multiple instances of the same module on a page. It's very common to see multiple HTML modules on a single page. When you install Oqtane, the platform ships with a base set of modules already installed in the system. There are too many that come with the solution out of the box to list here, but suffice it to say that all modules needed for basic functionality within a website come with the solution. More modules can also be downloaded for use or modules that you can created can be uploaded. Modules on Pages Modules are placed onto pages in locations called ‚Äúpanes‚Äù. These panes are defined by the theme's designer. These themes dictates the overall look and feel of your site and is usually created by a front-end designer. Panes can span the full width of the page or be positioned in a column fashion. It may be helpful to think of panes as windows in the design of the site where you can drop in modules. You can move modules around the panes by using the content editor. This is an example of a content pane. Topics Working With Modules Adding Modules: Learn how to add new modules to your Oqtane site to extend its functionality. Working With Modules: Explore various tasks and operations related to managing installed modules on your site. Installing Modules: Step-by-step instructions for installing modules on your Oqtane site. Configurating Modules: Customize and configure module settings to suit your specific requirements. Customizing Module Appearance: Customize a modules appearance. Troubleshooting Modules: Troubleshooting tips and solutions for common issues encountered working with modules. Developing Modules Creating Modules: Resources and guidelines for creating custom modules for Oqtane. Developing Modules: Resources and guidelines for developing custom modules for Oqtane. Module Deployment: Resources and guidelines for deploying custom modules for Oqtane. Troubleshooting Module Development: Troubleshooting tips and solutions for common issues encountered with developing modules. Feel free to explore each topic to find the information you need to effectively work with modules in your Oqtane applications. ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/modules/module-configuration.html": {
    "href": "guides/modules/module-configuration.html",
    "title": "Module Configuration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Configuration Explore the various configuration options available for modules in Oqtane and customize their settings to meet your specific requirements. Overview Modules in Oqtane offer a range of configuration options, allowing you to customize their behavior and appearance to suit your needs. Configuring Modules To configure a module in Oqtane, follow these steps: Navigate to the Module Management section in the Administration Dashboard. Locate the module you want to configure and click on its settings icon. Adjust the module settings as needed. Click \"Save\" to apply the changes. Configuration Options Depending on the module, configuration options may include: Settings for data sources Display options Permissions and access control Integration with other modules or services Best Practices Regularly review and update module configurations to ensure optimal performance and functionality. Test module configurations in a development environment before deploying them to production."
  },
  "guides/modules/module-deployment.html": {
    "href": "guides/modules/module-deployment.html",
    "title": "Module Deployment | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Deployment Once you've developed and tested your module, it's time to deploy it to your Oqtane site. Deployment involves installing the module on your site and configuring it to meet your specific requirements. Installing the Module To install a module on your Oqtane site, follow these steps: Access Module Management: Navigate to the Module Management section in the Administration Dashboard of your Oqtane site. Upload Module Package: Click on the \"Upload Module\" button and select the module package file (*.oqp) from your local machine. Install Module: Once the module package is uploaded, click on the \"Install\" button to initiate the installation process. Confirmation: After installation, you'll receive a confirmation message indicating that the module was installed successfully. Activating the Module Modules in Oqtane are typically activated automatically upon installation. However, if needed, you can adjust module permissions to control access to the module's features. Configuring the Module After installation, you may need to configure the module settings to suit your specific requirements. This can include setting up permissions, defining custom settings, or integrating the module with other components of your site. Best Practices Testing: Before deploying the module to a production environment, thoroughly test it in a development or staging environment to ensure that it functions as expected. Documentation: Provide clear and comprehensive documentation for your module to help users understand its features and how to use them effectively. Version Control: Use version control systems like Git to manage the development and deployment of your module, allowing for easy tracking of changes and collaboration with other developers. By following these best practices, you can effectively deploy modules to your Oqtane site and enhance its functionality with custom features and capabilities."
  },
  "guides/modules/module-development.html": {
    "href": "guides/modules/module-development.html",
    "title": "Module Development Basics | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Development Basics This manual provides an introduction to module development in Oqtane, covering fundamental concepts and best practices. Overview Module development in Oqtane involves creating custom components that extend the platform's functionality. Whether you're building a simple module to display content or a complex module with advanced features, understanding the basics of module development is essential. Getting Started To begin developing modules for Oqtane, you'll need: A working knowledge of ASP.NET Core Familiarity with client-side web development technologies (HTML, CSS, JavaScript) Visual Studio or a similar IDE for .NET development The Oqtane CLI for scaffolding new module projects Key Concepts Module architecture and structure Dependency injection Module lifecycle events Data access and storage User interface components and interactions Best Practices Follow the Oqtane module development guidelines and coding standards. Test your modules thoroughly in different environments to ensure compatibility and stability. Document your code and provide clear instructions for module installation and usage."
  },
  "guides/modules/module-installation.html": {
    "href": "guides/modules/module-installation.html",
    "title": "Installing Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installing Modules Learn how to install modules on your Oqtane site to extend its functionality and add new features. Overview To install modules on your Oqtane site, follow these steps: Navigate to the Module Management section in the Administration Dashboard. Click on the \"Install Module\" button. Select the module package file (.nupkg) from your local system. Click \"Upload\" to install the module. Installation Process Navigate to the Module Management section in the Administration Dashboard. Click on the \"Install Module\" button. Browse your local system and select the module package file (.nupkg). Click \"Upload\" to initiate the installation process. Once the module is successfully installed, you'll see it listed in the Module Management section."
  },
  "guides/modules/modules.html": {
    "href": "guides/modules/modules.html",
    "title": "Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Modules Welcome to the Modules section of the Oqtane documentation. Here you'll find detailed guides on working with modules in your Oqtane-based applications. Whether you're adding new functionality, configuring existing modules, or troubleshooting issues, this section provides comprehensive resources to assist you. What is a Module? A module is a reusable, plug-and-play piece of functionality. It's a way to extend the functionality of the framework with whatever functionality you desire. Examples of modules could be photo galleries, blogs, rotators, forms, and so on. There can be multiple modules on a page and even multiple instances of the same module on a page. It's very common to see multiple HTML modules on a single page. When you install Oqtane, the platform ships with a base set of modules already installed in the system. There are too many that come with the solution out of the box to list here, but suffice it to say that all modules needed for basic functionality within a website come with the solution. More modules can also be downloaded for use or modules that you can created can be uploaded. Modules on Pages Modules are placed onto pages in locations called ‚Äúpanes‚Äù. These panes are defined by the theme's designer. These themes dictates the overall look and feel of your site and is usually created by a front-end designer. Panes can span the full width of the page or be positioned in a column fashion. It may be helpful to think of panes as windows in the design of the site where you can drop in modules. You can move modules around the panes by using the content editor. This is an example of a content pane. Topics Adding Modules: Learn how to add new modules to your Oqtane site to extend its functionality. Working With Modules: Explore various tasks and operations related to managing installed modules on your site. Installing Modules: Step-by-step instructions for installing modules on your Oqtane site. Configurating Modules: Customize and configure module settings to suit your specific requirements. Troubleshooting Modules: Troubleshooting tips and solutions for common issues encountered with modules. Developing Modules: Resources and guidelines for developing custom modules for Oqtane. Feel free to explore each topic to find the information you need to effectively work with modules in your Oqtane applications."
  },
  "guides/modules/troubleshooting.html": {
    "href": "guides/modules/troubleshooting.html",
    "title": "Troubleshooting Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Modules Overview This section provides resources and guidance for troubleshooting various aspects of working with modules in Oqtane. Whether you‚Äôre using pre-built modules or developing custom ones, these guides will help you navigate common issues. Module Troubleshooting Guides Below are two detailed guides for troubleshooting modules, tailored to the specific needs of users and developers: Working with Modules This guide covers troubleshooting tips and solutions for common issues encountered while using and applying modules in Oqtane. It includes: Module Activation Issues: Steps to resolve issues when modules do not apply or activate as expected. Compatibility Checks: Tips for verifying module compatibility with your Oqtane version and other installed modules. UI and Functionality Errors: Solutions for fixing display or functionality inconsistencies within modules. Permission and Access Problems: Guidance on ensuring that modules are visible and accessible for all users. Developing Modules This guide provides troubleshooting steps specifically for developers building custom modules in Oqtane. It addresses: Module Structure and Layout Errors: Common issues with file structure or layout configuration in custom modules. CSS and Styling Debugging: Techniques for diagnosing and fixing styling issues within module CSS files. JavaScript Errors in Modules: Identifying and resolving JavaScript errors affecting module functionality. Localization and Language Support: Guidance on implementing and troubleshooting multi-language support within modules. Performance Optimization: Tips for improving module load times and responsiveness. These guides are designed to provide practical solutions and best practices, helping you create or apply modules that function smoothly and meet user needs."
  },
  "guides/modules/working-with-modules.html": {
    "href": "guides/modules/working-with-modules.html",
    "title": "Working With Modules Overview | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Working With Modules Overview In order to access a module's settings, you must be in the content editor. To get into the editor, simply click over the pencil icon top-right corner of the page. This puts you into the edit mode where you will see small white arrows in the top-right corner of every module on the page. These small arrows at the top left corners of each module allow you to move the module on the page, access the module's settings, edit the module, delete the module, and access any specific functionality related to the module. Once in Edit mode you will notice that Oqtane uses a very user-friendly and intuitive approach to managing content. Whenever you want to edit content in Oqtane, you go to the location where the content resides and edit it right there in place. Moving Modules Once a module is on the page, you can move its location again if needed. All that is needed is to enter the content editor by clicking on the pencil icon in the top right hand side with editing permission on a certain page. And then selecting the small downward pointing arrow in the top left of the module to do a variety of things to it, including: Move to Top: Moves the modules to the top of the page to be the first module displayed. Move Up: Moves the module up to be above the module above it. Move Down: Move the module down below the module beneath it. Move to Bottom: Moves the module to the bottom of the page, below all other modules. If the page has the layout for multiple panes, which will allows for three center rows and a top and bottom row that can have content inserted into them, then there will be additional options available which are: Move to Top Pane: Moves the module to the content pane at the top of the page. Move to Left Pane: Moves the module to the left-most column. Move to Right Pane: Moves the module to the right-most column. Move to Content Pane: Moves the module to the central column. Move to Bottom Pane: Moves the module to the pane at the bottom of the page."
  },
  "guides/render/index.html": {
    "href": "guides/render/index.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "An Example-Render This should explain a basic render process of one specific scenario, as a foundation for understanding the various scenarios explained later on. The scenario is a Interactive WASM Oqtane site without Prerendering. This means: The server is responsible for delivering data to the Web Assembly client. The Web Assembly client is responsible for generating the HTML Handing the HTML to the browser handling user interactions What will happen is this: The browser requests the page The server generates some minimal HTML containing a bit of JavaScript to load the WASM The browser loads the bootloader The bootloader requests all the WASM files containing Blazor themes, components, services and more The Server returns these WASM files, some were precompiled / optimized, others are .net assemblies converted on the fly. The bootloader hands over to the WASM to run the application The WASM requests the data from the server - especially the site structure and the current page structure The WASM runs the theme \"component\" to generate the HTML The theme uses the site structure, settings etc. to generate the menus (usually with other Blazor controls) The theme uses the page structure to generate the Panes and Modules inside the panes Each module first loads a Container which is another small wrapper Blazor component ...and inside that container the module is loaded The module requests the data it needs from the server The module generates the HTML Ways a Theme and Module can Render SSR - Initial Load - Easiest to understand SSR - Soft-Load - enhanced Navigation Prerender Interactive Server - Initial Load Interactive Server - Soft-Load Interactive Client WASM - Initial Load Interactive Client WASM - Soft-Load Your Theme or Control could be Static Output Interactive Output ...and it could be inside of a Module or a Theme which is Static Interactive ...and the site could be Static Interactive Automatic - starting as static and transferring to Interactive Flow of a Click - Event SSR: Click....tbd ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/roadmap/index.html": {
    "href": "guides/roadmap/index.html",
    "title": "Oqtane Roadmap and History | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Roadmap and History This page provides an overview of the Oqtane roadmap and history. It includes the current version, upcoming features, and the history of Oqtane. Roadmap This project is open source, and therefore is a work in progress... Backlog (TBD) üî≥ Azure Autoscale support (ie. web farm) üî≥ Folder Providers üî≥ Generative AI Integration Current Priorities üî≥ SSR Stabilization Release History Oqtane 5 (.net 8, SSR) Oqtane 5.1.1 (Apr 16, 2024) ‚úÖ Stabilization improvements Oqtane 5.1.0 (Mar 27, 2024) Release Announcement Oqtane 5.1 ‚úÖ Migration to the new unified Blazor approach in .NET 8 (ie. blazor.web.js) ‚úÖ Static Server Rendering (SSR) support Oqtane 5.0.2 (Jan 25, 2024) ‚úÖ Stabilization improvements Oqtane 5.0.1 (Dec 21, 2023) ‚úÖ Stabilization improvements Oqtane 5.0.0 (Nov 16, 2023) Release Announcement Oqtane 5.0 ‚úÖ Migration to .NET 8 Oqtane 4 (.net 7) Oqtane 4.0.6 (Oct 16, 2023) ‚úÖ Stabilization improvements Oqtane 4.0.5 (Sep 26, 2023) ‚úÖ Stabilization improvements Oqtane 4.0.4 (Sep 25, 2023) ‚úÖ Stabilization improvements ‚úÖ User Import Oqtane 4.0.3 (Aug 29, 2023) ‚úÖ Stabilization improvements Oqtane 4.0.2 (Aug 9, 2023) ‚úÖ Stabilization improvements Oqtane 4.0.1 (Jul 18, 2023) ‚úÖ Stabilization improvements Oqtane 4.0.0 (Jun 26, 2023) Release Announcement Oqtane 4.0 ‚úÖ Migration to .NET 7 ‚úÖ Improved JavaScript, CSS, and Meta support ‚úÖ Optimized Client Assembly Loading ‚úÖ Routable Modules (ie. declarative configuration) ‚úÖ Site Template improvements ‚úÖ IEventSubscriber interface Oqtane 3 (.net 6, MAUI) Oqtane 3.4.3 (May 3, 2023) ‚úÖ Stabilization improvements Oqtane 3.4.2 (Mar 29, 2023) ‚úÖ Stabilization improvements Oqtane 3.4.1 (Mar 13, 2023) ‚úÖ Stabilization improvements Oqtane 3.4.0 (Mar 12, 2023) Release Announcement Oqtane 3.4 ‚úÖ Permissions performance optimization ‚úÖ Connection string management improvements ‚úÖ XML site map generator ‚úÖ OIDC integration with User Profiles Oqtane 3.3.1 (Jan 14, 2023) ‚úÖ Stabilization improvements Oqtane 3.3.0 (Jan 12, 2023) Release Announcement Oqtane 3.3 ‚úÖ Dynamic Authorization Policies ‚úÖ Entity-Level Permissions ‚úÖ Extended Module Permissions Oqtane 3.2.1 (Oct 17, 2022) ‚úÖ Stabilization improvements ‚úÖ Server Event System Oqtane 3.2.0 (Sep 13, 2022) Release Announcement Oqtane 3.2 ‚úÖ .NET MAUI / Blazor Hybrid support ‚úÖ Upgrade to Bootstrap 5.2 Oqtane 3.1.3 (Jun 27, 2022) ‚úÖ Stabilization improvements Oqtane 3.1.2 (May 14, 2022) ‚úÖ Stabilization improvements Oqtane 3.1.1 (May 3, 2022) ‚úÖ Stabilization improvements Oqtane 3.1.0 (Apr 5, 2022) Release Announcement Oqtane 3.1 ‚úÖ User account lockout support ‚úÖ Two factor authentication support ‚úÖ Per-site configuration of password complexity, lockout criteria ‚úÖ External login support via OAuth2 / OpenID Connect ‚úÖ Support for Single Sign On (SSO) via OpenID Connect ‚úÖ External client support via Jwt tokens ‚úÖ Downstream API support via Jwt tokens ‚úÖ CSS resource hierarchy support ‚úÖ Site structure/content migration ‚úÖ Event log notifications ‚úÖ 404 page handling ‚úÖ Property change component notifications ‚úÖ Support for ES6 JavaScript modules Oqtane 3.0.3 ( Feb 15, 2022) ‚úÖ Url fragment and anchor navigation support ‚úÖ Meta tag support in page head ‚úÖ Html/Text content versioning support Oqtane 3.0.2 ( Jan 16, 2022) ‚úÖ Default alias specification, auto alias registration, redirect logic ‚úÖ Improvements to visitor tracking and url mapping ‚úÖ Scheduler enhancements for stop/start, weekly and one-time jobs ‚úÖ Purge job for daily housekeeping of event log and visitors ‚úÖ Granular security filtering for Settings Oqtane 3.0.1 ( Dec 12, 2021 ) ‚úÖ Url mapping for broken links, content migration ‚úÖ Visitor tracking for usage insights, personalization ‚úÖ User experience improvements in Page and Module management Oqtane 3.0.0 ( Nov 11, 2021 ) Release Announcement Oqtane 3.0 ‚úÖ Migration to .NET 6 ‚úÖ Blazor hosting model flexibility per site ‚úÖ Blazor WebAssembly prerendering support Oqtane 2 Oqtane 2.3.1 ( Sep 27, 2021 ) ‚úÖ Complete UI migration to Bootstrap 5 and HTML5 form validation ‚úÖ Improve module/theme installation and add support for commercial extensions ‚úÖ Replace System.Drawing with ImageSharp ‚úÖ Image resizing service Oqtane 2.2.0 ( Jul 6, 2021 ) Release Announcement Oqtane 2.2 ‚úÖ Bootstrap 5 Upgrade ‚úÖ Package Service integration ‚úÖ Default and Shared Resource File inclusion ‚úÖ Startup Error logging ‚úÖ API Controller Validation and Logging Oqtane 2.1.0 ( Jun 4, 2021 ) Release Announcement Oqtane 2.1 ‚úÖ Cross Platform Database Support ( ie. LocalDB, SQL Server, SQLite, MySQL, PostgreSQL ) - see #964 ‚úÖ Utilize EF Core Migrations - see #964 ‚úÖ Public Content Folder support ‚úÖ Multi-tenant Infrastructure improvements ‚úÖ User Authorization optimization ‚úÖ Consolidation of Package Management ‚úÖ Blazor Server Pre-rendering ‚úÖ Translation Package installation support Oqtane 2.0.2 ( Apr 19, 2021 ) ‚úÖ Assorted fixes and user experience improvements Oqtane 2.0.1 ( Feb 27, 2021 ) ‚úÖ Complete Static Localization of Admin UI Oqtane 2.0.0 ( Nov 11, 2020 ) Release Announcement Oqtane 2.0 ‚úÖ Migration to .NET 5 ‚úÖ Static Localization ( ie. labels, help text, etc.. ) ‚úÖ Improved JavaScript Reference Support ‚úÖ Performance Optimizations ‚úÖ Developer Productivity Enhancements Oqtane 1 Oqtane 1.0.0 ( May 19, 2020 ) Release Announcement Oqtane 1.0 ‚úÖ Migration to .NET Core 3.2 ‚úÖ Multi-Tenant ( Shared Database & Isolated Database ) ‚úÖ Modular Architecture ‚úÖ Headless API with Swagger Support ‚úÖ Dynamic Page Compositing Model / Site & Page Management ‚úÖ Authentication / User Management / Profile Management ‚úÖ Authorization / Roles Management / Granular Permissions ‚úÖ Dynamic Routing ‚úÖ Extensibility via Custom Modules ‚úÖ Extensibility via Custom Themes ‚úÖ Event Logging / Audit Trail ‚úÖ Folder / File Management ‚úÖ Recycle Bin ‚úÖ Scheduled Jobs ( Background Processing ) ‚úÖ Notifications / Email Delivery ‚úÖ Seamless Upgrade Experience ‚úÖ Progressive Web Application Support ‚úÖ JavaScript Lazy Loading ‚úÖ Dynamic CSS/Lazy Loading Proof of Concept Oqtane POC ( May 9, 2019 ) Release Announcement Oqtane POC ‚úÖ Initial public release on GitHub ‚úÖ .NET Core 3.0 ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/themes/assets/placeholder.html": {
    "href": "guides/themes/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/themes/generator/index.html": {
    "href": "guides/themes/generator/index.html",
    "title": "Oqtane Themes Generator | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Themes Generator Brief tutorial how to use the built-in Themes Generator. Oqtane helps you get started with themes by providing a built-in Themes generator. It will create a Visual Studio solution for you, containing all the necessary parts to start customizing your own theme. Start the Generator In your Oqtane site, go to /admin/themes to see the Themes management: Click on \"Create Theme\" and fill in the wizard as follows: Owner Name should be your company name or similar. It will be used in the Namespace of the generated code. Theme Name will be the technical name of the theme. It too will be used in the Namespace of your generated code. Template is meant to select from various templates, but as of now there is only one. Framework Reference is to decide what Oqtane (not .net Framework) your Theme will target, but as of now you can always only select the current framework running on your Oqtane. Location is where the generated code will be placed. It is best practice to put this side-by side to your Oqtane solution. Once you click on Create Theme you will see: Continue in Visual Studio The generator created this folder with a visual studio solution beside your Oqtane Framework folder: Next, open the solution file in that folder: You will now see 3 solutions according to best-practices: Build/Rebuild the Package Solution Build the Package solution to compile and copy the files to the Oqtane installation. Then start/restart Oqtane - see how to restart Oqtane. You should now see your new theme in the /system/themes section: You're all set That's it - you can start building / customizing your own theme now. Remember to read more about: Oqtane Extensions Building Extensions"
  },
  "guides/themes/index.html": {
    "href": "guides/themes/index.html",
    "title": "Oqtane Themes Guide | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Themes Guide Oqtane Themes are extensions to customize the look and feel of your Oqtane website. This guide will help you get started with creating and using themes in Oqtane. What is a Theme? A theme is a collection of files that define the look and feel of your website. Themes can include CSS, JavaScript, images, and other assets that are used to style your website. Since Oqtane is based on .net and Blazor, themes are built using Blazor components and these are compiled into a DLL that is loaded by the Oqtane framework. Here's an example: In this example, the theme controls: Placement, size and styling of the logo - as well as how it changes in responsive scenarios. The layout of the main menu, including the dropdowns. The layout of the footer, including the social media links. Font sizes and colors for various headings and normal text. Next Steps Tip Before diving too deep into themes, make sure you understand the basics of Extensions. Read about: Learn to generate a new theme Parts of an Oqtane Theme Theme Build, Distribute and Install Theme Code Explained Theme Solution Explained Tasks to complete these guides The following topics should be covered as soon as possible (help wanted!) How to customize an existing theme How to uninstall a theme How to update a theme How to create a theme from scratch How to publish a theme in the Marketplace Guidance for assets / resources Guidance for render modes and edge cases / SSR .net 8.0 Guidance for responsive design Guidance for accessibility Guidance for performance & SEO Best Practices for assets - especially JS/CSS Some guidance on CSS variables / Bootstrap 5.3 conventions ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/themes/oqtane-theme-code-explained.html": {
    "href": "guides/themes/oqtane-theme-code-explained.html",
    "title": "Themes - Code Structure of a Theme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes - Code Structure of a Theme Internally a theme only needs the following 4 things: An own namespace such as YourCompany.Themes.YourTheme. A ThemeInfo.cs file in that namespace which implements Oqtane.Themes.ITheme. This file contains information about the theme like name, author, version, etc. A theme file like MyTheme.razor which is the main thing shown to the user. A container file like Container.razor which is the main wrapper around a module. Warning It is crucial that the namespace of the theme is unique, and that all these core elements (ThemeInfo, Theme, Container) are in exactly this namespace. Example from the Oqtane Arsha Arsha is a sample theme that comes with Oqtane. You can find the git repo here. ThemeInfo.cs The ThemeInfo.cs file is necessary to provide information about the theme. In the code you can see it contains The namespace of the theme - must be unique, and must match the theme/container namespace the Name of the theme - displayed to the user the Version of the theme the PackageName - used for installation / differentiation the optional ThemeSettingsType (class name) of the theme settings the optional ContainerSettingsType (class name) of the container settings a list of Resources - CSS and JS files that are loaded when the theme is used note: the Resources can also be specified in each Theme.razor file using System.Collections.Generic; using Oqtane.Models; using Oqtane.Themes; using Oqtane.Shared; namespace Oqtane.Theme.Arsha { public class ThemeInfo : ITheme { public Models.Theme Theme => new Models.Theme { Name = \"Arsha\", Version = \"1.0.0\", PackageName = \"Oqtane.Theme.Arsha\", ThemeSettingsType = \"Oqtane.Theme.Arsha.ThemeSettings, Oqtane.Theme.Arsha.Client.Oqtane\", ContainerSettingsType = \"Oqtane.Theme.Arsha.ContainerSettings, Oqtane.Theme.Arsha.Client.Oqtane\", Resources = new List<Resource>() { // Google Fonts new Resource { ResourceType = ResourceType.Stylesheet, Url = \"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i%7CRaleway:300,300i,400,400i,500,500i,600,600i,700,700i%7CPoppins:300,300i,400,400i,500,500i,600,600i,700,700i\" }, // Vendor CSS Files new Resource { ResourceType = ResourceType.Stylesheet, Url = \"~/assets/vendor/aos/aos.css\" }, // ...rest of files omitted for brevity // Template Main CSS File new Resource { ResourceType = ResourceType.Stylesheet, Url = \"~/assets/css/style.css\" }, // Vendor JS Files new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/vendor/aos/aos.js\", Location = ResourceLocation.Body }, // ...rest of files omitted for brevity // Template Main JS File new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/js/main.js\", Location = ResourceLocation.Body, Reload = true, RenderMode = RenderModes.Static }, new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/js/interop.js\", Location = ResourceLocation.Body, RenderMode = RenderModes.Interactive } } }; } } The Theme File The Theme.razor file is the main file that is shown to the user. It contains the HTML structure of the theme and can include other Blazor components. Important things to know: The @namespace directive must match the namespace of the theme The @inherits directive must inherit from ThemeBase or a class that inherits from ThemeBase The @inject directive can be used to inject services like NavigationManager or ISettingService The @code block can contain C# code that is executed when the component is rendered The HTML part - which is the HTML inside the <body> tag (without <head> etc.). This \"html\" can be normal HTML such as div, section, h1, p, img etc. Razor variables such as @PageState.Page.Name Razor data from functions such as @NavigateUrl() Razor statements such as @if or @foreach Blazor components such as <NavMenu /> or <Login /> @namespace Oqtane.Theme.Arsha @inherits ThemeBase @inject NavigationManager NavigationManager @inject ISettingService SettingService <!-- ======= Header ======= --> <header id=\"header\" class=\"@_headerclass\"> <div class=\"container d-flex align-items-center\"> <!-- omited for brevity --> <nav id=\"navbar\" class=\"navbar\"> <NavMenu /> </nav> <div class=\"mx-3 controls-group\"><UserProfile /> <Login /> <ControlPanel /></div> </div> </header> <!-- End Header --> @if (!string.IsNullOrEmpty(_hero)) { <!-- ======= Hero Section ======= --> @((MarkupString)_hero) <!-- End Hero --> <!-- ======= Main ======= --> <main id=\"main\"> <Pane Name=\"@PaneNames.Default\" /> </main> <!-- End #main --> } else { <!-- ======= Main ======= --> <main id=\"main\"> <!-- ======= Breadcrumbs ======= --> <section class=\"breadcrumbs\"> <div class=\"container\"> <h2 class=\"mt-2\">@PageState.Page.Name</h2> </div> </section><!-- End Breadcrumbs --> <section class=\"inner-page\"> <div class=\"container\"> <Pane Name=\"@PaneNames.Default\" /> </div> </section> </main> <!-- End Main --> } <!-- ======= Footer ======= --> @((MarkupString)_footer) <!-- End Footer --> <a href=\"@NavigateUrl()\" class=\"back-to-top d-flex align-items-center justify-content-center\" data-enhance-nav=\"false\"><i class=\"bi bi-arrow-up-short\"></i></a> @code { public override string Name => \"Default\"; public override string Panes => PaneNames.Default; private string _hero = \"\"; private string _headerclass = \"\"; private string _footer = \"\"; protected override async Task OnParametersSetAsync() { // omitted for brevity } protected override async Task OnAfterRenderAsync(bool firstRender) { // omitted for brevity } private string DefaultFooter { get { return \"<footer id=\\\"footer\\\">\\n\" + \" <div class=\\\"footer-newsletter\\\">\\n\" + <!-- omitted for brevity --> \" </div>\\n\" + \"</footer>\\n\"; } } } The Container File The Container.razor file is the main wrapper around a module. Here's what you should know: The @namespace directive must match the namespace of the theme The @inherits directive must inherit from ContainerBase or a class that inherits from ContainerBase The @inject directive can be used to inject services like ISettingService The @code block can contain C# code that is executed when the component is rendered The HTML parts with the same possibilities as the theme above. @namespace Oqtane.Theme.Arsha @inherits ContainerBase @inject ISettingService SettingService @if (_title) { @if (_animate) { <section> <div class=\"container\" data-aos=\"fade-up\"> <ModuleActions /> @if (ModuleState.Title != \"-\") { <div class=\"section-title\"> <h2>@ModuleState.Title</h2> </div> } <div class=\"row\"> <ModuleInstance /> </div> </div> </section> } else { <!-- omitted for brevity --> } } else { <!-- omitted for brevity --> } @code { private bool _title = true; private bool _animate = false; protected override void OnParametersSet() { // omitted for brevity } } Blazor Components In addition to the required minimum files, you can also include other Blazor components. Here's an example of the NavMenu.razor. It doesn't do much, but check if the menu should show, and then calls the NavMenuItems component. @namespace Oqtane.Theme.Arsha @inherits MenuBase @if (MenuPages.Any()) { <NavMenuItems ParentPage=\"null\" Pages=\"MenuPages\" /> <i class=\"bi bi-list mobile-nav-toggle\"></i> } The NavMenuItems.razor is way more complex, as it recursively calls itself to render the menu items. @namespace Oqtane.Theme.Arsha @inherits MenuItemsBase <ul> @foreach (var childPage in GetChildPages()) { var _attributes = new Dictionary<string, object>(); _attributes.Add(\"href\", GetUrl(childPage)); var _target = GetTarget(childPage); if (!string.IsNullOrEmpty(_target)) _attributes.Add(\"target\", _target); if (!childPage.HasChildren) { <!-- omitted for brevity --> } else { <li class=\"dropdown\"> <a @attributes=\"_attributes\"><span>@childPage.Name</span> @if (childPage.Level == 0) <i class=\"bi bi-chevron-down\"></i> else <i class=\"bi bi-chevron-right\"></i> </a> <NavMenuItems ParentPage=\"childPage\" Pages=\"Pages\" /> </li> } } </ul>"
  },
  "guides/themes/oqtane-theme-distribution.html": {
    "href": "guides/themes/oqtane-theme-distribution.html",
    "title": "Oqtane Theme - Distribution and Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Theme - Distribution and Installation ‚û°Ô∏è see Oqtane Extension - Installation"
  },
  "guides/themes/oqtane-theme-solution-explained.html": {
    "href": "guides/themes/oqtane-theme-solution-explained.html",
    "title": "Themes - Theme Solution Explained | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes - Theme Solution Explained A Oqtane Theme Solution is a Visual Studio project which is the basis for building a theme. It will typically contain the following in one or more projects: The basics such as the ThemeInfo.cs, the theme files and the container files. A wwwroot folder with the CSS and JS files. A .nuspec file to package the theme into a nuget package. Code and specs to build / compile the result - such as package.json and webpack.config.json. Code and specs to deploy the result - such as a .nuspec file. An icon file, copyright information and more. In the example of the Arsha theme you can see that the theme solution contains two projects: The first one is the theme and everything it consists of The second one is the packaging project which separates nuget-creation into a separate project. Tip This separation of projects makes work easier, so we recommend you do the same. See also Oqtane Dev Best Practices: Separate Solutions for Each Extension."
  },
  "guides/themes/parts-of-an-oqtane-theme.html": {
    "href": "guides/themes/parts-of-an-oqtane-theme.html",
    "title": "Themes Guide - Parts of a Theme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes Guide - Parts of a Theme Oqtane themes - when installed - consist of the following core parts: A DLL file that contains the compiled Blazor components. JS and CSS files in wwwroot/Themes/[your-theme-name]."
  },
  "guides/themes/theme-configuration.html": {
    "href": "guides/themes/theme-configuration.html",
    "title": "Theme Configuration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Configuration Overview This manual provides guidance on configuring themes in Oqtane to customize their appearance and behavior according to your preferences. To access theme configuration settings, navigate to the Theme Management section in the Administration Dashboard of your Oqtane site. You can find this section by following these steps: Go to the Control Panel in the Administration Dashboard. Select \"Theme Management\" from the menu to access the theme configuration page. From there, you can adjust various options and settings to tailor the theme to your needs. Customization Options Themes in Oqtane offer a range of customization options, including: Color schemes Fonts and typography Layout and design elements Navigation menus Widget placement and configuration Step-by-Step Guide Navigate to the Administration Dashboard of your Oqtane site. Click on \"Theme Management\" to access the theme configuration page. Select the theme you want to configure from the list of installed themes. Explore the available customization options and settings. Make adjustments as desired to customize the theme to your liking. Save your changes to apply the configuration settings to the selected theme. Best Practices Experiment with different configuration options to find the look and feel that best suits your site. Regularly review and update theme configuration settings to keep your site's design fresh and relevant. Test the theme after making configuration changes to ensure that everything displays correctly and functions as expected. By following these guidelines, you can effectively configure themes in Oqtane to create visually appealing and user-friendly websites. Site Settings To configure themes at the site level, navigate to the \"Site Settings\" section in the Control Panel's Administration Dashboard. Here, you can access theme configuration settings and customize the appearance of your entire site. Page Management To configure themes at the page level, access the \"Page Management\" section in the Control Panel. Click the \"Edit\" button next to the page you want to configure, and then navigate to the Appearance Configuration section. Here, you can customize the appearance of individual pages using theme-specific settings."
  },
  "guides/themes/theme-development.html": {
    "href": "guides/themes/theme-development.html",
    "title": "Developing Themes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Developing Themes Overview This manual serves as a guide for developers who want to create custom themes for the Oqtane framework. Whether you're looking to customize the appearance of your own site or contribute themes to the Oqtane Marketplace, this guide will help you get started with theme development. Getting Started To begin developing themes for Oqtane, you'll need a basic understanding of HTML, CSS, and JavaScript. Familiarity with Razor syntax and Blazor components is also beneficial, as Oqtane themes are built using these technologies. Theme Structure Oqtane themes follow a modular structure and consist of various components, including: Layouts: Define the overall structure and design of the theme. Views: Render content and components within the theme layout. Stylesheets: Define the visual appearance and styling of theme elements. JavaScript: Add interactivity and dynamic behavior to the theme. Theme Development Tools Several tools and resources are available to aid in theme development for Oqtane, including: Visual Studio: A lightweight and versatile code editor with support for HTML, CSS, and JavaScript. Visit Visual Studio for more information. Visual Studio Code: A lightweight and versatile code editor with support for HTML, CSS, and JavaScript. Visit Visual Studio Code for more information. Browser Developer Tools: Built-in tools for debugging and inspecting elements in web browsers (F12). Best Practices When developing themes for Oqtane, consider the following best practices: Keep your theme code modular, organized, and well-documented. Optimize your theme assets (HTML, CSS, JavaScript) for performance and accessibility. Test your theme across different browsers and devices to ensure compatibility and responsiveness. Stay up to date with Oqtane updates and conventions to leverage the latest features and improvements. By following these guidelines and best practices, you can create high-quality themes for Oqtane that enhance the visual appeal and usability of your applications."
  },
  "guides/themes/theme-installation.html": {
    "href": "guides/themes/theme-installation.html",
    "title": "Theme Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Installation Overview This manual will guide you through the process of installing themes on your Oqtane site to customize its appearance and enhance user experience. To get started, navigate to the Theme Management section in the Administration Dashboard of your Oqtane site. From there, you can browse and install themes from the available options. Step-by-Step Guide Navigate to the Administration Dashboard of your Oqtane site. Click on \"Theme Management\" to access the theme installation page. Browse the available themes and select the one you want to install. Click on the \"Install\" button next to the chosen theme. Follow any prompts or instructions provided to complete the installation process. Once the installation is complete, the theme will be available for use on your Oqtane site. Additional Considerations Ensure that the theme you choose is compatible with your Oqtane site version. Check for any dependencies or additional requirements specified by the theme developer. Test the theme after installation to ensure that it displays correctly and functions as expected. By following these steps, you can easily install themes on your Oqtane site and customize its appearance to suit your needs."
  },
  "guides/themes/troubleshooting.html": {
    "href": "guides/themes/troubleshooting.html",
    "title": "Troubleshooting Themes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Themes Overview This section provides resources and guidance for troubleshooting various aspects of working with themes in Oqtane. Whether you‚Äôre applying pre-built themes or developing custom ones, these guides will help you navigate common issues. Theme Troubleshooting Guides Below are two detailed guides for troubleshooting themes, tailored to the specific needs of users and developers: Working with Themes This guide covers troubleshooting tips and solutions for common issues encountered while using and applying themes in Oqtane. It includes: Theme Activation Issues: Steps to resolve issues when themes do not apply as expected. Compatibility Checks: Tips for verifying theme compatibility with your Oqtane version and modules. UI and Styling Errors: Solutions for fixing display or styling inconsistencies. Permission and Access Problems: Guidance on ensuring that themes are visible and accessible for all users. Developing Themes This guide provides troubleshooting steps specifically for developers building custom themes in Oqtane. It addresses: Theme Structure and Layout Errors: Common issues with file structure or layout configuration. CSS and Styling Debugging: Techniques for diagnosing and fixing styling issues within theme CSS files. JavaScript Errors in Themes: Identifying and resolving JavaScript errors affecting theme functionality. Localization and Language Support: Guidance on implementing and troubleshooting multi-language support within themes. Performance Optimization: Tips for improving theme load times and responsiveness. These guides are designed to provide practical solutions and best practices, helping you create or apply themes that function smoothly and look great."
  },
  "guides/troubleshooting/assets/placeholder.html": {
    "href": "guides/troubleshooting/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "guides/troubleshooting/index.html": {
    "href": "guides/troubleshooting/index.html",
    "title": "Troubleshooting Guide | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Guide Introduction This document provides troubleshooting tips for common issues encountered in the Oqtane Framework. What is the Oqtane Troubleshooting Guide? The Oqtane Troubleshooting Guide aims to assist users in resolving common problems related to login issues, user registration, system upgrades, and more. It serves as a comprehensive resource for both administrators and users facing challenges within the Oqtane Framework. Next Steps Read about the following troubleshooting sections to resolve specific issues: System Management Troubleshooting Troubleshooting File Manager Solutions for addressing issues with uploading, file access, and permissions in the File Manager. Troubleshooting Login Issues Find solutions for common login problems, including expired certificates and session management. Troubleshooting User Registration Email Verification Guidance on resolving issues with user registration, email verification, and account activation. Installation, Upgrades, and Migration Troubleshooting Installation Troubleshooting Instructions for resolving installation problems and verifying system requirements. Migration Troubleshooting Steps for troubleshooting environment migrations, such as moving from development to production or server-to-server. Module Troubleshooting Modules Troubleshooting Help for resolving issues with module installation, compatibility, and functionality. Troubleshooting Developing Modules Guidance for developers working with modules, addressing common issues during the development process such as dependencies, installation, and functionality problems. Themes Troubleshooting Themes Troubleshooting Tips for addressing layout, styling, and rendering issues in Oqtane themes. Troubleshooting Developing Themes Solutions for developers facing layout, styling, or rendering issues while working with Oqtane themes, including common CSS and JavaScript problems. Marketplace Troubleshooting Marketplace Troubleshooting Solutions for challenges faced within the Oqtane Marketplace, such as module installation and compatibility. Tasks to Complete The following topics should be covered to enhance the troubleshooting guide: Common login issues and their resolutions. Registration verification steps and user management. Best practices for maintaining SSL certificates. Guidance on handling SMTP issues. Common problems during upgrades and their resolutions. Migration Troubleshooting: Steps for migrating environments, such as from development to production or server-to-server. Data loss or corruption issues during migrations. Troubleshooting installation failures and checking system requirements. Resolving configuration issues post-installation. Identifying and addressing performance bottlenecks. Managing dependencies and troubleshooting related issues. Troubleshooting user permissions and role management. Common database-related problems and recovery steps. Enabling and configuring logging for troubleshooting. ‚Üê Back to Documentation Guides Home Page"
  },
  "guides/troubleshooting/troubleshooting-database.html": {
    "href": "guides/troubleshooting/troubleshooting-database.html",
    "title": "Troubleshooting Database Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Database Management Overview This guide provides comprehensive troubleshooting information for addressing common issues with the database in Oqtane. Whether you're dealing with setup problems, migration issues, performance concerns, or security challenges, this document will guide you through diagnosing and resolving issues. Table of Contents Database Setup Issues Database Migrations Performance Problems Database Integrity and Security General Tips Database Setup Issues If you're having trouble setting up your database or connecting it to Oqtane, check the following: 1.1. Database Connection Problems Check Connection Strings: Verify the connection strings in your configuration files are correct and point to the right database server. Firewall Settings: Ensure the database port is open and accessible from your Oqtane server. Database Server Availability: Ensure the database server is running and accessible. If using a remote database, check network connectivity. 1.2. Missing or Incorrect Database Schema Schema Migration: Ensure that your database schema is up-to-date by running the necessary migrations (check the Migrations Guide). Database Permissions: Ensure the database user has sufficient permissions to create tables, views, and procedures. Database Migrations Database migrations are a critical part of setting up and maintaining Oqtane's database. Here‚Äôs how to troubleshoot migration issues: 2.1. Failed Migrations Check Logs: Look for any error messages in your Oqtane logs related to database migrations. Verify Migration Version: Ensure the database schema version matches the version specified in your Oqtane installation. Re-run Migrations: If a migration fails, try rerunning it manually or resetting the migration state. 2.2. Version Conflicts Database Compatibility: Ensure the Oqtane version you're using is compatible with your database schema version. Upgrading Oqtane may require additional migration steps. Revert to Backup: If a migration causes severe issues, consider restoring from a database backup and reapplying migrations step by step. For more details on performing migrations, check the Database Migration Guide. Performance Problems Performance issues can often be traced back to database queries or configuration settings. Here‚Äôs how to troubleshoot them: 3.1. Slow Queries Enable Query Logging: Enable query logging in your database to identify slow or resource-intensive queries. Optimize Queries: Review the slow queries and optimize them using indexing or refactoring. Database Caching: Implement caching strategies to reduce load on the database, particularly for frequently accessed data. 3.2. Database Load Database Scaling: Consider scaling your database horizontally (replication) or vertically (increasing resources). Connection Pooling: Implement connection pooling to manage multiple database connections efficiently. Database Integrity and Security Ensuring the integrity and security of your database is crucial. Here‚Äôs how to address common database issues: 4.1. Data Corruption Check Logs for Corruption: Look for errors indicating data corruption in the database logs. Restore from Backup: If data corruption occurs, restore the affected tables or the entire database from a backup. Integrity Checks: Use your database's built-in integrity checking tools (e.g., DBCC CHECKDB for SQL Server) to identify corruption. 4.2. Database Security Database Access Control: Ensure only authorized users can access the database. Review and tighten user permissions. Encrypt Data: Implement encryption for sensitive data at rest and in transit. Regular Backups: Schedule regular backups and store them in a secure location. General Tips Here are a few general tips for maintaining and troubleshooting your database: Backup Regularly: Always keep backups of your database. Schedule daily backups for production environments. Monitor Performance: Use database monitoring tools to keep an eye on performance metrics like query time, CPU load, and memory usage. Keep Software Updated: Ensure both your database and Oqtane are kept up-to-date to avoid compatibility issues and benefit from security patches. Additional Resources Oqtane Migrations Guide For in-depth instructions on running and troubleshooting database migrations. Oqtane Database Schema Documentation Detailed reference for understanding the Oqtane database schema structure. Oqtane Installation Guide For troubleshooting database setup during Oqtane installation. By following the steps and tips provided in this document, you should be able to diagnose and resolve most database-related issues in Oqtane. If you continue to encounter problems, consider reaching out to the Oqtane community or reviewing the related guides for more advanced troubleshooting."
  },
  "guides/troubleshooting/troubleshooting-developing-modules.html": {
    "href": "guides/troubleshooting/troubleshooting-developing-modules.html",
    "title": "Troubleshooting Developing Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Developing Modules Overview This guide offers troubleshooting steps for common issues encountered when developing, modifying, or debugging modules in the Oqtane Framework. Modules are key components that enable the functionality of your site, and problems with modules can impact the user experience and site performance. The troubleshooting steps outlined below address the most common challenges faced by module developers. 1. Module Not Loading Symptoms: The module does not appear on the page, or it loads as a blank space. Solution: Check Module Registration: Ensure that your module is correctly registered in the Oqtane system. Verify that the module is listed in the admin dashboard under the module management section. Inspect Controller: If your module has a controller, ensure it is correctly implemented and the routes are set up properly. Missing or incorrect routes can prevent the module from loading. Review Logs: Check the application logs for errors related to module loading or initialization. Look for errors in the Oqtane logs that might provide hints about why the module isn't loading. Module Permissions: Make sure the user has the necessary permissions to view the module. Modules may be hidden if the current user role lacks the required permissions. 2. Module Layout Not Displaying Correctly Symptoms: The module displays but its layout is incorrect, or it appears with broken elements. Solution: Check Layout Files: Review the .cshtml or .razor layout files for the module. Ensure they are correctly structured, with proper references to CSS, JavaScript, and component elements. Check Styles and Scripts: Verify that the module‚Äôs required stylesheets and scripts are included and properly referenced. Missing or incorrect references may result in layout issues. Responsive Design: Ensure that the module is responsive, especially if it uses a grid layout. Verify that CSS media queries are in place to adapt the module's layout for different screen sizes. 3. JavaScript Not Working in the Module Symptoms: JavaScript functionality (such as interactivity) doesn't work or fails to trigger in the module. Solution: Inspect Browser Console: Open the browser‚Äôs developer console and check for JavaScript errors. Missing files, syntax errors, or issues with dependencies could prevent the script from running. Check Script References: Make sure JavaScript files are correctly linked in the module‚Äôs layout file. Verify that the JavaScript files are loaded in the right order, as some modules may require specific libraries (e.g., jQuery or Bootstrap). Check for jQuery Conflicts: If using jQuery, ensure no conflicts with other JavaScript libraries. For instance, ensure jQuery is loaded before any jQuery-dependent scripts. Debug JavaScript Code: Use debugging tools to step through the JavaScript code and confirm if all functions are being executed as expected. 4. Module Not Updating Changes Symptoms: Changes made to the module's source code are not reflected when the page is refreshed. Solution: Clear Browser Cache: Sometimes, changes may not appear due to cached files. Clear the browser cache and refresh the page. Clear Oqtane Cache: In Oqtane, cached components and modules might delay updates. Clear Oqtane's internal cache from the control panel to ensure the latest changes are applied. Rebuild the Module: If the module is being built from source, ensure that the build process has completed successfully. Rebuild the module to confirm that the compiled version is up to date. 5. Module Throws Errors or Exceptions Symptoms: The module fails to load, and exceptions or errors are thrown during its operation. Solution: Check Logs for Exceptions: Review the server logs for exceptions that are being thrown. The logs can provide detailed information about the specific error and the module‚Äôs behavior at runtime. Verify Database Connections: If your module interacts with a database, ensure that database connections are correctly configured. Incorrect connection strings or missing database tables can cause runtime errors. Check for Missing Dependencies: Ensure all dependencies required by the module are properly included. Missing DLLs or dependencies can cause the module to fail. Debug in Development Mode: Enable detailed error messages in the development environment to get a more granular view of the issues and track down the root cause. 6. Module Not Performing as Expected Symptoms: The module functions incorrectly, or some features do not work as intended. Solution: Check Business Logic: Review the module‚Äôs business logic to ensure it performs the intended actions. Validate that all the necessary conditions are being met within the code. Test Module Inputs: Verify that the inputs (e.g., user input or data from the database) are being processed correctly by the module. Check Configuration Settings: Ensure the module‚Äôs settings and configuration are correct. Misconfigured settings can lead to unexpected behavior. Use Debugging: If needed, debug the module step-by-step to observe the internal state and pinpoint where the behavior diverges from expectations. 7. Module Permissions Not Working Symptoms: The module is not visible or accessible based on the user‚Äôs permissions. Solution: Verify Permission Settings: Check the permissions set for the module in the Oqtane control panel. Ensure that the user role has the correct permissions for viewing or interacting with the module. Check Role Assignment: Make sure the user‚Äôs role is properly assigned and that the permissions for the module are aligned with the role‚Äôs capabilities. Review Module Visibility Logic: Some modules may have additional logic in place that controls visibility based on user roles. Verify that the logic is functioning as intended. 8. Module Dependencies Not Working Symptoms: The module relies on other modules, but the dependent modules are not functioning correctly, leading to errors or missing features. Solution: Check Module Dependencies: Verify that all the required dependencies for the module are correctly installed and activated. Some modules may rely on other modules or services, and those dependencies need to be configured correctly. Review Documentation: Review the documentation of the dependent modules to ensure compatibility. Sometimes, module dependencies may require specific versions or configurations. Ensure Dependency Registration: Ensure that any required modules are registered in the Oqtane system and correctly linked to your module. 9. Module Compatibility with Oqtane Updates Symptoms: After updating Oqtane, the module behaves incorrectly or fails to load. Solution: Review Release Notes: Check the Oqtane release notes for any breaking changes or updates to the module system that may affect your module. Pay attention to any updates in the API or core framework that may impact your module‚Äôs functionality. Update Module Code: If necessary, modify your module to ensure compatibility with the latest version of Oqtane. This could involve changing APIs, adjusting for new features, or removing deprecated functionality. Test in Development: Test the updated module in a development environment before deploying it to production to ensure it behaves as expected with the latest Oqtane version. Conclusion By following these troubleshooting steps, developers should be able to resolve the majority of common issues encountered when developing modules for the Oqtane Framework. If issues persist, further assistance may be required from the Oqtane community or support channels."
  },
  "guides/troubleshooting/troubleshooting-developing-themes.html": {
    "href": "guides/troubleshooting/troubleshooting-developing-themes.html",
    "title": "Troubleshooting Developing Themes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Developing Themes Overview This guide provides troubleshooting steps for common issues developers may encounter when creating, modifying, or debugging themes in the Oqtane Framework. Themes control the look and feel of the site, and issues related to theme development can affect the user experience and functionality. The troubleshooting steps below address some of the most common problems faced by theme developers. 1. Theme Not Displaying Correctly Symptoms: After activating the theme, the site displays with default styles or fails to load the theme correctly. Solution: Check Theme Files: Ensure that the theme files (CSS, JavaScript, images, etc.) are correctly located in the theme directory and are properly referenced in the theme's .cshtml files. Any missing or misreferenced files can cause the theme to load incorrectly. Clear Cache: Sometimes, changes may not appear due to cached assets. Clear both the browser cache and the Oqtane cache by going to the control panel and refreshing the page. Validate Theme Settings: Ensure the correct theme is set in the Oqtane control panel. If a different theme is activated, it may override your changes. Check for Errors: Review the browser console and server logs for any errors that might indicate missing files or issues with theme-related scripts or styles. 2. Theme Styles Not Applied Symptoms: The theme loads but the styles do not apply as expected. Solution: Check CSS References: Verify that the CSS files are correctly linked in the layout files (e.g., _Host.cshtml). Ensure the paths to the CSS files are correct, and check that they are being loaded in the page's <head> section. Validate CSS Rules: Ensure there are no conflicting or overridden styles. Use browser developer tools to inspect the page and check whether the CSS rules are being applied to elements as intended. Check for Specificity Issues: If your styles are not being applied, it could be due to CSS specificity. Review the order of CSS rules and make sure that your custom styles are more specific than the default styles or are being loaded after them. 3. JavaScript Not Working Symptoms: JavaScript functionality (e.g., interactive elements) does not work after applying the theme. Solution: Check Console for Errors: Open the browser‚Äôs developer console and look for any JavaScript errors. These could provide clues about why the script isn't running, such as missing files or syntax issues. Check Script References: Ensure JavaScript files are correctly linked in the layout (_Host.cshtml). Verify that they are loaded in the right order, as some libraries may depend on others (e.g., jQuery needs to be loaded before Bootstrap). Check for jQuery Conflicts: If you're using jQuery, ensure there are no conflicts with other JavaScript libraries. For example, a newer version of jQuery might conflict with older plugins or vice versa. 4. Theme Layout Issues Symptoms: The theme layout breaks on different screen sizes, or the content does not appear as expected. Solution: Responsive Design: Ensure that your theme's CSS includes responsive design rules (e.g., media queries). This ensures that the layout adapts to different screen sizes and devices. Check Layout Files: Review your theme‚Äôs layout files (e.g., _Layout.cshtml) for issues with the grid system, container elements, or view sections that could be causing layout issues. Browser Compatibility: Test your theme in different browsers to ensure cross-browser compatibility. Some CSS or JavaScript features may not be supported in older versions of certain browsers. Use Browser Developer Tools: Use developer tools in the browser to test different screen sizes and identify issues with the layout or design. 5. Theme Assets Not Loading Symptoms: Images, fonts, or other assets are missing or not loading after activating the theme. Solution: Check File Paths: Ensure that the paths to images, fonts, and other assets are correct. If you're using relative paths, verify they are correct based on the folder structure. Permissions: Check that the server has the proper permissions to serve static assets (e.g., images, fonts, JS files). Browser Console Errors: Review the browser console for errors related to missing assets. These errors can provide the exact paths that are broken, allowing you to correct them. Check for CORS Issues: If your theme uses assets hosted on a different domain (e.g., CDNs), ensure that cross-origin resource sharing (CORS) is configured correctly on the server. 6. Performance Issues Symptoms: The theme causes the site to load slowly or have performance issues. Solution: Optimize Images: Ensure that images are optimized for web use. Large, unoptimized images can significantly slow down the page load time. Minify CSS and JavaScript: Minify and bundle your CSS and JavaScript files to reduce the number of HTTP requests and the size of each file. Lazy Load Images: For images that are below the fold or not immediately visible, consider implementing lazy loading to defer their loading until they are needed. Check for Heavy Scripts: Review your JavaScript files to ensure they are efficient and don't contain any blocking or resource-heavy operations that might impact performance. 7. Custom Theme Components Not Rendering Symptoms: Custom components (e.g., widgets or dynamic content) do not appear or render incorrectly within the theme. Solution: Check for Rendering Errors: Inspect the browser console for any rendering errors. Missing or incorrectly configured components will usually throw errors that can guide you to the root cause. Verify Component Registration: Ensure your custom components are correctly registered in the Oqtane module or layout file. Ensure Correct Model Binding: If your custom component requires data binding, ensure the model is being correctly passed from the controller or view. 8. Theme Compatibility with Oqtane Updates Symptoms: The theme breaks or doesn't work as expected after updating Oqtane. Solution: Check Release Notes: Review the Oqtane release notes for any breaking changes or updates to the theme framework that might affect your theme. Pay attention to changes in the layout or module system. Update Theme Files: If necessary, update your theme to be compatible with the new Oqtane version. This could involve adjusting CSS, JavaScript, or layout files to align with changes introduced in newer Oqtane versions. Test in Development: Before applying updates in production, test your theme in a development environment to ensure everything works as expected with the latest version of Oqtane. Conclusion By following the troubleshooting steps outlined in this guide, you should be able to resolve most common issues encountered when developing or maintaining themes in Oqtane Framework. For issues that persist, consider seeking help from the Oqtane community or support channels for further assistance."
  },
  "guides/troubleshooting/troubleshooting-file-manager.html": {
    "href": "guides/troubleshooting/troubleshooting-file-manager.html",
    "title": "Troubleshooting File Manager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting File Manager The File Manager in Oqtane provides a way to manage files and assets within the application. However, like any system, it may encounter issues related to file uploads, permissions, and other operational aspects. This guide will help you identify and resolve common problems that may arise while using the File Manager. Common Issues and Solutions 1. File Upload Failures Symptom: Files are not uploading successfully, and you receive an error message such as \"File upload failed.\" Solution: Check the file size limits. Oqtane may have size restrictions on file uploads, which can be configured in the settings or web.config. Ensure that the file being uploaded does not exceed these limits. Review the permissions of the directory where files are being uploaded. The File Manager needs appropriate read/write permissions to function correctly. If the error persists, check the application logs for more specific error messages related to file handling or permissions. 2. File Type Restrictions Symptom: Certain file types are not being uploaded or are being rejected by the system. Solution: Verify that the file type is allowed in the Oqtane File Manager configuration. You may need to modify the allowed file types list if certain types are restricted. If the file type should be allowed, check the server‚Äôs MIME type configuration to ensure that the file type is registered correctly for upload. 3. Missing Files After Upload Symptom: Files appear to upload successfully, but they are not visible in the File Manager afterward. Solution: Check the destination folder in the File Manager to confirm that the file was uploaded to the correct directory. Ensure that the correct file path is set in the system configuration, and check for any issues with the server‚Äôs file system. Verify that the File Manager is correctly displaying files from the uploaded directory. If necessary, refresh the view to load the updated list of files. 4. Permissions Issues with Files and Folders Symptom: Users are unable to access or modify files within the File Manager due to permission issues. Solution: Check the file and folder permissions to ensure that the appropriate users or roles have the necessary access to read, write, or delete files. If running on a Linux/Unix server, make sure that the file permissions are correctly set (chmod command) and that the file ownership is correct (chown command). On Windows, check the file/folder permissions in the File Explorer and ensure the IIS user or web app pool identity has the correct rights. 5. File Manager Interface Not Loading or Crashing Symptom: The File Manager interface fails to load or crashes during usage. Solution: Check for any JavaScript errors in the browser's developer console that could be preventing the File Manager from functioning properly. Verify that all necessary JavaScript and CSS files for the File Manager are loaded properly. If files are missing or not being served, they may need to be re-deployed. Clear your browser‚Äôs cache and cookies to resolve any residual issues related to outdated files. Ensure that your Oqtane application is running the latest version, as issues with the File Manager could have been addressed in recent updates. 6. Error Messages on File Deletion Symptom: An error message appears when attempting to delete a file from the File Manager. Solution: Check if the file is currently in use or locked by another process. Ensure that no other application or user has the file open when attempting to delete it. Review the file permissions to ensure that the user attempting the deletion has the necessary rights to remove the file. If the file deletion fails, check the Oqtane logs for more details about the error or any file system-related issues. General Troubleshooting Steps If you're encountering an issue not specifically addressed here, follow these general troubleshooting steps: Clear Browser Cache: Clear your browser‚Äôs cache to rule out issues caused by outdated resources or settings. Check Logs: Review the Oqtane application logs or the web server‚Äôs logs for any error messages or warnings that could indicate issues with the File Manager. Check File Paths: Ensure that the file paths configured in Oqtane (either through settings or web.config) are correct and accessible by the server. Verify Server Permissions: Double-check server-level file permissions for the directory used by the File Manager. Ensure that the web application has read/write access to this directory. Conclusion The File Manager in Oqtane is a vital part of the system for managing assets and files. If you experience issues, it's usually related to permissions, file size/type restrictions, or misconfigurations. By following the troubleshooting steps provided, you should be able to resolve most issues related to the File Manager. For further assistance or specific use cases reach out to the Oqtane community."
  },
  "guides/troubleshooting/troubleshooting-installations.html": {
    "href": "guides/troubleshooting/troubleshooting-installations.html",
    "title": "Installation Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Troubleshooting Overview Encountering issues during the installation process can be frustrating, but with the right troubleshooting steps, you can overcome common obstacles and successfully set up Oqtane. Below are some common troubleshooting tips for both Windows and Linux installations: Windows Installation Troubleshooting Check Prerequisites: Ensure that all prerequisites, such as .NET Framework, IIS, or SQL Server, are installed correctly and meet the minimum version requirements specified in the Oqtane documentation. Permissions: Verify that you have sufficient permissions to install and configure Oqtane. Running installation processes with administrative privileges can help resolve permission-related issues. Firewall and Antivirus: Temporarily disable firewall or antivirus software during the installation process, as they may interfere with file downloads or server connections. Error Logs: Check error logs generated during the installation process for any specific error messages or exceptions. These logs can provide valuable insights into the root cause of installation failures. Linux Installation Troubleshooting Package Dependencies: Ensure that all required dependencies, such as Mono, Apache, MySQL, or PostgreSQL, are installed and configured correctly on your Linux system. Use package managers like apt or yum to install missing dependencies. File Permissions: Check file and directory permissions to ensure that the installation directory and relevant files are accessible by the installation process. Adjust permissions using chmod or chown commands as needed. Service Status: Verify the status of Apache or other web servers, as well as database services like MySQL or PostgreSQL, to ensure they are running properly. Restart services if necessary to resolve any issues. SELinux: If SELinux is enabled on your Linux system, it may restrict certain operations during the installation process. Temporarily disable SELinux or adjust its policies to allow necessary operations for Oqtane installation. Additional Resources For further assistance and discussions on installation troubleshooting, you can explore the Oqtane Framework GitHub repository and review existing issues and discussions related to installation problems. Engaging with the community and seeking help from experienced users and developers can often provide valuable insights and solutions to resolve installation issues. Oqtane Supported Databases Oqtane Installation Resources ‚Üê Back to Installation Home"
  },
  "guides/troubleshooting/troubleshooting-login-issues.html": {
    "href": "guides/troubleshooting/troubleshooting-login-issues.html",
    "title": "Troubleshooting Login Issues | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Login Issues Issue: Unable to log into a production website. Potential Cause: An expired or improperly configured SSL certificate, or cookie issues. Resolution Steps: Check SSL Certificate: Verify if the SSL certificate for the website is expired. You can check this by clicking on the padlock icon in the browser's address bar, which will display certificate details. If the certificate is expired, you will need to renew it through your certificate authority (CA). Validate SSL Configuration: Ensure that the SSL certificate is correctly installed and configured on the web server. Misconfigurations can lead to failed login attempts. Use online tools (like SSL Labs) to test the SSL configuration and identify any issues. Update Certificate: If the certificate is not properly set up, re-install or configure the certificate as per the guidelines provided by your CA or hosting provider. Refresh the Page: Refresh the login page to ensure that any changes to cookies are reflected. This helps prevent logging in with an old cookie name that may no longer be valid. Use the following quick keys based on your browser: Google Chrome / Firefox / Edge: F5 or Ctrl + R Safari (macOS): Command + R Internet Explorer: F5 or Ctrl + F5 (to refresh and bypass cache) Test Login Again: After resolving any SSL or cookie issues, attempt to log in to the website again."
  },
  "guides/troubleshooting/troubleshooting-marketplace.html": {
    "href": "guides/troubleshooting/troubleshooting-marketplace.html",
    "title": "Troubleshooting in the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting in the Oqtane Marketplace Overview Encountering issues while using the Oqtane Marketplace? This troubleshooting guide offers solutions to common problems and helps you resolve issues related to theme and module installation, compatibility, and other Marketplace functionalities. Common Issues and Solutions Learn about common issues that users may encounter when using the Oqtane Marketplace and how to troubleshoot them effectively. From installation errors to compatibility issues, this section provides step-by-step solutions to help you resolve issues quickly and get back to using the Marketplace. Issue 1: Theme or Module Installation Error Solution: If you encounter an error while installing a theme or module from the Marketplace, follow these steps to troubleshoot the issue: Check the error message for any specific details or error codes. Ensure that your Oqtane site is running on a compatible version of the framework. Verify that you have sufficient permissions to install themes or modules on your Oqtane site. If the issue persists, try reinstalling the theme or module from the Marketplace. Issue 2: Compatibility Problems Solution: If you experience compatibility issues between themes, modules, or translations installed from the Marketplace and your Oqtane site, consider the following solutions: Check the compatibility requirements specified by the theme or module developer. Update your Oqtane site to the latest version to ensure compatibility with the latest themes and modules. Contact the developer or support team for assistance if compatibility issues persist. Issue 3: Marketplace Navigation Problems Solution: If you encounter navigation problems or difficulties accessing certain sections of the Oqtane Marketplace, try the following troubleshooting steps: Clear your browser cache and cookies to ensure that you have the latest version of the Marketplace interface. Verify that your internet connection is stable and not experiencing any disruptions. If the issue persists, try accessing the Marketplace from a different web browser or device to isolate the problem. Reporting Issues If you encounter an issue that is not covered in this troubleshooting guide or need further assistance, you can report the problem to the Oqtane support team for investigation and resolution. Provide detailed information about the issue, including any error messages or screenshots, to help expedite the troubleshooting process. By following the troubleshooting steps outlined in this guide and reporting any unresolved issues to the Oqtane support team, you can ensure a smooth and hassle-free experience while using the Oqtane Marketplace."
  },
  "guides/troubleshooting/troubleshooting-migrations.html": {
    "href": "guides/troubleshooting/troubleshooting-migrations.html",
    "title": "Troubleshooting Migrations | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Migrations Overview This guide provides troubleshooting steps for common issues encountered during the migration of Oqtane Framework instances, including both migration-related problems and post-migration issues. Whether you're migrating between servers, upgrading versions, or moving from a development to production environment, this guide will help you address common challenges throughout the entire migration process. Migration Troubleshooting 1. Migration Failures Symptoms: The migration process fails without completing successfully. Solution: Check Logs: Review the error logs on both the source and destination systems. These logs will provide more details about the failure and help you pinpoint the issue. Disk Space: Ensure the destination environment has sufficient disk space to accommodate the migrated files and database. Permissions: Verify that the user executing the migration has the necessary permissions to access both the source and destination systems and perform the migration tasks. Dependencies: Make sure all required services (e.g., database, web server) are running and compatible between the source and destination environments. Double-check version compatibility for Oqtane and its dependencies. Retry Migration: If the migration fails due to a temporary error, retry after resolving any issues found in the logs or environment. 2. Database Migration Problems Symptoms: Missing data, schema mismatches, or errors during data transfer. Solution: Check Database Compatibility: Ensure the destination environment's database version is compatible with the source. If necessary, upgrade or downgrade the database to align with the Oqtane version you're migrating to. Run Migration Scripts: Ensure all required database migration scripts are executed to bring the schema up to date in the destination environment. Backup and Restore: If data is missing or corrupted, restore from a backup and reapply the migration scripts if needed. Verify Database Permissions: Ensure the database user has full access rights to the required tables and schemas. Improper permissions can cause migration failures or incomplete data migration. 3. Configuration Errors Symptoms: Issues with configuration files, such as mismatched settings, incorrect paths, or missing configurations. Solution: Update Configuration Files: Review and update configuration files (appsettings.json, settings.json, etc.) with the correct paths, connection strings, and environment-specific settings. Check File Paths: Verify that file paths are correct and point to valid directories in the new environment, especially for file-based settings or resources. Verify Environment Variables: Double-check any environment-specific variables (e.g., SMTP settings, API keys) to ensure they're set correctly in the new environment. 4. File Path and Permission Issues Symptoms: Missing files, such as themes, modules, or uploaded content, or files are inaccessible after migration. Solution: Check File Permissions: Ensure that the web server user has the correct permissions to access all necessary files and directories. This includes read and write permissions for files related to themes, modules, and uploaded content. Verify File Transfer: Ensure that all required files were successfully transferred during the migration. If transferring manually, verify the integrity of the files on both the source and destination systems. Adjust File Paths: If file paths were changed in the migration process (e.g., if moving between servers with different file structures), update the paths in the Oqtane configuration to reflect the new locations. 5. Broken Links or URLs Symptoms: Internal links or URLs are broken after migration. Solution: Update Hardcoded URLs: Check for any hardcoded URLs in the application, configuration files, or database that reference the source environment and update them to match the production environment's URLs. URL Rewriting: If you're using URL rewrites or redirects, ensure the necessary rules are applied correctly in the new environment. Check the .htaccess or web.config file for rewrite rules. Clear Cache: Clear any browser cache, server cache, or CDN cache that might be storing outdated URLs. Sometimes, browsers or CDNs hold onto old links after a migration. 6. Performance Issues After Migration Symptoms: The migrated Oqtane instance is performing slower than expected in the new environment. Solution: Optimize Database Queries: Review the database for slow queries or missing indexes that could affect performance. Consider running database optimization commands (e.g., index rebuilding or query optimization). Check Server Resources: Ensure the destination environment has sufficient CPU, memory, and disk I/O resources. Under-provisioned environments may struggle with performance after migration. Enable Caching: Make sure caching mechanisms (e.g., application cache, object caching, CDN caching) are configured and enabled to improve performance. Review Web Server Configurations: Review web server configurations (e.g., connection limits, thread pool settings) to ensure they are tuned for the expected traffic load. 7. User Authentication and Access Issues Symptoms: Users are unable to authenticate, or permissions are incorrectly applied after migration. Solution: Check User Roles and Permissions: Verify that user roles and permissions were correctly migrated and applied in the destination environment. If needed, manually reassign roles. Session State: Ensure that session management is properly configured. If using session state servers or shared caches, verify their configurations. Authentication Providers: Ensure that authentication providers (e.g., OAuth, Active Directory, custom providers) are correctly configured and functional in the new environment. This includes updating any third-party API keys or tokens. Test Login Process: Run tests for different user roles to verify login functionality and ensure authentication works as expected. Post-Migration Troubleshooting 1. Missing Data or Modules Symptoms: Certain data or modules are missing after migration. Solution: Rebuild the Database: Run any necessary commands to rebuild or refresh the database schema to ensure all modules and data are correctly loaded. Module Reinstallation: Check whether the necessary modules are installed in the target environment. Reinstall or re-enable them from the Oqtane control panel if required. Verify Data Import: If data is missing, verify that the data was successfully migrated. You may need to manually re-import certain data sets or configurations. 2. Broken Links or URLs Symptoms: Broken links or URLs are occurring post-migration. Solution: Check URL Rewrites: Ensure that any URL rewrites or redirections are correctly configured in the new environment, especially if server paths have changed. Review Routing Settings: Verify that routing settings in Oqtane‚Äôs configuration files are correctly set up, including base URLs and other path-related configurations. Test Links: Use a link checker to test for any broken links across the site. Ensure that all internal links are properly pointing to the new location. 3. Performance Degradation Symptoms: Performance issues arise after migration, such as slow page loads or delayed responses. Solution: Check Server Resources: Verify that the new environment has adequate resources (CPU, memory, disk space) for running Oqtane smoothly. Optimize Database: After migration, run database optimization commands (e.g., index rebuilding) to ensure optimal performance. Enable Caching: Ensure caching mechanisms are enabled and configured properly, including output caching and object caching, to speed up page loads and reduce server load. Profile the Application: Use profiling tools to analyze performance bottlenecks, such as slow queries, high CPU usage, or memory leaks. 4. User Authentication Problems Symptoms: Users experience authentication issues or incorrect permissions after migration. Solution: Check User Credentials: Verify that user data (e.g., usernames, passwords) was migrated successfully and is intact in the new environment. Review Authentication Settings: Ensure that authentication settings (e.g., authentication provider, SMTP settings) are correctly configured in the new environment. Test Login Process: Run tests for different user roles and permissions to ensure that authentication works as expected. Clear Session Data: If users are having trouble logging in after migration, clear session data or cookies, as stale sessions can sometimes block new logins. Best Practices for Successful Migrations Test the Migration: Perform a test migration in a staging environment before migrating to production. This will allow you to identify and resolve any issues without impacting live systems. Backup Everything: Always back up your data, files, and configurations before beginning the migration process. Ensure that you have both a database and file system backup. Check for Dependencies: Ensure that all dependencies (e.g., database versions, web server settings, or third-party services) are compatible with the destination environment. Use Automation: Automate the migration process as much as possible, including database updates, file transfers, and configuration changes. This reduces human error and improves consistency. Monitor After Migration: After completing the migration, monitor system logs, error logs, and performance metrics. Address any issues that arise promptly to minimize downtime or performance degradation. Conclusion By following the steps outlined in this guide, you can effectively troubleshoot common migration issues in Oqtane Framework. Whether you are migrating between servers, upgrading to a new version, or transitioning to a production environment, these solutions will help you address migration challenges and ensure a smooth transition. If issues persist, consult the Oqtane community or support channels for additional assistance."
  },
  "guides/troubleshooting/troubleshooting-modules.html": {
    "href": "guides/troubleshooting/troubleshooting-modules.html",
    "title": "Troubleshooting Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Modules Encountering issues with module installation or configuration? Here are some common problems and solutions: Common Issues Module Not Installing If you're having trouble installing a module, ensure that you have the correct module package and that it is compatible with your version of Oqtane. Also, check for any errors in the installation process. Module Not Functioning Properly If a module is not working as expected, verify that it is configured correctly and that any required dependencies are installed. Check the Oqtane logs for error messages or warnings that may indicate the cause of the issue. Error Messages If you encounter error messages during module installation or configuration, note down the error message and any accompanying details. Search for solutions online or consult the Oqtane community forums for assistance. Troubleshooting Steps Check Compatibility: Ensure that the module is compatible with your version of Oqtane and any other installed modules or themes. Review Configuration: Double-check the module configuration settings to ensure that everything is configured correctly. Inspect Logs: Look for error messages or warnings in the Oqtane log files, located in the /Logs directory of your Oqtane installation. Update Dependencies: Make sure that all dependencies required by the module are up-to-date and installed correctly. Contact Support: If you're unable to resolve the issue on your own, reach out to the module developer or the Oqtane community for assistance. By following these troubleshooting steps, you should be able to diagnose and resolve most module-related issues on your Oqtane site."
  },
  "guides/troubleshooting/troubleshooting-themes.html": {
    "href": "guides/troubleshooting/troubleshooting-themes.html",
    "title": "Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Encountering issues with theme installation or configuration? Here are some common problems and solutions: Common Issues Theme Not Installing If you're having trouble installing a theme, ensure that you have the correct theme package and that it is compatible with your version of Oqtane. Also, check for any errors in the installation process. Theme Appearance Not Changing If you've installed a theme but don't see any changes on your site, try clearing your browser cache and refreshing the page. Additionally, check if the theme is activated and configured correctly in the Theme Management section. Error Messages If you encounter error messages during theme installation or configuration, note down the error message and any accompanying details. Search for solutions online or consult the Oqtane community forums for assistance. Troubleshooting Steps Check Compatibility: Ensure that the theme is compatible with your version of Oqtane and any other installed modules or themes. Review Configuration: Double-check the theme configuration settings to ensure that everything is configured correctly. Inspect Logs: Look for error messages or warnings in the Oqtane log files, located in the /Logs directory of your Oqtane installation. Update Dependencies: Make sure that all dependencies required by the theme are up-to-date and installed correctly. Contact Support: If you're unable to resolve the issue on your own, reach out to the theme developer or the Oqtane community for assistance. By following these troubleshooting steps, you should be able to diagnose and resolve most theme-related issues on your Oqtane site."
  },
  "guides/troubleshooting/troubleshooting-upgrading-installations.html": {
    "href": "guides/troubleshooting/troubleshooting-upgrading-installations.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Upgrading Installations Upgrading Oqtane to a newer version can sometimes lead to unexpected issues due to changes in dependencies, configurations, or other system requirements. This guide will help you resolve common problems encountered during the upgrade process. Common Issues and Solutions 1. Upgrade Failures After Running Migration Scripts Symptom: The upgrade fails after running migration scripts, often with errors related to database schema or missing columns. Solution: Ensure that the database is fully backed up before attempting any upgrade. Double-check that the migration script was run on the correct database (development vs. production). If the migration fails, check for any specific error messages that can indicate missing or incompatible columns, and refer to the Database Migrations Documentation for resolving these issues. Manually apply any database updates if necessary using SQL scripts provided by Oqtane for your version. 2. Missing Files or References After Upgrade Symptom: After upgrading Oqtane, some assets (such as images, CSS, or JavaScript files) are missing, or broken links are showing up. Solution: Clear the browser cache and refresh the page to ensure you're not seeing an outdated version. Verify that all the files in the /assets or /wwwroot directory have been copied correctly to the upgraded environment. Check the web.config or other settings files to ensure proper reference paths are maintained after the upgrade. Rebuild the project and deploy it again to ensure all assets are updated. 3. Compatibility Issues with Installed Modules Symptom: Certain modules are not functioning as expected after the upgrade, or they may fail to load completely. Solution: Check the compatibility of each module with the Oqtane version you are upgrading to. Some modules may require updates or patches to work with newer Oqtane versions. If an issue persists, try uninstalling and reinstalling the module. If custom modules are used, ensure they are updated to the latest version or rebuilt to work with the current framework version. 4. SSL and Certificate Issues After Upgrade Symptom: After upgrading Oqtane, you might experience SSL-related issues, such as errors related to expired or misconfigured certificates. Solution: Check the SSL certificate and verify that it is correctly configured in your environment, including the appropriate bindings in IIS or reverse proxies. Ensure that the correct certificates are loaded and that they are not expired. If expired, replace them and update the server configuration. If the site is running behind a proxy, ensure that it correctly passes the SSL header to the Oqtane application. 5. Performance Degradation Post-Upgrade Symptom: After upgrading, the site performance is noticeably slower than before. Solution: Review the server's resource utilization, including CPU, RAM, and database performance, to ensure that the system is properly scaled for the new version. Check for any new logging or diagnostic features that may have been added in the latest Oqtane version, which could cause performance overhead. Review the upgrade notes for any new settings or configurations that could affect performance. Consider running performance diagnostics or using a profiler tool to identify bottlenecks. 6. Permissions or Access Control Issues Symptom: After upgrading, certain user roles or permissions no longer function correctly, or users are unable to access certain parts of the site. Solution: Review the user roles and permissions settings in the Oqtane admin dashboard and make sure they are correctly configured for the new version. Check if any new role types or permission models were introduced in the latest upgrade and adapt your setup accordingly. Clear the cache and cookies to eliminate any residual permission issues from the browser session. 7. Dependency Errors During Upgrade Symptom: You encounter errors regarding missing dependencies or version conflicts after the upgrade. Solution: Review the error logs to identify the specific dependencies causing issues. Ensure that your project's packages.config or csproj files are updated to reflect the new version of Oqtane and its dependencies. Run dotnet restore to restore missing packages and ensure compatibility. If necessary, update any third-party dependencies to be compatible with the new Oqtane version. General Troubleshooting Steps If the specific issue you are facing is not listed here, try the following general troubleshooting steps: Clear Caches: Clear the browser cache and, if applicable, the server-side cache. You may need to restart the Oqtane application to ensure all updated settings are applied. Check Logs: Check the Oqtane application logs (/logs directory or via your web server's logging mechanism) for any error messages or warnings that could indicate problems during the upgrade process. Verify Configuration Files: Review all configuration files (such as appsettings.json, web.config, etc.) to ensure that all settings are correct and compatible with the upgraded Oqtane version. Rollback to Previous Version: If you cannot resolve the issue after the upgrade, you may consider rolling back to the previous Oqtane version. Be sure to have a full backup of the database and files before performing any rollback. Conclusion Upgrading Oqtane can occasionally introduce challenges, but with the right troubleshooting steps, these issues are often easy to resolve. Be sure to test the upgrade in a staging environment before applying it to production, and always keep backups of both your database and files. For additional help ask for assistance in the Oqtane community."
  },
  "guides/troubleshooting/troubleshooting-user-registration-email-verification.html": {
    "href": "guides/troubleshooting/troubleshooting-user-registration-email-verification.html",
    "title": "Troubleshooting User Registration Email Verification | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting User Registration Email Verification Issue: A user registers but is unable to verify their account. Potential Cause: SMTP server issues or email lost in junk mail. Resolution Steps: Manually Update Email Confirmation: If you know the user and trust their registration, you can manually update the EmailConfirmed field in the AspNetUsers database to true. This will allow the user to log in without verifying their email address. Execute an SQL command similar to the following: UPDATE AspNetUsers SET EmailConfirmed = `True` WHERE Email = 'user@example.com'; Replace user@example.com with the actual email address of the user. Check Email Configuration: Ensure that your SMTP server is correctly configured. Check the SMTP settings in your application to confirm that emails can be sent. Consider Deleting the User: If the SMTP issue has been resolved, you may consider deleting the user and asking them to register again. This can help ensure that the user receives the verification email correctly. Feature Request: A feature request to add an administrative function for confirming the email addresses of self-registered users has been made. You can track the progress of this request here. If accepted and a contribution is made, this feature may be included in version 6.0.0 or later."
  },
  "index.html": {
    "href": "index.html",
    "title": "Oqtane Documentation 5.2.4 | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation 5.2.4 Oqtane is the Modular Application Framework for Blazor Modern, Flexible, and Open Source - running on .net 8.0! Documentation Contents In Guides you'll find background infos etc. The Administration Manuals is WIP In the API Documentation you'll find all the APIs To work on the docs, better read up on how the docs work Join Our Community For more interactive discussions and community support, join us on Discord! Happy documenting!"
  },
  "manuals/admin/admin-management/file-management.html": {
    "href": "manuals/admin/admin-management/file-management.html",
    "title": "File Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "File Management Nearly everything you could need to do with files and folders in Oqtane can be done from this view. You have the ability to upload, edit, and delete files and folders. You can also control where files are stored and what permissions should be applied to which folders. Folder permissions specified by roles allow you to determine who can see folders and files and who is allowed to modify the contents of a folder. The options provided by the file manager are: A drop down menu to select the file in which you what your view to placed in. Edit Folder: Lets you change the parent of the folder, the name of the folder, and the permissions for what roles are able to see and access the folder and its files. Add Folder: Allows you to create a new folder with the ability to choose a name, parent folder, and permissions to access. Upload Files: This is the feature that allows for user to upload files like images from their local system to a folder in Oqtane and allows for files to downloaded from Oqtane to their local system. Add/Edit Folder Feature Overview The Add/Edit Folder features allows users to organize content within the application efficiently. By creating folders, users can categorize and manage their files according to their needs. This feature provides options for setting various parameters, such as folder type, image sizes, and capacity, ensuring flexibility in how users store and access their content. Accessing the Add/Edit Folder Feature To add a folder, follow these steps: Locate the Add or Edit Folder Button: In the main user interface, find the Add Folder or Edit Folder button. Open the Modal Window: Click on the Add Folder or Edit Folder button to open the modal window where you can configure the new folder's settings and permissions. Folder Settings Tab When the modal window opens, you will see the following fields: Parent Folder: Description: Select the parent folder under which this new folder will be created. This helps maintain a clear hierarchy within your content organization. Folder Name: Description: Enter a name for the new folder. This name will be displayed in the folder list. Folder Type: Description: Choose the visibility of the folder. You can set the folder as either: Private: Accessible only to the user who created it. Public: Accessible to all users within the application. Image Sizes: Description: Specify the allowed image sizes for files that will be uploaded to this folder. This helps maintain consistency in file dimensions. Capacity: Description: Define the maximum storage capacity for the folder. This ensures that users do not exceed their allotted storage. Buttons: Save: Save the new folder configuration. Cancel: Close the modal window without saving changes. Permissions Tab The Permissions tab allows users to manage access to the newly created folder based on defined roles within the application. By setting permissions, users can control who can view, edit, or manage the contents of the folder. Accessing the Permissions Tab After opening the Add Folder modal window, navigate to the Permissions tab. Permissions Configuration Options The following options are available in the Permissions tab: Role Permissions: Description: A list of roles for which you want to set permissions. User Permissions: Description: A list of users for which you want to set permissions. (This is only displayed if at least one user has been added to be granted permissions.) Browse Folder Permission: Description: Check or uncheck this option to allow or deny the selected role or user the ability to browse the folder and its contents. Control: Checkbox labeled Browse Folder. View Folder Permission: Description: Check or uncheck this option to allow or deny the selected role the ability to view the folder and its contents (e.g., add, delete, or rename files). Control: Checkbox labeled View Folder. Edit Folder Permission: Description: Check or uncheck this option to allow or deny the selected role or user the ability to modify the folder and its contents (e.g., add, delete, or rename files). This is typically reserved for higher-level roles. Control: Checkbox labeled Edit Folder. Add Users: Description: Users can add permissions for multiple users by clicking the Add button after selecting a user from the search field below the roles permissions. This will make a section for Users appear which allows for easy management of permissions of one or many users. Control: Input field and button to add another role with permissions. Save: Description: After setting the desired settings and permissions for each click the Save button to apply the changes. Control: Save button at the bottom of the Permissions tab. By effectively managing folder permissions, users can ensure that sensitive content is only accessible to authorized roles, thus enhancing the security and organization of files within Oqtane. Uploading a File The Upload Files feature allows users to easily transfer files from their local system to a designated folder within Oqtane. This functionality is essential for managing content effectively and ensures that users can access the necessary files whenever required. Accessing the Upload Files Feature To upload a file, follow these steps: Locate the Upload Files Button: In the main file management interface, find the Upload Files button. Open the Upload Files Window: Click on the Upload Files button to open the file selection window. Uploading a File Once the file selection window is open, you can upload your file by following these steps: Choose Destination Folder: Description: In the upload window, select the destination folder where the file(s) will be stored. This can be done from a dropdown menu or by navigating through your folder structure. Control: Dropdown menu to select the destination folder. Select File(s) to Upload: Description: Click the Choose Files button to open your file explorer. Navigate to the desired file(s) on your local system and select them. Control: Browse button to choose file(s) from your system. Select a file with an extension type that is allowed in the Allowed Extentions configuration setting located in Site Settings to upload. Confirm Upload: Description: After selecting the files and destination, click the Upload button to begin the upload process. Control: Upload button to start uploading the selected file(s). Note: You should see the file name next to the Choose Files Upload Progress Once you initiate the upload, a progress bar will appear, showing the status of the upload. This allows you to monitor the upload process. Successful Upload Notification After the upload is complete, a notification will confirm that your files have been successfully uploaded to the designated folder. When done uploading files click the X on the top right to close the window. By following these steps, users can efficiently upload files to Oqtane, enhancing their ability to manage and organize content within the application. Ensure that the files you are uploading meet any specified requirements (such as file types and sizes) set by the folder configuration. If you experience an error please review our troubleshooting guides or start a github issue or discussion to get help. Editing Files The Edit Files feature allows users to modify the properties of existing files within Oqtane. This functionality is essential for keeping file details up to date and ensuring that users can manage their content effectively. Accessing the Edit Files Feature To edit a file, follow these steps: Select a Folder: Description: Choose the folder from which you want to edit a file. This can be done from a dropdown menu or by navigating through your folder structure. Control: Dropdown menu to select the folder. View Files: Description: After selecting a folder, you will see a list of files within that folder. The file list includes the following columns: Name: The name of the file (hyperlinked to view the file). Modified: The date the file was last modified. Type: The file type (e.g., image, document). Size: The file size. Locate the Edit File Button: Description: Find the Edit File button next to the file you wish to edit. Control: Edit File button associated with the specific file. Open the Edit File Window: Click on the Edit File button to open the editing window. Edit File Window Components When the edit file window opens, you will see the following fields: File Name: Description: The current name of the file. You can edit this name as needed. Select Folder: Description: Choose a different folder for the file if required. This helps in organizing files into appropriate categories. Description: Description: Enter a description for the file to provide additional context or information about its content. File Size: Description: Displays the current size of the file, which is read-only and helps users understand the file's storage requirements. Buttons: Save: Click to save the changes made to the file properties. Cancel: Close the editing window without saving changes. Deleting a File If you need to remove a file, you can do so by following these steps: Locate the Delete File Button: Next to the file you want to delete, find the Delete File button. Control: Delete File button associated with the specific file. Confirm Deletion: Click on the Delete File button, and confirm the action when prompted. This action will permanently remove the file from the system. By utilizing the Edit Files feature, users can ensure that their file details remain accurate and relevant, enhancing the organization and management of content within Oqtane."
  },
  "manuals/admin/admin-management/index.html": {
    "href": "manuals/admin/admin-management/index.html",
    "title": "Admin Management Introduction | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Admin Management Introduction The Admin Dashboard in Oqtane provides administrators with a powerful suite of tools to manage, customize, and control various aspects of the site. These tools enable efficient management of content, users, site settings, and other features, helping administrators maintain and personalize the site effectively. Administrators can access the Admin Dashboard by logging in with an administrator account, clicking on the gear icon in the top-right corner to open the Control Panel, and selecting the Admin Dashboard option. This displays a menu of options that offer a variety of functionalities to manage the website. Control Panel Walkthrough The Control Panel provides quick access to additional site settings and tools: Open the Control Panel: Click the gear icon at the top right. Open Admin Dashboard: Click the Admin Dashboard button. Navigate to Desired Feature: In the Admin Dashboard, you‚Äôll find icons for each feature available. Select the feature you wish to manage. Access Permissions To access the Admin Dashboard, users must be assigned to the Administrator role. This can be done within the User Management feature by selecting the user and assigning them to the Administrator role. Admin Dashboard Features The following tools are available by default within the Admin Dashboard. Each link below will direct you to detailed documentation for that specific feature. Administrator Role Admin Dashboard Features Site Settings: Configure site-wide settings, including site name, logo, language, and time zone. Page Management: Manage website pages‚Äîcreate, edit, arrange, and delete pages within the site hierarchy. User Management: Add, edit, and manage user accounts, including assigning roles and permissions. Profile Management: Define profile fields for user accounts, ensuring necessary information is captured. Role Management: Create and manage security roles, defining user permissions across the site. File Management: Upload and manage files like images and documents for use throughout the website. Recycle Bin: Restore or permanently delete items that have been removed from the site. URL Mappings: Manage URL redirects, handle broken links, and configure custom mappings. Visitor Management: Track visitor activity, manage session durations, and configure visitor tracking. Search Settings: Configure the search index and parameters to improve search functionality. Language Management: Add and manage site languages, enabling multilingual support. Extending the Admin Dashboard The Admin Dashboard in Oqtane is customizable, allowing administrators to add new pages or tools to extend site management capabilities. To add a custom page to the Admin Dashboard: Access the Control Panel: Log in as an administrator and click the gear icon at the top right to open the Control Panel. Navigate to Page Management: In the Control Panel, select the Page Management section to access page configuration options. Create a New Admin Page: Click on the Add button within the Page Management section. In the page creation dialog, set the Parent Page to Admin. This action will designate the new page as part of the Admin Dashboard, making it accessible to administrators. Customize additional settings for the new page as needed, such as specifying a page title and assigning permissions. Save and Verify: Once saved, the new page will appear in the Admin Dashboard, providing additional functionality to administrators. For further information on managing and organizing pages, visit the Content Management - Page Management documentation. With this process, administrators can extend the Admin Dashboard by adding custom management tools, offering enhanced control over site content, settings, and features. Quick Links to Additional Documentation For more in-depth information on installation and troubleshooting, refer to the following resources: Installation Guides: Detailed instructions for initial setup, including environment-specific configurations. Troubleshooting Installation Issues: Solutions for common setup issues. GitHub Discussions: Join the Oqtane community for support and to discuss ideas. GitHub Issues: Report and view issues, or search for existing solutions. This updated Admin Management Introduction page consolidates all Admin Dashboard features, provides an overview for each tool, and directs users to specific guides for additional information. This setup ensures administrators can efficiently find and use the tools they need to manage their site."
  },
  "manuals/admin/admin-management/language-management.html": {
    "href": "manuals/admin/admin-management/language-management.html",
    "title": "Language Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Language Management This document describes the Language Management module, settings, and configuration for administrators to manage language resources effectively across their Oqtane site. Overview The Language Management feature allows administrators to manage translations for their site, ensuring that the site content is available in multiple languages, enhancing accessibility and user experience. Control Panel Walkthrough Accessing the Language Management Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Language Management icon to configure your language resources. Configuring Language Management Once in the Language Management settings, administrators can view and manage language resources. Main Index Page The Language Management main index page displays all installed languages. The list includes the name of each language, along with options to edit or delete (except for the default English language). Adding a Language Use the Add Language button to open a popup modal for adding a new language. In the popup, select the language by name and set it as default using the Yes/No dropdown options. Searching Languages The search feature allows administrators to filter through installed languages, which is particularly helpful when many languages are available. Reviewing and Editing Languages To edit an existing language, click the Edit button next to the desired language. This will open the edit popup, where you can modify the language settings. You can set the language as default using the Yes/No dropdown option. To delete a language, click the Delete button next to the language. Note that the default English language cannot be deleted. Conclusion The Language Management module in Oqtane provides an effective way for administrators to manage language resources and translations. By leveraging the features outlined in this manual, site administrators can enhance user experience and ensure their content is accessible in multiple languages."
  },
  "manuals/admin/admin-management/page-management.html": {
    "href": "manuals/admin/admin-management/page-management.html",
    "title": "Page Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Page Management Overview Pretty much every website starts out as one thing first and foremost: a collection of pages that constitute a web presence. Each page will have a purpose (we hope) and serve it well. As you have seen after the default installation of Oqtane, you are even given a home page to work with on the first load of your new site. Your next step might be to create additional pages, such as About Us, Contact Us, and more. As your site continues to become successful and grows to meet the needs of your customers and other visitors, you will undoubtedly begin to have more and more pages on your site. You'll have so many that at some point you will need to manage them from a centralized location. In other cases, you might have pages that are hidden from the menu and are not easily accessible. This is where the Page Management feature comes in to allow for a larger overview of the pages on your website, with all pages on your website viewable in a list format. These pages can be manipulated in the page manager by being able to add, edit, and delete pages. Control Panel Walk-through Accessing the Page Management Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Page Management icon to configure your pages. Adding a Page The add page feature adds a new page to your website and brings up the page management window, which allows you to specify the settings, appearance, and permissions for the page you are adding. Page management has an \"Add Page\" button, and when clicked, you get the following: A window will appear with two tabs: Settings and Permissions. Settings Tab Name: Enter a page name. Parent: Select the parent for the page in the site hierarchy (setting this to admin will create an admin dashboard page). Insert: Select the location where you would like the page to be inserted in relation to other pages (While in edit, this is changed to Move: Select the location where you would like the page to be moved in relation to other pages, so be sure to update this when talking about editing a page). Navigation: Select whether the page is part of the site navigation or hidden. Clickable?: Select whether the link in the site navigation is enabled or disabled. URL Path: Optionally enter a URL path for this page (i.e., home). If you do not provide a URL path, the page name will be used. If the page is intended to be the root path, specify '/'. Redirect: Optionally enter a URL which this page should redirect to when a user navigates to it. Icon: Optionally provide an icon class name for this page which will be displayed in the site navigation. Effective Date: The date that this page is active. Expiry Date: The date that this page expires. Personalizable?: Select whether you would like users to be able to personalize this page with their own content. Appearance Title: Optionally enter the page title. If you do not provide a page title, the page name will be used. Theme: Select the theme for this page. Default Container: Select the default container for the page. Page Content Head Content: Optionally enter content to be included in the page head (i.e., meta, link, or script tags). Body Content: Optionally enter content to be included in the page body (i.e., script tags). Permissions Tab The permissions tab has the following: A list of roles with \"View Page\" and \"Edit Page\" checkbox permissions to the right. Below that is a way to search for a user's name via text input and click the \"Add\" button. When users are added, below the \"Role\" list section will be an added \"User\" list that displays users with the permissions they have been granted. Use the Save button to save the page or Cancel button or use the X to close the window to escape it. Search Pages Below the \"Add Page\" button on the main form: Search by Name input field to search for pages with a \"Search\" button to click to perform the search and a \"Reset\" button to reset the form. After this, there is a paginated list of pages with 3 buttons: Edit, Delete, and Browse. Edit Page The edit page feature shares all of the same features as the add feature, allowing you to change the settings, appearances, and permissions of any page, with the insert feature being replaced by the move feature. The edit feature also shows you when a page was created and when the page was last edited at the bottom of the page management window. Edit button will pop up a window to edit the page features (tabs discussed while adding it). Editing page settings is as discussed in adding it with the exception of \"Insert\" option is now a\"Move\" option. Edit Page Appearance and Page Content options are the same as add page as shown below: In addition to these tabs are two more tabs: Modules: Lists all the modules you can then \"Edit\" the modules on the page with an edit button to access that module's settings, or \"Delete\" to delete the module from the page. Theme Settings: Includes the following settings you can set that are all dropdown selections. Settings Scope: Specify if the settings are applicable to this page or the entire site. Show Login: Specify if a Login option should be displayed. Note that this option does not prevent the login page from being accessible via a direct URL. Show Register: Specify if a Register option should be displayed. Note that this option is also dependent on the Allow Registration option in Site Settings. Display Fixed Footer?: Specify if a Footer pane should always be displayed in a fixed location at the bottom of the page. Delete Page You can Delete a page in the list of pages with a confirmation window popping up. The delete feature will delete the page that you are currently on and you can recover the page or fully delete the page in the admin dashboard's Recycle Bin. Browse Page A Browse button allows you to navigate to that page to view it on the site. Conclusion Page Management provides a robust interface to control your website's pages effectively. With options to add, edit, delete, and manage permissions, you can ensure that your site grows and evolves as needed while maintaining a user-friendly experience."
  },
  "manuals/admin/admin-management/profile-management.html": {
    "href": "manuals/admin/admin-management/profile-management.html",
    "title": "Profile Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Profile Management Overview Profile Management in Oqtane provides a flexible and powerful way to customize user profiles. This feature is often underappreciated but is essential for creating tailored user experiences. The Profile Manager enables you to customize the fields of user accounts, from the name and address to custom fields with specific validation, required settings, and more. In Oqtane, the Profile Manager is primarily used to define profile fields, set field properties, and organize them into categories. Administrators can configure profile fields that users will interact with during account creation or editing. Control Panel Walk-through Accessing the Profile Management Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Profile Management icon to configure visitor tracking. Adding a Profile Item At the top of the Profile Management page, you will see an Add Profile button. Clicking this button brings up the settings for adding a new profile item. Profile Item Settings When adding a profile, the following settings are available: Name: The internal name of the profile item, used for database access. Title: The label displayed to users for this profile item (e.g., \"Full Name\"). Description: Help text displayed next to the field for user guidance. Category: The grouping name for the profile item (e.g., \"Personal Information\"). Order: The index position where this item will appear in the profile form. 0 is the first position. Length: The maximum number of characters allowed for this profile field. Set to 0 for unlimited length. Rows: The number of rows for text input. If set to more than one row, the input changes from a single-line text field to a multi-line text area. Default Value: The pre-filled value for the profile item if the user does not provide one. Options: A comma-separated list of selectable options (e.g., \"Male,Female,Other\"). Required?: Whether this field is required for the user to complete when creating their account. Validation: Optionally, provide a regular expression (RegEx) for validating the entered value (e.g., for email addresses). Autocomplete: The HTML autocomplete attribute for browser assistance with autofilling the field. Options include blank (default), 'on', 'off', or any value from the standardized taxonomy. Private?: Whether this profile field is visible to all users or only administrators. Once these settings are configured, click Save to create the profile item. You can also cancel the action or close the window by clicking the X in the top-right corner. Searching Profiles Below the Add Profile button, there is a Search input field. This allows you to search for profile items based on their Title or Category. You can enter a search term and click Search to filter the list of profile items. To reset the search results, click the Reset button. Profile List Below the search field, a list of existing profile items is displayed. For each profile item, the following properties are shown: Name: The internal name. Title: The displayed label for the profile item. Category: The group/category the profile item belongs to. Order: The position of the profile item in the list. Each profile item has two buttons: Edit: Clicking this button opens the profile settings in an editable form where you can change any of the properties. After editing, click Save to apply changes, or Cancel to discard them. You can also close the settings window by clicking the X at the top-right. Delete: Clicking the delete button opens a confirmation window asking you to confirm the deletion of the profile item. Once confirmed, the profile item is permanently deleted. Conclusion The Profile Management feature in Oqtane provides administrators with powerful tools to customize and manage user profiles. Whether you're creating new profile fields or setting validation rules, this feature is essential for tailoring the user experience on your site. Be sure to explore all options to make the most of your site‚Äôs profile management capabilities."
  },
  "manuals/admin/admin-management/recycle-bin.html": {
    "href": "manuals/admin/admin-management/recycle-bin.html",
    "title": "Recycle Bin | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Recycle Bin Overview The Recycle Bin is a valuable feature of Oqtane, especially for new users and administrators who might assume that deleted content is permanently gone. Instead of recreating deleted items, the Recycle Bin allows you to restore content, saving time and reducing frustration. The Recycle Bin manages two types of objects that can be restored: Pages and Modules. When you delete a page or a module, it appears in the corresponding list. You can switch between these lists by clicking the tabs at the top of the page. Control Panel Walk-through Accessing the Recycle Bin Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Recycle Bin icon to configure visitor tracking. Features Restore: Clicking the restore button for a selected page or module will return it to its original location on your site. Delete: The delete button permanently removes the selected page or module from your website, ensuring it cannot be restored. Tabs The Recycle Bin includes two tabs: Pages Tab In the Pages tab, you can view a list of deleted pages with the following information: Name: The title of the deleted page. Deleted By: The user who deleted the page. Deleted On: The date and time when the page was deleted. Each entry includes two buttons: Restore: Restores the selected page to its original location. Delete: Permanently deletes the page from the Recycle Bin. Modules Tab Similar to the Pages tab, the Modules tab displays a list of deleted modules with the same information as above. It also includes the same restore and delete functionality. Manage Deleted Items At the bottom of each tab, there are additional buttons: Remove All Deleted Pages: This button allows you to permanently delete all pages listed in the Recycle Bin. A confirmation window will appear before finalizing this action. Delete All Deleted Modules: This button serves the same purpose for modules, allowing you to permanently delete all modules from the Recycle Bin, accompanied by a confirmation window. Conclusion The Recycle Bin in Oqtane is an essential feature for content management, providing an easy way to recover deleted pages and modules. By using the restore functionality, administrators can efficiently manage their site's content without the hassle of recreating items. Familiarize yourself with this feature to maximize the efficiency and usability of your Oqtane site."
  },
  "manuals/admin/admin-management/role-management.html": {
    "href": "manuals/admin/admin-management/role-management.html",
    "title": "Role Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Role Management Overview The Role Management feature in Oqtane allows you to create and manage security roles, which are groupings of users assigned specific permissions or access. Roles can be used for content targeting, granting editing rights, or restricting access to certain areas of your site. Security roles operate similarly to permission-based systems: first, you create a role to group users, then add users to the group, and finally, assign the group permissions on pages or modules. Control Panel Walk-through Accessing the Role Management Feature Click the Control Panel icon to access additional settings. In the control panel, select the button to open the Admin Dashboard. In the admin dashboard, click on the Role Management icon to manage user roles. Role Management Features 1. Add Role The Add Role feature enables you to create a new user role with specific settings. Add Role Settings When you click Add Role, a window opens with the following fields: Name: The name of the role, as it will appear in the role list. Description: A brief description explaining the role's purpose. Auto Assigned?: Select Yes or No to determine whether new users are automatically assigned to this role. After filling out the settings, use the Save button to create the role, or Cancel to discard changes. You can also use the X button in the top-right corner to close the window without saving. 2. Search Roles The Search Roles function allows you to quickly find roles by name. Enter the name in the Search field and click Search to filter results, or Reset to clear the search. 3. Role List The Role List displays all existing roles, including default roles such as Administrators and Registered Users. For each role, you can perform the following actions: Action Description Edit Modify the role's name, description, and auto-assign settings (disabled for Administrators and Registered Users). Delete Permanently removes the role from the system (disabled for Administrators and Registered Users). Users Manage users within the role, including adding or removing users. 4. Edit Role Clicking the Edit button for a role opens the same window as the Add Role feature, where you can modify the role's Name, Description, and Auto Assigned settings. Note: The Edit button is disabled for system roles like Administrators and Registered Users. 5. Delete Role Clicking the Delete button will delete a role. Deleting a role removes its permissions and cannot be undone. System roles like Administrators and Registered Users cannot be deleted. 6. Manage Users in a Role The Users button allows you to add or remove users from a specific role. Clicking Users for a role opens a window where you can: User: Enter the user‚Äôs name to add them to the role. Effective Date: Set the date when the role assignment starts. Expiry Date: Set the date when the role assignment ends (optional). At the bottom of this window, you can view a list of all users currently assigned to the role. Use Save to apply changes, Cancel to discard changes, or X to close the window. Summary The Role Management feature in Oqtane allows you to organize users by roles, granting or restricting access based on the assigned role. With options to add, edit, delete, and manage users in roles, you have flexibility in setting up and controlling permissions for your site."
  },
  "manuals/admin/admin-management/search-settings.html": {
    "href": "manuals/admin/admin-management/search-settings.html",
    "title": "Search Manual | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Search Manual This document describes the Search module, settings, and configuration for administrators to set up effective search functionality across their Oqtane site. Overview The Search feature allows users to locate relevant content quickly across the site. Through scheduled indexing, the Search service keeps the content index updated. The following sections cover search settings, scheduling, and customization options for the administrator. Search Settings Administrators can configure the Search module through Host > Search Settings. Below are explanations for each setting: Setting Description Search Provider Specifies the provider responsible for indexing and retrieving search results. Example: DatabaseSearchProvider. Enabled Toggles the search feature on or off. When set to Yes, the site content is regularly indexed, and search queries return up-to-date results. Last Indexed Displays the last date and time the site was indexed. This helps administrators know the freshness of indexed data in search results. Ignore Pages A list of pages excluded from indexing. Prevents certain content from appearing in search results, e.g., pages with sensitive or irrelevant content. Ignore Entities Specifies types of entities to exclude from indexing, such as Modules or Users. Word Length Defines the minimum character length for words indexed in search results. Only words meeting or exceeding this length will be indexed. Ignore Words Commonly ignored words in search queries (e.g., \"and,\" \"the\"). This list helps refine search results by avoiding indexing or returning results for these words. Search Components Search.resx File The .resx file includes localization data for search terms and placeholders in the search UI. Examples include: <data name=\"Search\" xml:space=\"preserve\"> <value>Search</value> </data> <data name=\"SearchPlaceHolder\" xml:space=\"preserve\"> <value>Search</value> </data> Configuring Search in Oqtane This guide provides a step-by-step walkthrough for configuring the search functionality in Oqtane. 1. Accessing the Search Feature in the Default Theme To get started, locate the search feature in the navigation bar of the default theme. 2. Opening the Control Panel Next, click the control panel icon to access additional settings. 3. Navigating to the Admin Dashboard In the control panel, select the button to open the admin dashboard, where you can manage various site settings. 4. Accessing Search Settings Finally, in the admin dashboard, click on the search settings icon to configure your search options. Configuring Search Settings Once in the search settings, you can adjust various parameters to customize how the search operates on your site. Using the Reindex Button After configuring your search settings, you may need to reindex your content to ensure that the latest changes take effect. Reindex Button Description The Reindex button initiates the process of scanning your site's content and updating the search index accordingly. This is essential after making changes to your site's content, structure, or search settings. How to Use the Reindex Button Navigate to the search settings page as described in the previous sections. Locate the Reindex button on the settings page. Click the Reindex button to start the indexing process. Note: Depending on the amount of content on your site, the reindexing process may take some time. You will receive a notification once the process is complete."
  },
  "manuals/admin/admin-management/site-settings.html": {
    "href": "manuals/admin/admin-management/site-settings.html",
    "title": "Site Settings | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Settings Overview The Site Settings feature allows you to perform high-level administrative configurations for your site. This includes basic settings, SMTP configuration, and progressive web app (PWA) settings. Most options are set-it-and-forget-it and should be configured once when building your site. Control Panel Walk-through Accessing the Site Settings Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Site Settings icon to configure visitor tracking. Site Settings The Site Settings management feature includes foundational settings for your site. Name: Enter the site name. Home Page: Select the home page for the site (to be used if there is no page with a path of '/'). Deleted?: Indicates whether the site is deleted. Site Map: The site map URL for this site, which can be submitted to search engines for indexing. ID: The unique identifier for the site. Version: Site version for content migrations. Appearance The Appearance section includes options related to the visual representation of your site. Logo: Specify a site logo using the file manager for easy selection, upload, and deletion. Favicon: Specify a favicon with the same file manager options as the logo. Default Theme: Select the site‚Äôs default theme. Default Container: Choose the default container for the site. Default Admin Container: Select the default admin container for the site. Functionality The Functionality section allows you to configure essential site functionalities. Text Editor: Select the text editor for the site (default is the QuillJS editor). For more information, see the HTML Text Editor Documentation. Image Extensions: Enter a comma-separated list of allowed image extensions. Uploadable File Extensions: Enter a comma-separated list of allowed uploadable file extensions. Page Content The Page Content section lets you define additional content that can be included in your pages. Head Content: Optionally enter content to be included in the page head (e.g., meta, link, or script tags). Body Content: Optionally enter content to be included in the page body (e.g., script tags). SMTP Settings Please Note That SMTP Requires The Notification Job To Be Enabled In Scheduled Jobs Host: Enter the hostname of the SMTP server. Port: Enter the port number for the SMTP server. This field is required if you provide a host name. SSL Enabled: Specify yes or no. Username: Enter the SMTP server username. Password: Enter the SMTP server password. Email Sender: Enter the email address from which emails will be sent. This email address may need to be authorized with the SMTP server. Relay Configured?: Only specify this option if you have properly configured an SMTP Relay Service to route your outgoing mail. This will send notifications from the user's email rather than from the Email Sender specified above. Enabled?: Specify yes or no to enable SMTP. Retention (Days): Enter the number of days to retain notifications. Test SMTP Configuration: Button to test the SMTP configuration. PWA Settings The PWA Settings section allows you to configure the Progressive Web Application capabilities of your site. Is Enabled?: Choose whether the site will be available as a Progressive Web Application (PWA). App Icon: Upload an application icon for your PWA (PNG, 192 x 192 pixels). Splash Icon: Upload a splash icon for your PWA (PNG, 512 x 512 pixels). Conclusion Configuring the Site Settings correctly is crucial for the proper functioning and appearance of your site. Ensure all options are set according to your site's requirements, especially the SMTP settings for email functionality and PWA settings if you wish to enable a progressive web application experience. For further assistance, refer to other sections of the Oqtane documentation."
  },
  "manuals/admin/admin-management/url-mappings.html": {
    "href": "manuals/admin/admin-management/url-mappings.html",
    "title": "URL Mappings Manual | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "URL Mappings Manual This document describes the URL Mappings module, settings, and configuration for administrators to manage URL redirections effectively across their Oqtane site. Overview The URL Mappings feature allows administrators to define mappings from one URL to another, enabling effective redirection strategies. This feature is useful for managing broken links, ensuring users are directed to the correct resources. Control Panel Walkthrough Accessing the URL Mappings Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the URL Mappings icon to configure your URL mappings. Configuring URL Mappings Once in the URL Mappings settings, administrators can view and manage URL mappings. Managing Mapped URLs The Mapped URLs tab displays all existing URL mappings, including the original URL, the mapped destination, the number of requests, and the last requested date. You can choose to view either mapped URLs or broken URLs using the dropdown select menu. Use the Add URL Mapping button to create a new mapping. This will open a popup modal for adding a mapped URL. Reviewing and Editing URL Mappings After adding a URL mapping, it will appear in the list below the search feature. You can select an existing URL mapping to edit or delete it if it is no longer needed. Managing Broken URLs Switch to the Broken URLs tab using the dropdown select menu. This will display all captured broken URLs that require attention. You can edit or delete broken URLs as necessary to redirect them accordingly. URL Mapping Settings Administrators can configure the URL Mappings module through Host > URL Mappings. The primary setting available is: Setting Description Capture Broken URLs? Toggles the feature to automatically capture and save broken URLs in the URL Mappings. When set to Yes, any broken link encountered will be recorded for further management. In the Settings tab, administrators can toggle the Capture Broken URLs setting. Set this option to Yes to automatically capture broken URLs when they are accessed. Click the Save button to apply changes. Conclusion The URL Mappings module in Oqtane provides an effective way for administrators to manage URL redirection strategies. By leveraging the features outlined in this manual, site administrators can enhance user experience and maintain the integrity of web links across their sites."
  },
  "manuals/admin/admin-management/user-management.html": {
    "href": "manuals/admin/admin-management/user-management.html",
    "title": "User Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "User Management Overview The User Management feature in Oqtane provides administrators with a centralized interface to manage site users. Here, you can add new users, edit profiles, assign roles, and delete accounts. The User Management feature is organized into two primary tabs: Users Tab - Manage individual users by adding, editing, deleting, and assigning roles. Settings Tab - Configure global settings related to user profiles and management options. This guide will walk you through each section, detailing how to utilize the User Management feature fully. Control Panel Walk-through Accessing the User Management Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the User Management icon to configure user settings and manage site users. Users Tab Adding a New User Click the Add User button to open a new window. In the Identity tab, fill in the following information: Username Email Full Name Notify: Select Yes or No to notify the user upon account creation. Switch to the Profile tab to input additional details, such as address, phone number, and other optional information. After entering the necessary information, click Save to create the user, or Cancel to discard the changes. Importing Users Click the Import Users button to add multiple users from a file. In the import window, specify the file source and file name. Folder: Choose the folder where the file is located. File: Select the file to import users. Notify: Choose Yes or No to send notifications to the users being imported. Click Upload to load the file, then click Import to add users in bulk. If you don‚Äôt have a template, you can download one by clicking the Template button. Below is an example of what the text file will look like: Searching for Users Use the search field to locate a user by Username, Email, or DisplayName. Click Search to filter results or Reset to clear the search input. Editing Users To modify a user‚Äôs information, locate the user in the list and click Edit. The Edit User window includes: Identity tab: Edit username, password, email, and name. Profile tab: Update profile details such as address, phone number, and other custom fields. Click Save to apply the changes or Cancel to discard them. Deleting Users Click Delete next to a user in the list to remove their account. Confirm the deletion in the pop-up confirmation window. Assigning User Roles Click the Roles button next to a user to manage their assigned roles. In the User Roles window: User: Displays the user‚Äôs name. Role: Select a role to assign from a dropdown list. Effective Date: Choose a start date for the role. Expiry Date: Set an expiration date for the role (optional). Roles currently assigned to the user are listed below with their effective and expiry dates. You can remove roles from this list if needed. Click Save to confirm the role assignment or Cancel to exit without changes. Settings Tab The Settings Tab within the User Management feature allows administrators to configure site-wide user settings. The following options are available: Allow Registration: Description: This setting determines whether anonymous visitors can register for an account on the site. Options: Yes: Visitors can create accounts. No: Registration is disabled. Tip: Allowing registration can help increase user engagement by letting visitors create personalized accounts. Allow Login: Description: This option specifies if users are permitted to sign in using a username and password that is managed locally on the site. Options: Yes: Users can log in with their local account credentials. No: Local login is disabled. Use this option with caution; only disable if you have successfully configured an external login provider, as it may lock you out of the site. Warning: Ensure that an external login provider is properly set up before disabling local login to avoid losing access to the site."
  },
  "manuals/admin/admin-management/visitor-management.html": {
    "href": "manuals/admin/admin-management/visitor-management.html",
    "title": "Visitor Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Visitor Management The Visitor Management feature in the Oqtane admin dashboard allows administrators to track and manage site visitors effectively. This feature is accessible via the admin dashboard under Admin > Visitor Management. Overview The Visitor Management feature provides tools for monitoring and managing visitor data on your site, helping administrators understand user interactions and enhance site performance. Control Panel Walkthrough Accessing the Visitor Management Feature Click the control panel icon to access additional settings. In the control panel, select the button to open the admin dashboard. In the admin dashboard, click on the Visitor Management icon to configure visitor tracking. Tabs Overview The Visitor Management module consists of two main tabs: Visitors and Settings. 1. Visitors Tab The Visitors tab displays a list of site visitors and provides options to filter the displayed visitors based on type and time period. Dropdown Selections Visitor Type: Select the type of visitors to display. All Visitors: Shows all visitors to the site. Users Only: Filters to show only registered users. Period: Choose the time period for which visitors are displayed. Past Day: Shows visitors from the last 24 hours. Past Week: Shows visitors from the last week. Past Month: Shows visitors from the last month. Visitor List Below the dropdown selections, a list of visitors is displayed, showing the following details: Detail IP Address User Language Visits Visited Created Details Button Visitor IP Address Visitor Username Visitor Language Number of Visits Last Visited Date Created Date Each entry includes a Details button that opens a detailed view of the selected visitor's information. 2. Settings Tab The Settings tab allows administrators to configure visitor tracking settings. Settings Fields Tracking Enabled: Specify if visitor tracking is enabled (Yes/No). Session Duration: Set the duration (in minutes) that is considered a distinct visit. Filter: Provide a comma-separated list of terms that should not be tracked in visitor data (e.g., specific IP addresses or user agents). Retention: Define the number of days to retain visitor activity data. Correlate Visitors: Specify whether new visitors should be correlated based on their IP address (Yes/No). Save Changes A Save button is provided at the bottom of the Settings tab to apply any changes made to the visitor tracking settings. Conclusion The Visitor Management feature provides essential tools for monitoring and managing visitor data on your site, helping administrators to understand user interactions and enhance site performance."
  },
  "manuals/admin/content-management/content-editor.html": {
    "href": "manuals/admin/content-management/content-editor.html",
    "title": "Content Editor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Content Editor The Content Editor allows you to edit the modules on the page in various ways. You can access the Content Editor by clicking on the pencil icon located at the top right side of the page. This action will display the borders of the content panes where the modules are placed and a small downward-pointing arrow next to each module, enabling you to open a menu for module interaction. Click on this icon button to enable the Content Editor. Click on this button again to disable the Content Editor. Notice how the appearance of the pencil icon changes between enabled and disabled states. When the Content Editor is enabled, borders around each content pane are displayed, indicating the layout of the theme. The visible borders help you understand the layout of the page when in edit mode. Pane Header When the Content Editor is activated, the top header of the pane is displayed, showing the name of the pane: Module Menu Options When you click the downward-pointing \"caret-bottom\" arrow next to a module, you have access to the following options: Manage Settings: Opens the module's settings and permissions, allowing you to change the: Title: The title displayed above the module. Container: Specify whether you want the title to be displayed for the module. Display on All Pages: Choose whether this module should appear on every page of the site. Page: Change the page on which the module is displayed. Permissions: Specify which roles or individual users can view or edit the module. Unpublish Module: Hides the module from all users except site administrators, useful for when you want to make edits without public visibility. Delete Module: Permanently removes the module from the page. Import Content: Enter a file's address (e.g., an image URL) to import it into the module. Export Content: Specify a file address to determine where to export data from the module. Move to Top: Moves the module to the top of the page, making it the first displayed module. Move Up: Moves the module up one position, placing it above the module currently above it. Move Down: Moves the module down one position, placing it below the module currently below it. Move to Bottom: Moves the module to the bottom of the page, below all other modules. Move Options: When you select \"Move to,\" additional options will be available, allowing you to choose a specific pane for the module. If the page layout includes multiple panes (e.g., three center rows, a top row, and a bottom row), you can select from various options to reposition your module across these panes: Move to Top Pane: Moves the module to the content pane at the top of the page. Move to Left Pane: Moves the module to the left-most column. Move to Right Pane: Moves the module to the right-most column. Move to Content Pane: Moves the module to the central column. Move to Bottom Pane: Moves the module to the content pane at the bottom of the page. The Move to Pane feature is adaptable to different themes, and the available panes vary depending on the layout provided by the theme. In the example shown in the image, you‚Äôll see a variety of pane options that a more complex theme might offer, giving administrators greater flexibility in organizing modules. For instance, the default Oqtane theme includes not only standard rows and columns but also numerous additional panes, which allow for a wide range of layout possibilities. While simpler themes may only display a few basic options, the default theme might provide over 20 panes, including: Full-Width Panes: These panes span the entire width of the page. Examples include: Top Full Width Pane: A full-width pane at the top of the page. Bottom Full Width Pane: A full-width pane at the bottom of the page. 100% Width Panes: These also span the full width, but are distinct from other full-width panes in terms of placement: Top 100% Pane: Positioned below the top full-width pane, occupying the full page width. Bottom 100% Pane: Positioned above the bottom full-width pane, also spanning the entire page width. 50%/50% Split Panes: Divide the page into two equal sections: Left 50% Pane and Right 50% Pane. 33%/33%/33% Split Panes: For a balanced three-column layout: Left 33% Pane, Center 33% Pane, and Right 33% Pane. 25%/25%/25%/25% Split Panes: For a four-column layout: Left Outer 25% Pane, Left Inner 25% Pane, Right Inner 25% Pane, and Right Outer 25% Pane. Asymmetrical Ratios: Options like: Left 66% Pane and Right 33% Pane. Left 33% Pane and Right 66% Pane. Footer Pane: An additional pane often reserved for footer content. These pane options let administrators place modules precisely within the layout structure, which is divided into sections adding up to 100% of the layout width. The image shows this range of options, giving a visual reference of the Move To > menu options when working with themes that support complex layouts. This flexibility enables customized content presentation to best suit each page‚Äôs design."
  },
  "manuals/admin/content-management/control-panel.html": {
    "href": "manuals/admin/content-management/control-panel.html",
    "title": "Control Panel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Control Panel Site administration in Oqtane involves using features like managing users, security, settings, configurations, and content to effectively run a website. The Control Panel is a primary tool for handling these tasks, providing options to manage pages, modules, and access site settings. Users with the Administrators role can access the Control Panel by logging in with an account that has the appropriate permissions for site administration. This guide provides instructions on accessing the Control Panel, adding and managing pages and modules, and includes logout instructions. Accessing the Control Panel To open the Control Panel: Log in to Oqtane: Ensure that you're logged in with a user account assigned to the Administrators role. Click the Control Panel Icon: Once logged in, you‚Äôll see the Control Panel icon. Click this icon to open the Control Panel menu. This will expand the menu and provide access to various management features within the Control Panel. Control Panel Options Once the Control Panel is open, several administrative options become available: Page Management: Allows users to add, edit, delete, and publish pages. For more detailed information, visit this section's Control Panel Page Management Documentation. Module Management: Provides tools for adding, editing, and deleting modules on a page. For more detailed information, visit this section's Control Panel Module Management Documentation. Logout: An option to securely log out of Oqtane. Summary The Control Panel is an essential component for site administration in Oqtane, enabling users to effectively manage their website's structure and content. By utilizing the Page Management and Module Management features, administrators can ensure their site operates smoothly and meets user needs."
  },
  "manuals/admin/content-management/html-text-editor.html": {
    "href": "manuals/admin/content-management/html-text-editor.html",
    "title": "HTML/Text Editor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "HTML/Text Editor The HTML/Text Editor module in Oqtane enables you to create, edit, and restore content using a rich text editor (WYSIWYG) and a raw HTML editor. This module is ideal for exploring Oqtane‚Äôs editing and content management features, including moving modules between panes, configuring settings, and managing roles. To access the HTML/Text Editor: Enter Content Editor mode by clicking the pencil icon. Click the Edit Content button on the module to open the HTML/Text Editor. The editor has two main tabs: Edit ‚Äì Contains content editing tools. Versions ‚Äì Manages past content versions with options to view, restore, and delete. Edit Tab The Edit tab provides three sub-tabs for different editing options: Rich Text Editor ‚Äì A WYSIWYG editor powered by QuillJS (v1.3.7), providing an easy way to format content visually. Raw HTML Editor ‚Äì Enables direct HTML editing for more control over the source code. Settings ‚Äì Provides configuration options for the editor‚Äôs features. Rich Text Editor Settings In the Settings sub-tab, you can customize the editor with the following options: Enable Rich Text Editor? - Yes Enable Raw HTML Editor? - Yes Insert Images? - Yes Theme: Options like \"snow\" theme Debug Level: Example setting \"info\" Toolbar Content: Define the editor‚Äôs toolbar Each editor (Rich Text and HTML) includes an \"Insert Image\" button that opens a dialog with the following options: Select Folder ‚Äì Choose the folder where images are stored. Select File ‚Äì Pick an image file from the selected folder. Once an image file is selected, click the Insert Image button. Upload File ‚Äì Upload new images to the selected folder by using Choose File and Upload buttons. If you encounter issues with uploading files, see the Troubleshooting File Manager guide. After uploading the image to the selected folder, click the Insert Image button. Saving Edits After making changes in the editor, click the Save button to confirm and save the settings and content updates. Versions Tab The Versions tab displays a list of previous content versions, along with: CreatedOn ‚Äì The date each version was created. CreatedBy ‚Äì The user who created the version. Each version offers the following actions: View ‚Äì Shows the selected version‚Äôs content. Below is an example of what the View button will display at the bottom of the modal window. Restore ‚Äì Restores the module content to this version. After clicking Restore, you will be prompted to confirm. To proceed, click the Restore button in the confirmation window. Delete ‚Äì Removes the selected version from the list. After clicking Delete, you will be prompted to confirm. To proceed, click the Delete button in the confirmation window."
  },
  "manuals/admin/content-management/index.html": {
    "href": "manuals/admin/content-management/index.html",
    "title": "Content Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Content Management Introduction When managing your Oqtane site as an administrator, most of your daily tasks will likely involve the Control Panel. As an administrator, you have access to nearly every feature of the Control Panel. Access the Control Panel via the gear icon located in the top right-hand corner of the screen. The Control Panel provides tools for: Control Panel Page Management Module Management Content Editor HTML/Text Editor In Oqtane, users with content management permissions, defined by their roles, are referred to as ‚Äúcontent editors.‚Äù Content editors typically access only the necessary sections of the Control Panel to perform tasks like adding or editing a module on a page. The Control Panel provided with Oqtane is the default, but it can be replaced with a custom or third-party option, like other extensions in Oqtane such as modules, themes, and more."
  },
  "manuals/admin/content-management/module-management.html": {
    "href": "manuals/admin/content-management/module-management.html",
    "title": "Module Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Management Modules are a key feature of Oqtane, allowing you to insert a diverse array of components into your web pages. With a variety of modules available, you can customize your site extensively. Administrators have the ability to download new modules or upload custom modules to the marketplace, which can be accessed via the Host user Admin Dashboard's Module Management feature. Accessing Module Management To access the Module Management feature in the Control Panel: Log in to Oqtane with an account assigned to the Administrators role. Click the Control Panel Icon: Once logged in, click the Control Panel icon to open the Control Panel menu. Select Module Management: Click on the Module Management option in the Control Panel. Module Management Options In the Control Panel‚Äôs Module Management section, you have the following options: Add New Module This option allows you to place a new module of your choice onto the page: Select Category: Admin Modules: Modules available only to users with the Administrator role. Common Modules: Modules accessible to both Administrators and registered users. Select Module: Choose a module from the selected category. Enter Module Details: Title: The title displayed above the module. If left blank, the module‚Äôs name will serve as the title. Pane: Select the content pane where the module will be placed, organized by modules in the pane. Location: Set the location of the module as \"Top\" or \"Bottom\" inside the pane . Container: Choose a theme container for the pane. Visibility: Options to set visibility as \"Same As Page\" or \"Page Editors Only.\" Add Existing Module This option allows you to select modules that are already present on other pages of your website: Select Page: A dropdown list of your other web pages from which you can select a page containing the desired module. Select Module: A list of modules available on the selected page for you to choose from. Copy Existing Module This option allows you to copy a module from another page: Select Page: A dropdown list of your other web pages from which you can select a page containing the desired module. Select Module: A list of modules available on the selected page for you to choose from, allowing you to replicate functionality on your current page. When a module is selected, its description will appear in a purple box, providing clarity on its purpose."
  },
  "manuals/admin/content-management/page-management.html": {
    "href": "manuals/admin/content-management/page-management.html",
    "title": "Control Panel Page Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Control Panel Page Management The Page Management feature allows you to manipulate the page you are currently on by providing options for adding, editing, deleting, and publishing pages. This feature shares many capabilities with the admin dashboard's Page Management feature, but is limited to changing the page you are currently managing. Add The Add feature allows you to create a new page on your website. When you select this option, a page management window will appear, enabling you to specify the following settings: Add Page Configration Settings Name: The name displayed in the navigation bar. Parent: The page that this new page will fall under in the navigation structure. Insert: Specifies the position of the page among its siblings under the selected parent. Navigation: Determines if the page should be visible to users with appropriate permissions or hidden from everyone but administrators. URL Path: Sets the URL for the page. If no path is specified, it defaults to the name. Redirect: URL to redirect users if this page is accessed. If set, you will need to use the admin dashboard‚Äôs page management feature to manage this page further. Appearance Title: Name displayed on the web browser tab. Theme: Select a theme from those available in the theme management. Layout: Number of content panes (columns) available on the page. Default Container: Layout style for module titles above the content. Icon: URL for a favicon or other icon associated with the page. Personalizable: Allows users to customize the page uniquely for themselves. Page Content Head Content: Optionally enter content to be included in the page head (ie. meta, link, or script tags) Body Content: Optionally enter content to be included in the page body (ie. script tags) Permissions View: Controls which user roles can see the page, based on settings in the admin dashboard‚Äôs role management feature. Edit: Grants specified roles permission to edit pages using the content editor. Specific Users: Custom permissions can be assigned to individual users. Edit The Edit feature provides similar functionality to the Add feature but modifies the current existing page instead of creating a new one. This section allows you to update the settings, including the appearance, permissions, modules, and theme settings of the current page. The settings configuration has the Insert field replaced by a Move feature to adjust the page's position in the navigation. Additionally, the edit panel displays the creation date and last edited date for the page at the bottom. To edit the page: Click on the Edit button located in the control panel. Modify the settings, permissions, modules, and theme settings. Settings As described in the Add section, you can modify the page's name, parent, navigation visibility, URL path, and redirect options. The only difference is that the Insert field is replaced by a Move feature for adjusting the page's position in the navigation. Permissions Permissions work the same as in the Add feature, allowing you to control which users can view or edit the page. Modules This tab allows you to manage the modules on the page, giving you the ability to modify or reorder existing modules. This provides a more granular control over the content displayed on your page. Edit: Access the module‚Äôs configuration to modify settings, permissions, and layout. Delete: Remove the module from the page. Theme Settings In the Theme Settings tab, you can adjust the theme and layout of the page. This includes options for the page‚Äôs appearance, such as selecting a different theme or changing layout configurations. Setting Scope: Choose between Site or Page for theme application scope. Show Login?: Toggle login visibility (options: Not Specified/Yes/No). Show Register?: Toggle registration visibility (options: Not Specified/Yes/No). Display Fixed Footer?: Toggle a fixed footer (options: Not Specified/Yes/No). By using the Edit feature, you can effectively customize the current page, ensuring that it meets your requirements and reflects any necessary changes. Delete The Delete feature allows you to permanently remove the page you are currently managing. To delete the page, simply click the Delete button. Warning: This action is irreversible. Ensure that the page is no longer needed before proceeding. Publish/Unpublish The Publish feature enables you to make a page public if it was previously marked as hidden. This is particularly useful for working on a page that you want to keep inaccessible to regular users until it is fully prepared for release. To toggle the publish status, click the Publish button, which will switch between publishing and unpublishing the page. Creating an Admin Dashboard Page If you wish to add a custom page to the Admin Dashboard, you can do so through Page Management by setting the Parent page to \"Admin\" when adding a new page. This action designates the new page as part of the Admin Dashboard, making it accessible only to administrators. Creating admin-specific pages expands the available tools for site management and customizes the Admin Dashboard. For more information on extending the Admin Dashboard, refer to the Admin Management documentation. This detailed overview of the Page Management feature provides administrators with the essential tools to manage individual pages effectively. Each button feature is clearly defined to enhance user understanding and facilitate efficient page management."
  },
  "manuals/admin/host-management/event-log.html": {
    "href": "manuals/admin/host-management/event-log.html",
    "title": "Event Log | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Event Log Overview The Event Log provides a centralized record of events occurring on your website, allowing you to monitor site activity and troubleshoot as needed. It is designed to be both simple and effective for viewing and managing events. Control Panel Walk-through Accessing the Event Log Feature Open the Control Panel: Click the control panel icon to access additional settings. Open the Admin Dashboard: In the control panel, select the Admin Dashboard button. Select the Event Log: In the Admin Dashboard, click on the Event Log icon to view and configure event logging. Event Log Features Upon opening the Event Log, you‚Äôll see a list of recent events by default, displayed in pages with 10 entries per page. You can adjust the page size to view more events at a time. Filtering Events At the top of the Event Log, three main filters help refine the log view: Level: Filter events by severity level, including: Trace Debug Information Warning Error Critical Function: Filter events by action type, which is color-coded for easier tracking: Create Read Update Delete Security Other Maximum Items: Choose how many rows you would like displayed per page. For example, to view login attempts only, set Function to Security. For broader viewing, increase Maximum Items to display up to 100 events on a single page. Event Log Pagination Use the paging feature at the bottom of the list to navigate between pages if there are more events than can fit in one view. Viewing Event Details For a closer look at any event, click the Details button next to it. This opens a detailed view of the event, including where it occurred and a description of the action. To exit, click the Cancel button or the X in the top right corner. Event Log Settings The Event Log has configurable settings to manage data retention. Settings Retention (days): Specify how many days events should be stored. After configuring, click Save to apply your settings. Clearing The Event Log To clear all events from the log: Click the Clear Events button in the settings. Confirm by selecting Clear Events in the confirmation window. Summary The Event Log feature enables efficient monitoring of your site‚Äôs events. Utilize filters, pagination, and detail views to gain insights, troubleshoot issues, and keep your site secure. Configure settings as needed for optimal event data retention and manage the log by clearing old events when necessary."
  },
  "manuals/admin/host-management/index.html": {
    "href": "manuals/admin/host-management/index.html",
    "title": "Host Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Host Management Introduction The Host Dashboard in Oqtane provides hosts with an extensive set of tools to oversee, configure, and support the entire Oqtane instance. Host users possess the highest level of permissions, allowing them to manage global settings, monitor system performance, and maintain the instance across all sites. Hosts log in just as other users do, using the designated host account created during the initial launch of Oqtane. However, hosts have access to exclusive features within the Admin Dashboard that provide additional control over Oqtane‚Äôs configuration and functionality. Control Panel Admin Dashboard Feature Walk-through The Control Panel offers streamlined access to host settings and features: Open the Control Panel: Click the gear icon in the top-right corner of the page. Open Admin Dashboard: Select the Admin Dashboard button to access host tools. Navigate to Desired Feature: Within the Admin Dashboard, you‚Äôll find icons for each available feature. Click on the desired feature to begin management. Host-Exclusive Admin Dashboard Features The following tools are available only to host users and provide advanced control and oversight of the Oqtane instance. Each link below directs to detailed documentation for that feature. Host Dashboard Features Event Log: Review records of all events within the Oqtane instance, including errors, updates, and deletions, aiding in troubleshooting and system monitoring. Site Management: Create and manage multiple sites within the Oqtane instance, setting defaults for new site creation. Module Management: Install, edit, and manage modules across all sites, ensuring modular control of site functionality. Theme Management: Install and manage themes to maintain a consistent visual style across sites. Scheduled Jobs: Configure jobs to run at specified intervals, automating recurring tasks and maintenance actions. SQL Management: Execute SQL queries directly in the Oqtane database for advanced data manipulation and reporting. System Info: Access detailed information on the Oqtane instance, including framework versions, environment details, and API methods. System Update: Update the Oqtane framework to the latest version, integrating new features and security patches from NuGet packages. Extending Host Capabilities The Host Dashboard is customizable, allowing hosts to add new tools or features to support site-wide administration. To add custom pages for host use: Access the Control Panel: Log in as the host, click the gear icon, and navigate to Page Management. Create a New Host Page: Click Add in the Page Management section. Set the Parent Page to Admin to make the new page accessible in the Host Dashboard. Configure other page settings, such as title and permissions, to tailor the page to host needs. Save and Confirm: Once saved, the new page will be available in the Host Dashboard. For more details on page configuration, see the Content Management - Page Management documentation. Additional Resources Installation Guides: Step-by-step instructions for initial Oqtane setup, including configuration specifics. Troubleshooting Issues: Solutions for common issues encountered during setup and maintenance. For community discussions, support, and feature requests, visit: GitHub Discussions GitHub Issues"
  },
  "manuals/admin/host-management/language-management.html": {
    "href": "manuals/admin/host-management/language-management.html",
    "title": "Language Management (Host Management) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Language Management (Host Management) This document describes the Language Management module, including settings and configurations, allowing administrators and host users to manage language resources effectively across their Oqtane site. Overview The Language Management feature enables administrators to manage translations and make site content available in multiple languages, enhancing accessibility and user experience. Control Panel Walkthrough Accessing the Language Management Feature Click the Control Panel icon to access additional settings. In the control panel, select the button to open the Admin Dashboard. In the Admin Dashboard, click on the Language Management icon to configure language resources. Configuring Language Management For most Language Management features, refer to the Admin Management Language Management documentation. Here‚Äôs an overview of the key areas covered there: Main Index Page: Lists all installed languages, allowing users to edit or delete (except for the default English language). Adding a Language: Provides a modal to add a new language by name and set it as the default. Searching Languages: Filters the list of installed languages for easy management. Editing and Deleting Languages: Enables users to modify or remove languages as needed. For further details on these features, see the Admin Management Language Management page. Host-Specific Language Management Feature: Uploading Languages In addition to the standard features available to admins, Host users can upload new translation packages to the application, adding multiple languages efficiently. Uploading a Language When you click the Add Language button, a new Upload tab is available specifically for Host users, providing a file upload feature. Upload Tab Navigate to the Upload tab to access the upload feature. Use the Upload feature to add one or more translation packages. This allows you to quickly expand language options by uploading pre-configured translation files. If you decide not to proceed, select the Cancel button at the bottom left or the X icon at the top right of the window to exit the upload window without making changes. Conclusion The Language Management module in Oqtane offers an accessible interface for managing language resources and translations. Host users benefit from additional features, such as uploading translation packages, which allows for efficient multilingual site configurations. For a detailed breakdown of the Admin Management settings, visit the Admin Management Language Management documentation."
  },
  "manuals/admin/host-management/module-management.html": {
    "href": "manuals/admin/host-management/module-management.html",
    "title": "Module Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Management Overview The Module Management feature lists all the modules currently installed in your Oqtane framework. Modules provide essential functionality and allow various features to be added to your pages. At the top of the Module Management page, there is an Install button that lets you add new modules. Modules can be installed either from a pre-configured list or by uploading a NuGet package, allowing it to be included among the available modules for your site. Within the list of modules, you‚Äôll find options to Edit modules, which displays module details and provides options to delete non-default Oqtane modules. Accessing the Module Management Feature Open the Control Panel: Click the control panel icon to access additional settings. Open the Admin Dashboard: In the control panel, select the Admin Dashboard button. Select Module Management: In the Admin Dashboard, click on the Module Management icon. Installing Modules Using the Marketplace Click the Install Module button to open the module installation options. Browse Marketplace: Select the Marketplace tab to explore available modules, which may include both open-source and commercial options. Choose Open Source or Commercial Modules: The marketplace allows you to filter between Open Source and Commercial modules, streamlining your search. Search Feature: Use the search box to quickly locate specific modules by name. Sort Feature: Sort available modules by various options to find exactly what you need. Uploading a Module Alternatively, upload a module directly by using the Upload tab. This option allows you to add a NuGet package as a new module to your site. Module Management Filter List You can filter the list of modules by category to simplify navigation. Editing Modules To modify a module‚Äôs settings, click the Edit button next to the module you want to adjust. Definition Tab The Definition tab shows the module‚Äôs core details, including its description and version information. Permissions Tab The Permissions tab lets you configure user access for the module, including options to add users with specific permissions. Add User Permission: Assign roles and permissions for accessing or managing the module. View/Edit Permissions: Adjust existing permissions as needed for your module. Pages Tab Use the Pages tab to view and link to a specific page on your site with the module using the Browse button . Translations Tab The Translations tab allows you to manage localization for the module, ensuring it‚Äôs accessible in multiple languages if necessary. Creating a Module The Create Module button allows you to develop custom modules for your site, enhancing its functionality. When creating a module, you will be prompted to configure several settings: Owner Name: Enter the name of the organization creating the module (e.g., \"YourCompanyName\"). Avoid spaces, punctuation, and the term \"oqtane.\" Module Name: Specify a unique name for the module, following similar naming guidelines as for the owner name. Description: Provide a brief description of the module's purpose and functionality. Template: Select a module template from the list. Templates are stored in the server directory at wwwroot/Modules/Templates. Framework Reference: Choose the desired framework reference version. The default is \"Installed Version,\" but previous framework versions are also available. After entering in the information Location text field shows up in the window displaying where the module will be created prior to clicking create module. After completing the settings, finalize the module creation by clicking Create Module. To exit the window click the Cancel button or the X icon located on the top right of the window. Upon success, a notification confirms that the module was created and you will be asked to compile the module project and then restart to start working with your module in the application framework. Warning: Module Creation in Production Environments Module creation should be reserved for development environments. Avoid creating or developing modules directly in a production environment as it can impact performance, stability, and security. Developing and testing modules in a controlled setting first helps ensure they work as expected when deployed on a live site. Conclusion The Module Management feature provides a straightforward way to manage, install, and create modules to enhance your Oqtane site's functionality. Whether you're installing modules from the marketplace, uploading custom modules, or creating your own, this feature helps you add powerful tools and features to your site. Use the editing tools to fine-tune existing modules or start from scratch with a new module to meet your needs."
  },
  "manuals/admin/host-management/scheduled-jobs.html": {
    "href": "manuals/admin/host-management/scheduled-jobs.html",
    "title": "Scheduled Jobs | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Scheduled Jobs Overview The Scheduled Jobs feature in Oqtane allows you to manage recurring, scheduled tasks that are automatically executed at specified intervals. This is useful for automating tasks such as sending notifications to users or any other batch processing task that should occur on a schedule. Accessing the Scheduled Jobs Feature Open the Control Panel: Click the control panel icon to access additional settings. Open the Admin Dashboard: In the control panel, select the Admin Dashboard button. Select Scheduled Jobs: In the Admin Dashboard, click on the Scheduled Jobs icon to access the configuration settings. Scheduled Jobs Options On the Scheduled Jobs page, you have the option to configure and manage jobs with the following fields: Add Job Name: Enter a name for the scheduled job. Type: Select the type of the job. You can use the pre-configured NotificationJob or create a custom job by specifying the location of your job method, for example, Oqtane.Infrastructure.NotificationJob, Oqtane.Server for a notification job. Enabled: Set this to Yes to activate the job or No to deactivate it. Runs Every: Choose how often the job should run (e.g., daily, weekly, etc.). Starting: Enter the date and time when the job should begin executing. Ending: Enter the date and time when the job should stop executing. Retention Log: Specify the number of logs to retain for the job. Older logs will be discarded once the retention limit is reached. View Logs You can view the logs of all scheduled jobs. View Logs: Click on View Logs to see the logs generated by your jobs. The logs are retained according to the specified retention number. Refresh To refresh the page and get the latest logs: Refresh: Click the Refresh button to reload the page and display any new logs that have been generated. Options for Existing Jobs The scheduled jobs are listed below, with options to manage them: Edit: Modify job settings, including the next execution date. The fields available when editing are the same as those when adding a new job, but with an additional field for Next Execution. Next Execution: Specify the date and time for the next job run after stopping the job. Delete: Remove the job, preventing it from executing again. Log: View the logs generated by a specific job. Stop: Temporarily stop a job. It will not run again until the Next Execution date is specified in the Edit window. Search Jobs You can search for a specific job by name using the search feature. Restart After Installation to Activate After installing or modifying jobs, a notification may appear prompting you to restart the application to activate changes."
  },
  "manuals/admin/host-management/site-management.html": {
    "href": "manuals/admin/host-management/site-management.html",
    "title": "Site Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Management Overview Oqtane allows you to manage multiple sites within a single instance of the application. The Site Management page provides an overview of all sites, with quick access to the site settings for each one. Be cautious when deleting a site, as it is a permanent action and cannot be undone unless you are absolutely certain. Accessing the Site Management Feature Open the Control Panel: Click the control panel icon to access additional settings. Open the Admin Dashboard: In the control panel, click the Admin Dashboard button. Select Site Management: In the Admin Dashboard, click the Site Management icon to open the site configuration options. Site Management Options The Site Management page includes options to add and edit sites. The available settings are as follows: Site Details Site Name: Enter the name for your site. Aliases: Define the address of the site. You can create sub-websites under the main site by using a forward slash (\"/\") followed by the desired name (e.g., /subsite). Default Theme: Choose the theme that will be applied to pages on this site, determining the color scheme and style. Default Layout: Select the default layout, which defines how many content panes (columns) will be available on each page. Default Container: Choose whether to include a title header for modules on the site. Site Template: Select a template to use for the site, or choose to have no template. Tenant: Choose the tenant (database) for the site. If you need to create a new tenant, select Create a new tenant. This will open additional options: Name: Enter the name for the new tenant. Database Type: Choose between a local database or an SQL Server database. Server: Specify the location of the server where the database will be stored (default is the local database). Database: Enter the database name to initialize on the server (default value for local database). Integrated Security: Choose whether the host superuser credentials should match the database's root account. Host Username: Enter the username for the superuser host account. This will also be the database root username if integrated security is enabled. Host Password: Set the password for the superuser host account. This will also be the database root password if integrated security is enabled. Add Site To add a new site: Click on the Add Site button. Fill out the site details in the form that appears. Search Feature You can search for a specific site by name using the search bar. Edit Site To modify the details of an existing site, click the Edit button. Browse Site Click the Browse button to view the site. Deleting a Site Be very careful when deleting a site, as this action is permanent and cannot be undone. Once a site is deleted, all data associated with it, including pages, content, and settings, will be permanently removed. To delete a site, follow these steps: Access Site Settings: Navigate to the Site Management page from the Admin Dashboard by clicking the Edit button next to the site you wish to delete. Delete the Site: In the Site Settings page, scroll down to the bottom and find the Delete option. Confirm your decision to delete the site when prompted. Warning: Deleting a site is irreversible. Ensure that you have backed up any important data before proceeding. Once the site is deleted, the action cannot be undone. The site and all of its content will be permanently erased from the system."
  },
  "manuals/admin/host-management/site-settings.html": {
    "href": "manuals/admin/host-management/site-settings.html",
    "title": "Site Settings (Host Management) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Settings (Host Management) Overview The Site Settings feature in Oqtane allows both Admin and Host users to configure site-specific options. While Admin users have access to a standard set of settings, Host users are provided with additional, advanced configuration options. This guide will summarize both types of settings and provide links to further details. To access Site Settings in the Oqtane admin dashboard: Open the Control Panel: Click the Control Panel icon to access additional settings. Navigate to the Admin Dashboard: In the control panel, click the button to open the Admin Dashboard. Select Site Settings: In the Admin Dashboard, click on the Site Settings icon to configure your site settings. Admin Management Site Settings For the Admin Management features in Site Settings, see the following sections in the Admin Management Site Settings documentation: Site Settings (Basic Settings): Basic Settings Section Configure the foundational settings for your site, including site name, homepage, and site map. Appearance: Appearance Section Manage visual settings, including logo, favicon, and theme options. Functionality: Functionality Section Define essential functionalities like the text editor, allowed image extensions, and uploadable file types. Page Content: Page Content Section Customize additional content for pages, including head and body content. SMTP Settings: SMTP Settings Section Set up the SMTP server configurations required for email notifications. PWA Settings: PWA Settings Section Configure Progressive Web App capabilities, including icons and splash screens. Each of these links provides detailed instructions for configuring the corresponding settings. Ensure all options are set according to your site's requirements for optimal functionality. Host-Specific Site Settings As a Host user, you have access to additional settings that allow for more advanced site configuration. Below is an overview of these exclusive options. URLs The URLs section lets you manage the URLs associated with your site, including domains, subdomains, or virtual folders. Add a URL: Click the Add button. Enter the URL in the provided field. Choose Yes or No for Default to set it as the primary URL. Click Save to add the URL or Cancel to discard changes. Edit a URL: Click the Edit button next to an existing URL. Modify the URL or adjust the Default setting. Click Save to save changes or Cancel to discard them. Delete a URL: Click the Delete button next to a URL. Confirm deletion in the prompt window. UI Component Settings The UI Component Settings section allows you to control render modes and interactivity options for UI components. Render Mode: The default render mode for the site, defining how components are rendered on the page. Interactivity: Specifies the render mode for components requiring interactive features. Prerender: Indicates if interactive components should prerender their output on the server. Hybrid: Determines if the site can integrate with an external .NET MAUI hybrid application. Database The Database section provides essential database information for the site. Database: The name of the database used within the site. This is the tenant name in the framework rather than the physical database name. Type: Specifies the type of database (e.g., SQL Server, MySQL). Connection: The name of the connection string from appsettings.json used to connect to the database. Conclusion The Site Settings for Host users offer advanced options for managing URLs, UI components, and database configurations, in addition to the standard settings accessible to Admin users. Use these settings to customize your site further and optimize performance, security, and interactivity. For more detailed information on Admin features, refer to the Admin Management Site Settings documentation."
  },
  "manuals/admin/host-management/sql-management.html": {
    "href": "manuals/admin/host-management/sql-management.html",
    "title": "SQL Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "SQL Management Overview The SQL Management feature provides direct access to the database through the Oqtane interface, allowing administrators to execute SQL queries on the tenant databases (also called sites). This feature enables quick database management and troubleshooting without requiring a separate SQL Server Management Studio instance. By using the SQL console, you can run SQL queries directly from the Oqtane application. The results of any executed SQL statements will be displayed below the execute button, providing immediate feedback. This feature is particularly useful for administrators who need to interact with the database quickly. Accessing the SQL Management Feature Open the Control Panel: Click the Control Panel icon to access additional settings. Navigate to Admin Dashboard: In the Control Panel, select the button to open the Admin Dashboard. Open SQL Management: In the Admin Dashboard, click on the SQL Management icon to access the SQL console. Adding a Connection To add a new database connection: Click the Add Connection button in the SQL Management interface. The Add Connection Settings window will appear, where you can configure the connection settings such as the server name, credentials, and database name. Default Connection Once you've set up your connection, the default connection will be displayed for easy reference. Executing Queries After setting up the connection, you can begin writing your SQL queries. To execute a query, click the Execute button. Using the SQL Management Console Once inside the SQL Management page, you can interact with the SQL console to execute queries on the tenant databases. SQL Console Interface Query Input Field: This is where you type your SQL query. Execute Button: After entering your SQL statement, click the Execute button to run the query on the selected tenant database. Results Display: The results of the executed query will be displayed directly below the Execute button, showing either the returned data or any error messages. SQL Query Example SELECT * FROM Users WHERE IsActive = 1; This example SQL query will return all active users from the Users table. Error Handling If there is an issue with your SQL query, an error message will be shown in the results section, providing helpful feedback to correct the query. Common issues could include: Syntax errors: Ensure your SQL syntax is correct. Incorrect table or column names: Double-check your database schema to ensure the table and column names match. Access permissions issues: Verify that your user account has sufficient privileges to execute SQL queries on the selected tenant database. Warning: Running SQL queries directly on the database can modify data and schema. It is advised to back up your database before making significant changes. Best Practices Avoid Deleting Data: Be cautious when running DELETE statements or performing operations that alter the database schema. Always double-check the WHERE clause before executing a DELETE query. Test Queries: Test queries in a development or staging environment before running them on a production database to prevent unintended consequences. Backup: Always ensure that you have a recent backup of your database before executing potentially destructive queries, such as DELETE or UPDATE operations that affect large sets of data. Common SQL Queries Retrieving All Records SELECT * FROM [TableName]; Retrieving All Records SELECT * FROM [TableName]; This query retrieves all records from the specified table. It is useful for getting an overview of the data in any table. Updating Records UPDATE [TableName] SET [ColumnName] = 'NewValue' WHERE [Condition]; This query updates existing records in the specified table based on the given condition. Use this to modify data for specific records in a table. Deleting Records DELETE FROM [TableName] WHERE [Condition]; Deleting Records Be cautious when using the DELETE statement, as it permanently removes records from the database. Make sure your WHERE clause is accurate before executing the query. Troubleshooting Query Doesn't Execute: If your query doesn't run, verify that the syntax is correct. Ensure that you are connected to the right tenant database. No Results Displayed: If your query returns no data, check the conditions in your SQL query, or verify that the data exists in the database. Ensure the table and columns are properly named and populated. Permissions Issues: If you encounter permission-related errors, verify that your user account has the appropriate access rights for executing SQL queries. Conclusion The SQL Management console is a powerful tool for managing your tenant databases directly from within Oqtane. While it simplifies database interactions for administrators, it should be used with caution, especially when modifying or deleting data. Always double-check your queries and test them in a safe environment to avoid unintentional changes to your databases."
  },
  "manuals/admin/host-management/system-info.html": {
    "href": "manuals/admin/host-management/system-info.html",
    "title": "System Update | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "System Update Overview The System Update feature in Oqtane allows administrators to keep the framework up to date, ensuring access to the latest capabilities and features. It also enables you to upload a NuGet package to include specific features or updates that are part of newer versions of Oqtane. This is particularly useful when you are unable to update to the latest Oqtane version but want to incorporate certain features or fixes from that newer release. When updating, you can select a NuGet file from your local system, upload it to the framework, and then install it to integrate the package into your current Oqtane installation. This process is helpful for applying partial updates or integrating features without a full framework update. Accessing the System Update Feature To access the System Update feature, follow these steps: Open the Control Panel: Click the Control Panel icon to access additional settings. Navigate to Admin Dashboard: In the Control Panel, click the button to open the Admin Dashboard. Select System Update: In the Admin Dashboard, click on the System Update icon to access the update feature. Downloading An Update To download and apply an update, follow these steps: Click the Download button to initiate the update download. After the download completes successfully, you will see a notification. At this point, click the Upgrade button to apply the update. Note: Ensure that you are connected to the internet during this process to download the latest update package. System Up To Date Notification If the Oqtane framework is already up to date, you will see the following notification: This indicates that no update is required and you are already using the latest version of the framework. Uploading An Update In some cases, you may want to upload a NuGet package that includes new features or fixes from a newer version of Oqtane. To upload an update, follow these steps: Click the Upload button to browse and select the NuGet package file on your local system. After selecting the file, click the Upgrade button to install the uploaded package into your current version of Oqtane. Tip: This step is useful if you cannot upgrade to the latest version of Oqtane but still need to integrate newer features or updates provided in a NuGet package. Development Environment Notification The System Update feature is only available in production environments. If you are working in a development environment, you will see a notification message indicating that updates cannot be performed. This is a safeguard to prevent accidental updates in environments where it may not be appropriate. The message will appear as shown in the image below: Note: If you need to perform updates in a development environment, consider switching to a production environment or testing updates locally before applying them to the live system. Conclusion The System Update feature in Oqtane ensures that your system is running the latest framework version, incorporating important features, bug fixes, and updates. You can either download updates directly from the Oqtane servers or upload NuGet packages to install specific updates. Always verify your environment type (production vs development) and follow the steps carefully to maintain system integrity. If you encounter any issues or have questions about updating, consult the logs or seek assistance from the community or support channels."
  },
  "manuals/admin/host-management/system-update.html": {
    "href": "manuals/admin/host-management/system-update.html",
    "title": "System Update | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "System Update The system update feature allows you to update the Oqtane framework to keep your website up to date and ensure that administrators will have access to all capabilities and features that Oqtane provides. The system update feature also provides the ability to upload a Nuget package to be included with your local version of the Oqtane framework and is uploaded by selecting the Nuget file from its location on your system and then pressing the upload button to place the Nuget package within a version of the framework, then pressing the install button to update you version of the framework to include the uploaded Nuget package. Uploading a Nuget package is for the use of uploading features that exist in a newer version of Oqtane, but you have not installed the newest version of Oqtane."
  },
  "manuals/admin/host-management/theme-management.html": {
    "href": "manuals/admin/host-management/theme-management.html",
    "title": "Theme Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Management Overview The Theme Management feature in Oqtane is primarily used during the development phase of a site or when launching a new site brand. It allows you to manage the themes and containers installed on your site and set the default theme for pages and modules. Themes define the overall look and feel of your site, including colors, styles, and layouts. Oqtane provides two default themes: Blazor Theme: A minimalistic theme ideal for simple pages. Oqtane Theme: A more advanced theme offering a variety of styling options. Additionally, you can download new themes from the marketplace or upload custom themes via NuGet packages. Accessing the Theme Management Feature To access Theme Management in the Oqtane admin dashboard, follow these steps: Open the Control Panel: Click the Control Panel icon to access additional settings. Navigate to Admin Dashboard: In the control panel, click the button to open the Admin Dashboard. Select Theme Management: In the Admin Dashboard, click on the Theme Management icon to manage your themes. Installing Themes To install a new theme: Click the Install Theme button. You can install themes from two tabs: Marketplace: Choose between Open Source or Commercial themes available for download. Upload: If you have a custom theme as a NuGet package, you can upload it here. Click the Choose Files button to select the theme file to upload. Click the Upload button to install the theme. Editing Themes You can edit existing themes to customize their properties. Click the Edit button next to the theme you want to modify. In the edit window, you can change the theme settings, such as color schemes, fonts, and other design elements. Creating Themes If you want to create a completely new theme, Oqtane allows you to do so from the Create Theme option. Click the Create Theme button to begin. In the create theme window, provide the following details: Owner Name: Enter the owner or creator of the theme. Theme Name: Give your theme a name. Template: Select a theme template. Templates are located in the wwwroot/Themes/Templates folder on the server. Framework Reference: Choose a framework version to ensure compatibility with your environment. After setting the above settings Location will appear showing the location of where the theme files will be created. Once all settings are configured, click the Create Theme button to save the new theme. To exit without creating a theme click the Cancel button next to the Create Theme button or by clicking the X in the top right corner. After successfully creating the theme, you will see a notification confirming the creation and instructing you to compile the new theme project and restart the application. Warning: Theme Creation in Production Environments Theme creation is recommended for development environments only. It is not advisable to develop or create themes directly in a production environment as it can lead to performance issues, security concerns, or disruptions to the live user experience. For production sites, it is best to pre-build and test themes in a controlled environment before deploying them to your live site. Conclusion The Theme Management feature provides a straightforward way to manage, install, and create themes for your Oqtane site. Whether you're installing themes from the marketplace, uploading custom themes, or creating your own, this feature allows you to customize the look and feel of your site easily. Use the editing tools to fine-tune existing themes or start from scratch with a new theme to match your site's branding. If you encounter any issues during theme installation or customization, refer to the logs or consult the support channels for assistance."
  },
  "manuals/admin/index.html": {
    "href": "manuals/admin/index.html",
    "title": "Oqtane Administrative Documentaion | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Administrative Documentaion Introduction This administrative documentation outlines the various ways that administrators and user can interact with the oqtane platform in a variety of ways, including but not limited to: Basic installation instructions. The different processes of the control panel. What the admin dashboard includes. Content management for adding modules to pages, moving them around and editing them. Administrative functions, such as file and user management. Various host administrative tasks, such as jobs, event logs, installing modules and themes. Basic development features like creating modules and themes from the related admin dashboard features."
  },
  "manuals/admin/installation/index.html": {
    "href": "manuals/admin/installation/index.html",
    "title": "Installation Introduction | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Introduction This manual introduces the Installation Wizard for Oqtane, focusing on setting up a core installation. The Installation Wizard streamlines the configuration of essential settings, including database connections and host account setup. Installation Wizard Overview The Installation Wizard simplifies the setup process by guiding you through the following essential steps: Database Configuration Choose Database Provider: Select a supported database (SQL Server, MySQL, PostgreSQL, SQLite). Configure Connection String: Ensure accurate server address, credentials, and database name. Set Permissions: The database user should have permissions for CREATE, READ, and WRITE operations. Host and Admin Configuration Host Name: Enter the primary domain or URL for accessing your Oqtane installation. Admin Account: Set up an admin user to access and manage your Oqtane installation after setup. Finalize Installation Confirm Settings: Verify and apply your configurations to complete setup. Access the Site: Redirect to the site homepage upon successful installation. For an in-depth explanation of each screen and configuration in the wizard, refer to Installation Wizard. Environment-Specific Recommendations For different deployment environments, such as production or development, consult the extended guides linked below. These provide more specific setup instructions, including handling permissions, optimizing server configurations, and other advanced considerations. Note: Oqtane is optimized for Windows Server with IIS but also supports deployment on Linux (e.g., with NGINX or Apache). Installation Guides: Detailed setup instructions for deploying Oqtane in different environments. markdown Additional Resources For further insights on Oqtane installation and configuration, consider exploring these resources: GitHub Discussions: Find community support and solutions for common installation questions. Oqtane Blog - Installation Best Practices: Read about best practices and tips for a smooth installation process. Community Wiki - Oqtane Setup: Access community-contributed knowledge for specific setup scenarios and troubleshooting. See Also For more comprehensive setup guidance, see the [Installation Guides(../../../guides/installation/index.md)."
  },
  "manuals/admin/installation/installation-wizard.html": {
    "href": "manuals/admin/installation/installation-wizard.html",
    "title": "Installation Wizard | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Wizard The Oqtane Installation Wizard simplifies the setup process, guiding you through essential steps to configure and deploy your Oqtane instance. Follow the instructions in each step to ensure a smooth installation. Getting Started with the Installation Wizard Access the Installation Wizard: Open your browser and navigate to the Oqtane application URL. If Oqtane is not yet configured, the wizard should load automatically. You should see a welcome screen prompting you to begin the setup process. Database Configuration: Select your preferred database type. Oqtane supports several database providers, such as SQL Server and SQLite. Enter the required database connection information, including the server, database name, and login credentials. The wizard will attempt to connect to your database to validate the information entered. Database Configuration Examples: SQL Server: Server: localhost Database: OqtaneDB Authentication: SQL Server Authentication with a valid username and password SQLite: File Path: Specify a file path on the server where SQLite can create a new database file if it doesn‚Äôt exist. Application Settings: Define key site settings, including: Host Administrator Account: Specify a username, password, and email for the main site administrator. This user will be added to the \"Host\" permissions role, granting full access to Content Management, Admin Management, and Host Management features. Template: Select a site template. Oqtane provides options such as the \"Default Site Template\" or \"Blank Template,\" and any additional site templates included with your setup will also be available. Note: The current web address used to access the install wizard will be set as the default base URL or alias for your Oqtane site. Complete Installation: Review your configuration and click Install. The wizard will apply your settings, configure the database, and prepare your Oqtane instance for use. (Optionally, you can select a checkbox to receive product updates and security bulletins.) Upon completion, you‚Äôll be redirected to the Oqtane homepage, where you can log in with the admin account created during setup. Click the login button to access your site. Log in using the host account credentials you created. You now have full access to Content Management, Admin Management, and Host Management features. Additional Tips Database Connection Issues: If the wizard cannot connect to your database, double-check the server address, database name, and credentials. File Permissions: Ensure that your server has adequate permissions to write to necessary directories, such as for SQLite files or configuration files. Re-running the Wizard: To re-run the wizard after installation, delete the database connection string in the appsettings.json file located in the website's root folder or in the Oqtane.Server project. This will prompt Oqtane to load the installation wizard again upon your next visit to the application URL. The appsettings.json file with an empty database connection string, as seen in Visual Studio: The appsettings.json file location in the IIS root site folder: Additional Resources For further insights on installation and troubleshooting, consider these resources: GitHub Discussions: Find community support for common installation questions. Oqtane Blog - Installation Tips: Read best practices and insights for a smooth installation. See Also Installation Guides: Comprehensive setup guidance and environment-specific tips. Troubleshooting Installation Issues: Solutions for common installation errors and setup challenges."
  },
  "manuals/admin/installation/troubleshooting.html": {
    "href": "manuals/admin/installation/troubleshooting.html",
    "title": "Installation Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Troubleshooting The Installation Troubleshooting section provides solutions for common errors and challenges encountered during the installation of the Oqtane Framework. This guide aims to assist users in resolving issues efficiently, ensuring a smooth setup experience. Common Installation Issues Database Connection Problems: If the installation wizard fails to connect to the database, check the following: Ensure the server address and database name are correctly entered. Verify that the database server is running and accessible. Confirm that the provided login credentials are valid and have the necessary permissions. File Permission Errors: If you encounter file permission issues, ensure that your web server has write access to the required directories. This is particularly important for: SQLite databases, where the server needs permission to create and modify database files. Configuration files that need to be updated during installation. Re-running the Installation Wizard: To re-run the installation wizard after an initial setup, remove the database connection string from the appsettings.json file. This file can typically be found in: The website's root folder or in the Oqtane.Server project in Visual Studio. Once the connection string is deleted, the installation wizard will prompt upon accessing the application URL. Unexpected Errors: If unexpected errors occur, refer to the server logs for detailed error messages. These logs can often provide insights into what went wrong during the installation process. Additional Resources For more in-depth guidance, consider exploring the following resources: Installation Guides: Comprehensive setup guidance and environment-specific tips to help you through the installation process. Troubleshooting Installation Issues: Detailed solutions for common installation errors and setup challenges, designed to assist both new and experienced users. GitHub Discussions: Engage with the Oqtane community to find solutions to common installation questions and share your experiences. GitHub Issues: Report issues you encounter or check for existing issues related to installation problems. This section aims to streamline your installation experience by providing quick access to troubleshooting steps and resources. If you encounter any issues not covered in this guide, please refer to the community support channels for further assistance."
  },
  "manuals/how-to/restart/index.html": {
    "href": "manuals/how-to/restart/index.html",
    "title": "How To Restart Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "How To Restart Oqtane There are a few scenarios where you will want to restart Oqtane. The most common is after installing/updating an extension. The process is different depending on if you are running Oqtane from Visual Studio (while developing) or if you are running in production (typically in IIS). Restart Oqtane in Production Go to /admin/system and hit Restart... ...confirm your choice... ...and wait for it to restart. Restart Oqtane in Development Mode If you try to restart Oqtane from the System dialog during development, it will only shut down Oqtane, since Visual Studio will terminate the process. So you can use the steps above to stop Oqtane, but this makes more sense: Stop Oqtane in Visual Studio: ...then start it again: Manually Force-Restart Oqtane In special scenarios - e.g. in production when Oqtane crashes, you may want to force-restart Oqtane. The simplest method to do this is to open the web.config and save it again. This will restart Oqtane."
  },
  "readme.html": {
    "href": "readme.html",
    "title": "Oqtane Docs Builder | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Docs Builder Read the readme.md in the parent folder"
  }
}