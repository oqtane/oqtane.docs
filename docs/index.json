{
  "api/Oqtane.App.html": {
    "href": "api/Oqtane.App.html",
    "title": "Class App | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class App Namespace Oqtane Assembly Oqtane.Client.dll public class App : ComponentBase Inheritance object ComponentBase App Properties AntiForgeryToken [Parameter] public string AntiForgeryToken { get; set; } Property Value string AuthorizationToken [Parameter] public string AuthorizationToken { get; set; } Property Value string RemoteIPAddress [Parameter] public string RemoteIPAddress { get; set; } Property Value string RenderMode [Parameter] public string RenderMode { get; set; } Property Value string Runtime [Parameter] public string Runtime { get; set; } Property Value string VisitorId [Parameter] public int VisitorId { get; set; } Property Value int Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnAfterRender(bool) Method invoked after each time the component has rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. protected override void OnAfterRender(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.Components.App.html": {
    "href": "api/Oqtane.Components.App.html",
    "title": "Class App | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class App Namespace Oqtane.Components Assembly Oqtane.Server.dll public class App : ComponentBase Inheritance object ComponentBase App Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitializedAsync() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed. protected override Task OnInitializedAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.Components._Imports.html": {
    "href": "api/Oqtane.Components._Imports.html",
    "title": "Class _Imports | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class _Imports Namespace Oqtane.Components Assembly Oqtane.Server.dll public class _Imports : ComponentBase Inheritance object ComponentBase _Imports Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Components.html": {
    "href": "api/Oqtane.Components.html",
    "title": "Namespace Oqtane.Components | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Components Classes App _Imports"
  },
  "api/Oqtane.Controllers.AliasController.html": {
    "href": "api/Oqtane.Controllers.AliasController.html",
    "title": "Class AliasController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AliasController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class AliasController : Controller Inheritance object ControllerBase Controller AliasController Constructors AliasController(IAliasRepository, ITenantRepository, ISyncManager, ILogManager, ITenantManager) public AliasController(IAliasRepository aliases, ITenantRepository tenants, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters aliases IAliasRepository tenants ITenantRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Host Users\")] public void Delete(int id) Parameters id int Get() [HttpGet] [Authorize(Roles = \"Administrators\")] public IEnumerable<Alias> Get() Returns IEnumerable<Alias> Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Alias Get(int id) Parameters id int Returns Alias Post(Alias) [HttpPost] [Authorize(Roles = \"Host Users\")] public Alias Post(Alias alias) Parameters alias Alias Returns Alias Put(int, Alias) [HttpPut(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Alias Put(int id, Alias alias) Parameters id int alias Alias Returns Alias"
  },
  "api/Oqtane.Controllers.DatabaseController.html": {
    "href": "api/Oqtane.Controllers.DatabaseController.html",
    "title": "Class DatabaseController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DatabaseController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class DatabaseController : Controller Inheritance object ControllerBase Controller DatabaseController Constructors DatabaseController(IOptions<List<Database>>, IConfigManager) public DatabaseController(IOptions<List<Database>> databaseOptions, IConfigManager config) Parameters databaseOptions IOptions<List<Database>> config IConfigManager Methods Get() [HttpGet] public IEnumerable<Database> Get() Returns IEnumerable<Database>"
  },
  "api/Oqtane.Controllers.FileController.html": {
    "href": "api/Oqtane.Controllers.FileController.html",
    "title": "Class FileController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FileController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class FileController : Controller Inheritance object ControllerBase Controller FileController Constructors FileController(IWebHostEnvironment, IFileRepository, IFolderRepository, IUserPermissions, ISettingRepository, ISyncManager, ILogManager, ITenantManager) public FileController(IWebHostEnvironment environment, IFileRepository files, IFolderRepository folders, IUserPermissions userPermissions, ISettingRepository settingRepository, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters environment IWebHostEnvironment files IFileRepository folders IFolderRepository userPermissions IUserPermissions settingRepository ISettingRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int DownloadAttachment(int) Get file with header Content-Disposition: attachment; filename=\"filename.jpg\" https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition [HttpGet(\"download/{id}/attach\")] public IActionResult DownloadAttachment(int id) Parameters id int File Id from Oqtane filesystem Returns IActionResult DownloadInline(int) Get file with header Content-Disposition: inline https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition [HttpGet(\"download/{id}\")] public IActionResult DownloadInline(int id) Parameters id int File Id from Oqtane filesystem Returns IActionResult file content Get(int) [HttpGet(\"{id}\")] public File Get(int id) Parameters id int Returns File Get(int, string) [HttpGet(\"{siteId}/{path}\")] public IEnumerable<File> Get(int siteId, string path) Parameters siteId int path string Returns IEnumerable<File> Get(string) [HttpGet] public IEnumerable<File> Get(string folder) Parameters folder string Returns IEnumerable<File> Get(string, int) [HttpGet(\"name/{name}/{folderId}\")] public File Get(string name, int folderId) Parameters name string folderId int Returns File GetImage(int, int, int, string, string, string, string, string) [HttpGet(\"image/{id}/{width}/{height}/{mode}/{position}/{background}/{rotate}/{recreate}\")] public IActionResult GetImage(int id, int width, int height, string mode, string position, string background, string rotate, string recreate) Parameters id int width int height int mode string position string background string rotate string recreate string Returns IActionResult Post(File) [HttpPost] [Authorize(Roles = \"Registered Users\")] public File Post(File file) Parameters file File Returns File Put(int, File) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public File Put(int id, File file) Parameters id int file File Returns File UploadFile(string, IFormFile) [EnableCors(\"MauiCorsPolicy\")] [HttpPost(\"upload\")] public Task UploadFile(string folder, IFormFile formfile) Parameters folder string formfile IFormFile Returns Task UploadFile(string, string, string) [HttpGet(\"upload\")] public Task<File> UploadFile(string url, string folderid, string name) Parameters url string folderid string name string Returns Task<File>"
  },
  "api/Oqtane.Controllers.FolderController.html": {
    "href": "api/Oqtane.Controllers.FolderController.html",
    "title": "Class FolderController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FolderController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class FolderController : Controller Inheritance object ControllerBase Controller FolderController Constructors FolderController(IFolderRepository, IUserPermissions, ISyncManager, ILogManager, ITenantManager) public FolderController(IFolderRepository folders, IUserPermissions userPermissions, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters folders IFolderRepository userPermissions IUserPermissions syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] public Folder Get(int id) Parameters id int Returns Folder Get(string) [HttpGet] public IEnumerable<Folder> Get(string siteid) Parameters siteid string Returns IEnumerable<Folder> GetByPath(int, string) [HttpGet(\"path/{siteId}\")] public Folder GetByPath(int siteId, string path) Parameters siteId int path string Returns Folder Post(Folder) [HttpPost] [Authorize(Roles = \"Registered Users\")] public Folder Post(Folder folder) Parameters folder Folder Returns Folder Put(int, Folder) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Folder Put(int id, Folder folder) Parameters id int folder Folder Returns Folder Put(int, int, int?) [HttpPut] [Authorize(Roles = \"Registered Users\")] public void Put(int siteid, int folderid, int? parentid) Parameters siteid int folderid int parentid int?"
  },
  "api/Oqtane.Controllers.InstallationController.ClientAssembly.html": {
    "href": "api/Oqtane.Controllers.InstallationController.ClientAssembly.html",
    "title": "Struct InstallationController.ClientAssembly | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Struct InstallationController.ClientAssembly Namespace Oqtane.Controllers Assembly Oqtane.Server.dll public struct InstallationController.ClientAssembly Constructors ClientAssembly(string, bool) public ClientAssembly(string filepath, bool hashfilename) Parameters filepath string hashfilename bool Properties FilePath public readonly string FilePath { get; } Property Value string HashedName public readonly string HashedName { get; } Property Value string"
  },
  "api/Oqtane.Controllers.InstallationController.html": {
    "href": "api/Oqtane.Controllers.InstallationController.html",
    "title": "Class InstallationController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InstallationController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class InstallationController : Controller Inheritance object ControllerBase Controller InstallationController Constructors InstallationController(IConfigManager, IInstallationManager, IDatabaseManager, ILocalizationManager, IMemoryCache, IHttpContextAccessor, IAliasRepository, ISiteRepository, ILogger<InstallationController>, ITenantManager, IServerStateManager) public InstallationController(IConfigManager configManager, IInstallationManager installationManager, IDatabaseManager databaseManager, ILocalizationManager localizationManager, IMemoryCache cache, IHttpContextAccessor accessor, IAliasRepository aliases, ISiteRepository sites, ILogger<InstallationController> filelogger, ITenantManager tenantManager, IServerStateManager serverState) Parameters configManager IConfigManager installationManager IInstallationManager databaseManager IDatabaseManager localizationManager ILocalizationManager cache IMemoryCache accessor IHttpContextAccessor aliases IAliasRepository sites ISiteRepository filelogger ILogger<InstallationController> tenantManager ITenantManager serverState IServerStateManager Methods IsInstalled(string) [HttpGet(\"installed\")] public Installation IsInstalled(string path) Parameters path string Returns Installation List() [HttpGet(\"list\")] public List<string> List() Returns List<string> Load(string) [HttpGet(\"load\")] public IActionResult Load(string list = \"*\") Parameters list string Returns IActionResult Post(InstallConfig) [HttpPost] public Task<Installation> Post(InstallConfig config) Parameters config InstallConfig Returns Task<Installation> Register(string) [HttpPost(\"register\")] [Authorize(Roles = \"Host Users\")] public Task Register(string email) Parameters email string Returns Task Restart() [HttpPost(\"restart\")] [Authorize(Roles = \"Host Users\")] public void Restart() Upgrade() [HttpGet(\"upgrade\")] [Authorize(Roles = \"Host Users\")] public Installation Upgrade() Returns Installation"
  },
  "api/Oqtane.Controllers.JobController.html": {
    "href": "api/Oqtane.Controllers.JobController.html",
    "title": "Class JobController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JobController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class JobController : Controller Inheritance object ControllerBase Controller JobController Constructors JobController(IJobRepository, ILogManager, IServiceProvider) public JobController(IJobRepository jobs, ILogManager logger, IServiceProvider serviceProvider) Parameters jobs IJobRepository logger ILogManager serviceProvider IServiceProvider Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Host Users\")] public void Delete(int id) Parameters id int Get() [HttpGet] [Authorize(Roles = \"Host Users\")] public IEnumerable<Job> Get() Returns IEnumerable<Job> Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Job Get(int id) Parameters id int Returns Job Post(Job) [HttpPost] [Authorize(Roles = \"Host Users\")] public Job Post(Job job) Parameters job Job Returns Job Put(int, Job) [HttpPut(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Job Put(int id, Job job) Parameters id int job Job Returns Job Start(int) [HttpGet(\"start/{id}\")] [Authorize(Roles = \"Host Users\")] public void Start(int id) Parameters id int Stop(int) [HttpGet(\"stop/{id}\")] [Authorize(Roles = \"Host Users\")] public void Stop(int id) Parameters id int"
  },
  "api/Oqtane.Controllers.JobLogController.html": {
    "href": "api/Oqtane.Controllers.JobLogController.html",
    "title": "Class JobLogController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JobLogController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class JobLogController : Controller Inheritance object ControllerBase Controller JobLogController Constructors JobLogController(IJobLogRepository) public JobLogController(IJobLogRepository jobLogs) Parameters jobLogs IJobLogRepository Methods Get() [HttpGet] [Authorize(Roles = \"Host Users\")] public IEnumerable<JobLog> Get() Returns IEnumerable<JobLog> Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Host Users\")] public JobLog Get(int id) Parameters id int Returns JobLog"
  },
  "api/Oqtane.Controllers.LanguageController.html": {
    "href": "api/Oqtane.Controllers.LanguageController.html",
    "title": "Class LanguageController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LanguageController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class LanguageController : Controller Inheritance object ControllerBase Controller LanguageController Constructors LanguageController(ILanguageRepository, ISyncManager, ILogManager, ITenantManager) public LanguageController(ILanguageRepository languages, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters languages ILanguageRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Administrators\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] public Language Get(int id) Parameters id int Returns Language Get(string, string) [HttpGet] public IEnumerable<Language> Get(string siteid, string packagename) Parameters siteid string packagename string Returns IEnumerable<Language> Post(Language) [HttpPost] [Authorize(Roles = \"Administrators\")] public Language Post(Language language) Parameters language Language Returns Language Put(Language) [HttpPut] [Authorize(Roles = \"Administrators\")] public void Put(Language language) Parameters language Language"
  },
  "api/Oqtane.Controllers.LocalizationController.html": {
    "href": "api/Oqtane.Controllers.LocalizationController.html",
    "title": "Class LocalizationController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LocalizationController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class LocalizationController : Controller Inheritance object ControllerBase Controller LocalizationController Constructors LocalizationController(ILocalizationManager) public LocalizationController(ILocalizationManager localizationManager) Parameters localizationManager ILocalizationManager Methods Get(bool) [HttpGet] public IEnumerable<Culture> Get(bool installed) Parameters installed bool Returns IEnumerable<Culture>"
  },
  "api/Oqtane.Controllers.LogController.html": {
    "href": "api/Oqtane.Controllers.LogController.html",
    "title": "Class LogController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LogController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class LogController : Controller Inheritance object ControllerBase Controller LogController Constructors LogController(ILogManager, ILogRepository, ITenantManager) public LogController(ILogManager logger, ILogRepository logs, ITenantManager tenantManager) Parameters logger ILogManager logs ILogRepository tenantManager ITenantManager Methods Delete(string) [HttpDelete] [Authorize(Roles = \"Administrators\")] public void Delete(string siteId) Parameters siteId string Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Administrators\")] public Log Get(int id) Parameters id int Returns Log Get(string, string, string, string) [HttpGet] [Authorize(Roles = \"Administrators\")] public IEnumerable<Log> Get(string siteid, string level, string function, string rows) Parameters siteid string level string function string rows string Returns IEnumerable<Log> Post(Log) [HttpPost] public void Post(Log log) Parameters log Log"
  },
  "api/Oqtane.Controllers.ModuleController.html": {
    "href": "api/Oqtane.Controllers.ModuleController.html",
    "title": "Class ModuleController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class ModuleController : Controller Inheritance object ControllerBase Controller ModuleController Constructors ModuleController(IModuleRepository, IPageModuleRepository, IPageRepository, IModuleDefinitionRepository, ISettingRepository, IUserPermissions, ITenantManager, ISyncManager, ILogManager) public ModuleController(IModuleRepository modules, IPageModuleRepository pageModules, IPageRepository pages, IModuleDefinitionRepository moduleDefinitions, ISettingRepository settings, IUserPermissions userPermissions, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger) Parameters modules IModuleRepository pageModules IPageModuleRepository pages IPageRepository moduleDefinitions IModuleDefinitionRepository settings ISettingRepository userPermissions IUserPermissions tenantManager ITenantManager syncManager ISyncManager logger ILogManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int Export(int, int) [HttpGet(\"export\")] [Authorize(Roles = \"Registered Users\")] public string Export(int moduleid, int pageid) Parameters moduleid int pageid int Returns string Get(int) [HttpGet(\"{id}\")] public Module Get(int id) Parameters id int Returns Module Get(string) [HttpGet] public IEnumerable<Module> Get(string siteid) Parameters siteid string Returns IEnumerable<Module> Import(int, int, string) [HttpPost(\"import\")] [Authorize(Roles = \"Registered Users\")] public bool Import(int moduleid, int pageid, string content) Parameters moduleid int pageid int content string Returns bool Post(Module) [HttpPost] [Authorize(Roles = \"Registered Users\")] public Module Post(Module module) Parameters module Module Returns Module Put(int, Module) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Module Put(int id, Module module) Parameters id int module Module Returns Module"
  },
  "api/Oqtane.Controllers.ModuleControllerBase.html": {
    "href": "api/Oqtane.Controllers.ModuleControllerBase.html",
    "title": "Class ModuleControllerBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleControllerBase Namespace Oqtane.Controllers Assembly Oqtane.Server.dll public class ModuleControllerBase : Controller Inheritance object ControllerBase Controller ModuleControllerBase Constructors ModuleControllerBase(ILogManager, IHttpContextAccessor) public ModuleControllerBase(ILogManager logger, IHttpContextAccessor accessor) Parameters logger ILogManager accessor IHttpContextAccessor Fields _authEntityId protected Dictionary<string, int> _authEntityId Field Value Dictionary<string, int> _entityId protected int _entityId Field Value int _logger protected readonly ILogManager _logger Field Value ILogManager Methods AuthEntityId(string) protected int AuthEntityId(string entityname) Parameters entityname string Returns int IsAuthorizedEntityId(string, int) protected bool IsAuthorizedEntityId(string entityname, int entityid) Parameters entityname string entityid int Returns bool"
  },
  "api/Oqtane.Controllers.ModuleDefinitionController.html": {
    "href": "api/Oqtane.Controllers.ModuleDefinitionController.html",
    "title": "Class ModuleDefinitionController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleDefinitionController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class ModuleDefinitionController : Controller Inheritance object ControllerBase Controller ModuleDefinitionController Constructors ModuleDefinitionController(IModuleDefinitionRepository, ITenantRepository, ISqlRepository, IUserPermissions, IInstallationManager, IWebHostEnvironment, IServiceProvider, ITenantManager, ISyncManager, ILogManager) public ModuleDefinitionController(IModuleDefinitionRepository moduleDefinitions, ITenantRepository tenants, ISqlRepository sql, IUserPermissions userPermissions, IInstallationManager installationManager, IWebHostEnvironment environment, IServiceProvider serviceProvider, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger) Parameters moduleDefinitions IModuleDefinitionRepository tenants ITenantRepository sql ISqlRepository userPermissions IUserPermissions installationManager IInstallationManager environment IWebHostEnvironment serviceProvider IServiceProvider tenantManager ITenantManager syncManager ISyncManager logger ILogManager Methods Delete(int, int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Host Users\")] public void Delete(int id, int siteid) Parameters id int siteid int Get(int, string) [HttpGet(\"{id}\")] public ModuleDefinition Get(int id, string siteid) Parameters id int siteid string Returns ModuleDefinition Get(string) [HttpGet] public IEnumerable<ModuleDefinition> Get(string siteid) Parameters siteid string Returns IEnumerable<ModuleDefinition> GetTemplates() [HttpGet(\"templates\")] [Authorize(Roles = \"Host Users\")] public List<Template> GetTemplates() Returns List<Template> Post(ModuleDefinition) [HttpPost] [Authorize(Roles = \"Host Users\")] public ModuleDefinition Post(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition Returns ModuleDefinition Put(int, ModuleDefinition) [HttpPut(\"{id}\")] [Authorize(Roles = \"Administrators\")] public void Put(int id, ModuleDefinition moduleDefinition) Parameters id int moduleDefinition ModuleDefinition"
  },
  "api/Oqtane.Controllers.NotificationController.html": {
    "href": "api/Oqtane.Controllers.NotificationController.html",
    "title": "Class NotificationController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class NotificationController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class NotificationController : Controller Inheritance object ControllerBase Controller NotificationController Constructors NotificationController(INotificationRepository, IUserPermissions, ISyncManager, ILogManager, ITenantManager) public NotificationController(INotificationRepository notifications, IUserPermissions userPermissions, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters notifications INotificationRepository userPermissions IUserPermissions syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Notification Get(int id) Parameters id int Returns Notification Get(string, string, string) [HttpGet] [Authorize(Roles = \"Registered Users\")] public IEnumerable<Notification> Get(string siteid, string direction, string userid) Parameters siteid string direction string userid string Returns IEnumerable<Notification> Get(string, string, string, string) [HttpGet(\"read-count\")] [Authorize(Roles = \"Registered Users\")] public int Get(string siteid, string direction, string userid, string isread) Parameters siteid string direction string userid string isread string Returns int Get(string, string, string, string, string) [HttpGet(\"read\")] [Authorize(Roles = \"Registered Users\")] public IEnumerable<Notification> Get(string siteid, string direction, string userid, string count, string isread) Parameters siteid string direction string userid string count string isread string Returns IEnumerable<Notification> Post(Notification) [HttpPost] [Authorize(Roles = \"Registered Users\")] public Notification Post(Notification notification) Parameters notification Notification Returns Notification Put(int, Notification) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Notification Put(int id, Notification notification) Parameters id int notification Notification Returns Notification"
  },
  "api/Oqtane.Controllers.PackageController.html": {
    "href": "api/Oqtane.Controllers.PackageController.html",
    "title": "Class PackageController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PackageController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class PackageController : Controller Inheritance object ControllerBase Controller PackageController Constructors PackageController(IInstallationManager, IWebHostEnvironment, IConfigManager, ILogManager) public PackageController(IInstallationManager installationManager, IWebHostEnvironment environment, IConfigManager configManager, ILogManager logger) Parameters installationManager IInstallationManager environment IWebHostEnvironment configManager IConfigManager logger ILogManager Methods Get(string, string, string, string, string) [HttpGet] public Task<IEnumerable<Package>> Get(string type, string search, string price, string package, string sort) Parameters type string search string price string package string sort string Returns Task<IEnumerable<Package>> GetPackageUpdates(string) [HttpGet(\"updates\")] public Task<IEnumerable<Package>> GetPackageUpdates(string type) Parameters type string Returns Task<IEnumerable<Package>> InstallPackages() [HttpGet(\"install\")] [Authorize(Roles = \"Host Users\")] public void InstallPackages() Post(string, string, string, string) [HttpPost] [Authorize(Roles = \"Host Users\")] public Task<Package> Post(string packageid, string version, string download, string install) Parameters packageid string version string download string install string Returns Task<Package>"
  },
  "api/Oqtane.Controllers.PageController.html": {
    "href": "api/Oqtane.Controllers.PageController.html",
    "title": "Class PageController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class PageController : Controller Inheritance object ControllerBase Controller PageController Constructors PageController(IPageRepository, IModuleRepository, IPageModuleRepository, IPermissionRepository, ISettingRepository, IUserPermissions, IUrlMappingRepository, ITenantManager, ISyncManager, ILogManager) public PageController(IPageRepository pages, IModuleRepository modules, IPageModuleRepository pageModules, IPermissionRepository permissionRepository, ISettingRepository settings, IUserPermissions userPermissions, IUrlMappingRepository urlMappings, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger) Parameters pages IPageRepository modules IModuleRepository pageModules IPageModuleRepository permissionRepository IPermissionRepository settings ISettingRepository userPermissions IUserPermissions urlMappings IUrlMappingRepository tenantManager ITenantManager syncManager ISyncManager logger ILogManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] public Page Get(int id) Parameters id int Returns Page Get(string) [HttpGet] public IEnumerable<Page> Get(string siteid) Parameters siteid string Returns IEnumerable<Page> Get(string, int) [HttpGet(\"path/{siteid}\")] public Page Get(string path, int siteid) Parameters path string siteid int Returns Page Post(Page) [HttpPost] [Authorize(Roles = \"Registered Users\")] public Page Post(Page page) Parameters page Page Returns Page Post(int, string) [HttpPost(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Page Post(int id, string userid) Parameters id int userid string Returns Page Put(int, Page) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Page Put(int id, Page page) Parameters id int page Page Returns Page Put(int, int, int?) [HttpPut] [Authorize(Roles = \"Registered Users\")] public void Put(int siteid, int pageid, int? parentid) Parameters siteid int pageid int parentid int?"
  },
  "api/Oqtane.Controllers.PageModuleController.html": {
    "href": "api/Oqtane.Controllers.PageModuleController.html",
    "title": "Class PageModuleController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageModuleController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class PageModuleController : Controller Inheritance object ControllerBase Controller PageModuleController Constructors PageModuleController(IPageModuleRepository, IPageRepository, IUserPermissions, ITenantManager, ISyncManager, ILogManager) public PageModuleController(IPageModuleRepository pageModules, IPageRepository pages, IUserPermissions userPermissions, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger) Parameters pageModules IPageModuleRepository pages IPageRepository userPermissions IUserPermissions tenantManager ITenantManager syncManager ISyncManager logger ILogManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] public PageModule Get(int id) Parameters id int Returns PageModule Get(int, int) [HttpGet(\"{pageid}/{moduleid}\")] public PageModule Get(int pageid, int moduleid) Parameters pageid int moduleid int Returns PageModule Post(PageModule) [HttpPost] [Authorize(Roles = \"Registered Users\")] public PageModule Post(PageModule pageModule) Parameters pageModule PageModule Returns PageModule Put(int, PageModule) [HttpPut(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public PageModule Put(int id, PageModule pageModule) Parameters id int pageModule PageModule Returns PageModule Put(int, string) [HttpPut] [Authorize(Roles = \"Registered Users\")] public void Put(int pageid, string pane) Parameters pageid int pane string"
  },
  "api/Oqtane.Controllers.ProfileController.html": {
    "href": "api/Oqtane.Controllers.ProfileController.html",
    "title": "Class ProfileController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ProfileController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class ProfileController : Controller Inheritance object ControllerBase Controller ProfileController Constructors ProfileController(IProfileRepository, ISyncManager, ILogManager, ITenantManager) public ProfileController(IProfileRepository profiles, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters profiles IProfileRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Policy = \"Profile:Write:Administrators\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Profile Get(int id) Parameters id int Returns Profile Get(string) [HttpGet] [Authorize(Roles = \"Registered Users\")] public IEnumerable<Profile> Get(string siteid) Parameters siteid string Returns IEnumerable<Profile> Post(Profile) [HttpPost] [Authorize(Policy = \"Profile:Write:Administrators\")] public Profile Post(Profile profile) Parameters profile Profile Returns Profile Put(int, Profile) [HttpPut(\"{id}\")] [Authorize(Policy = \"Profile:Write:Administrators\")] public Profile Put(int id, Profile profile) Parameters id int profile Profile Returns Profile"
  },
  "api/Oqtane.Controllers.RoleController.html": {
    "href": "api/Oqtane.Controllers.RoleController.html",
    "title": "Class RoleController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RoleController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class RoleController : Controller Inheritance object ControllerBase Controller RoleController Constructors RoleController(IRoleRepository, ISyncManager, ILogManager, ITenantManager) public RoleController(IRoleRepository roles, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters roles IRoleRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Policy = \"Role:Write:Administrators\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public Role Get(int id) Parameters id int Returns Role Get(string, string) [HttpGet] [Authorize(Roles = \"Registered Users\")] public IEnumerable<Role> Get(string siteid, string global) Parameters siteid string global string Returns IEnumerable<Role> Post(Role) [HttpPost] [Authorize(Policy = \"Role:Write:Administrators\")] public Role Post(Role role) Parameters role Role Returns Role Put(int, Role) [HttpPut(\"{id}\")] [Authorize(Policy = \"Role:Write:Administrators\")] public Role Put(int id, Role role) Parameters id int role Role Returns Role"
  },
  "api/Oqtane.Controllers.SettingController.html": {
    "href": "api/Oqtane.Controllers.SettingController.html",
    "title": "Class SettingController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SettingController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SettingController : Controller Inheritance object ControllerBase Controller SettingController Constructors SettingController(ISettingRepository, IPageModuleRepository, IUserPermissions, ITenantManager, ISyncManager, IAliasAccessor, IOptionsMonitorCache<CookieAuthenticationOptions>, IOptionsMonitorCache<OpenIdConnectOptions>, IOptionsMonitorCache<OAuthOptions>, IOptionsMonitorCache<IdentityOptions>, ILogManager) public SettingController(ISettingRepository settings, IPageModuleRepository pageModules, IUserPermissions userPermissions, ITenantManager tenantManager, ISyncManager syncManager, IAliasAccessor aliasAccessor, IOptionsMonitorCache<CookieAuthenticationOptions> cookieCache, IOptionsMonitorCache<OpenIdConnectOptions> oidcCache, IOptionsMonitorCache<OAuthOptions> oauthCache, IOptionsMonitorCache<IdentityOptions> identityCache, ILogManager logger) Parameters settings ISettingRepository pageModules IPageModuleRepository userPermissions IUserPermissions tenantManager ITenantManager syncManager ISyncManager aliasAccessor IAliasAccessor cookieCache IOptionsMonitorCache<CookieAuthenticationOptions> oidcCache IOptionsMonitorCache<OpenIdConnectOptions> oauthCache IOptionsMonitorCache<OAuthOptions> identityCache IOptionsMonitorCache<IdentityOptions> logger ILogManager Methods Clear() [HttpDelete(\"clear\")] [Authorize(Roles = \"Administrators\")] public void Clear() Delete(string, int) [HttpDelete(\"{id}/{entityName}\")] public void Delete(string entityName, int id) Parameters entityName string id int Get(int, string) [HttpGet(\"{id}/{entityName}\")] public Setting Get(int id, string entityName) Parameters id int entityName string Returns Setting Get(string, int) [HttpGet] public IEnumerable<Setting> Get(string entityName, int entityId) Parameters entityName string entityId int Returns IEnumerable<Setting> Post(Setting) [HttpPost] public Setting Post(Setting setting) Parameters setting Setting Returns Setting Put(int, Setting) [HttpPut(\"{id}\")] public Setting Put(int id, Setting setting) Parameters id int setting Setting Returns Setting"
  },
  "api/Oqtane.Controllers.SiteController.html": {
    "href": "api/Oqtane.Controllers.SiteController.html",
    "title": "Class SiteController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SiteController : Controller Inheritance object ControllerBase Controller SiteController Constructors SiteController(ISiteService, ILogManager) public SiteController(ISiteService siteService, ILogManager logger) Parameters siteService ISiteService logger ILogManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Task Delete(int id) Parameters id int Returns Task Get() [HttpGet] [Authorize(Roles = \"Host Users\")] public Task<IEnumerable<Site>> Get() Returns Task<IEnumerable<Site>> Get(int) [HttpGet(\"{id}\")] public Task<Site> Get(int id) Parameters id int Returns Task<Site> Post(Site) [HttpPost] [Authorize(Roles = \"Host Users\")] public Task<Site> Post(Site site) Parameters site Site Returns Task<Site> Put(int, Site) [HttpPut(\"{id}\")] [Authorize(Roles = \"Administrators\")] public Task<Site> Put(int id, Site site) Parameters id int site Site Returns Task<Site>"
  },
  "api/Oqtane.Controllers.SiteTemplateController.html": {
    "href": "api/Oqtane.Controllers.SiteTemplateController.html",
    "title": "Class SiteTemplateController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteTemplateController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SiteTemplateController : Controller Inheritance object ControllerBase Controller SiteTemplateController Constructors SiteTemplateController(ISiteTemplateRepository) public SiteTemplateController(ISiteTemplateRepository siteTemplates) Parameters siteTemplates ISiteTemplateRepository Methods Get() [HttpGet] public IEnumerable<SiteTemplate> Get() Returns IEnumerable<SiteTemplate>"
  },
  "api/Oqtane.Controllers.SqlController.html": {
    "href": "api/Oqtane.Controllers.SqlController.html",
    "title": "Class SqlController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SqlController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SqlController : Controller Inheritance object ControllerBase Controller SqlController Constructors SqlController(ITenantRepository, ISqlRepository, ILogManager) public SqlController(ITenantRepository tenants, ISqlRepository sql, ILogManager logger) Parameters tenants ITenantRepository sql ISqlRepository logger ILogManager Methods Post(SqlQuery) [HttpPost] [Authorize(Roles = \"Host Users\")] public SqlQuery Post(SqlQuery sqlquery) Parameters sqlquery SqlQuery Returns SqlQuery"
  },
  "api/Oqtane.Controllers.SyncController.html": {
    "href": "api/Oqtane.Controllers.SyncController.html",
    "title": "Class SyncController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SyncController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SyncController : Controller Inheritance object ControllerBase Controller SyncController Constructors SyncController(ISyncManager, ITenantManager) public SyncController(ISyncManager syncManager, ITenantManager tenantManager) Parameters syncManager ISyncManager tenantManager ITenantManager Methods Get(string) [HttpGet(\"{lastSyncDate}\")] public Sync Get(string lastSyncDate) Parameters lastSyncDate string Returns Sync"
  },
  "api/Oqtane.Controllers.SystemController.html": {
    "href": "api/Oqtane.Controllers.SystemController.html",
    "title": "Class SystemController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SystemController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class SystemController : Controller Inheritance object ControllerBase Controller SystemController Constructors SystemController(IWebHostEnvironment, IConfigManager) public SystemController(IWebHostEnvironment environment, IConfigManager configManager) Parameters environment IWebHostEnvironment configManager IConfigManager Methods Get() [HttpGet(\"icons\")] public Dictionary<string, string> Get() Returns Dictionary<string, string> Get(string) [HttpGet] [Authorize(Roles = \"Host Users\")] public Dictionary<string, object> Get(string type) Parameters type string Returns Dictionary<string, object> Get(string, object) [HttpGet(\"{key}/{value}\")] [Authorize(Roles = \"Host Users\")] public object Get(string key, object value) Parameters key string value object Returns object Post(Dictionary<string, object>) [HttpPost] [Authorize(Roles = \"Host Users\")] public void Post(Dictionary<string, object> settings) Parameters settings Dictionary<string, object>"
  },
  "api/Oqtane.Controllers.TenantController.html": {
    "href": "api/Oqtane.Controllers.TenantController.html",
    "title": "Class TenantController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class TenantController : Controller Inheritance object ControllerBase Controller TenantController Constructors TenantController(ITenantRepository) public TenantController(ITenantRepository tenants) Parameters tenants ITenantRepository Methods Get() [HttpGet] [Authorize(Roles = \"Host Users\")] public IEnumerable<Tenant> Get() Returns IEnumerable<Tenant> Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Host Users\")] public Tenant Get(int id) Parameters id int Returns Tenant"
  },
  "api/Oqtane.Controllers.ThemeController.html": {
    "href": "api/Oqtane.Controllers.ThemeController.html",
    "title": "Class ThemeController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class ThemeController : Controller Inheritance object ControllerBase Controller ThemeController Constructors ThemeController(IThemeRepository, IInstallationManager, IWebHostEnvironment, ITenantManager, ISyncManager, ILogManager, IServiceProvider) public ThemeController(IThemeRepository themes, IInstallationManager installationManager, IWebHostEnvironment environment, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger, IServiceProvider serviceProvider) Parameters themes IThemeRepository installationManager IInstallationManager environment IWebHostEnvironment tenantManager ITenantManager syncManager ISyncManager logger ILogManager serviceProvider IServiceProvider Methods Delete(string) [HttpDelete(\"{themename}\")] [Authorize(Roles = \"Host Users\")] public void Delete(string themename) Parameters themename string Get() [HttpGet] [Authorize(Roles = \"Registered Users\")] public IEnumerable<Theme> Get() Returns IEnumerable<Theme> Get(int, string) [HttpGet(\"{id}\")] public Theme Get(int id, string siteid) Parameters id int siteid string Returns Theme GetTemplates() [HttpGet(\"templates\")] [Authorize(Roles = \"Host Users\")] public List<Template> GetTemplates() Returns List<Template> Post(Theme) [HttpPost] [Authorize(Roles = \"Host Users\")] public Theme Post(Theme theme) Parameters theme Theme Returns Theme Put(int, Theme) [HttpPut(\"{id}\")] [Authorize(Roles = \"Administrators\")] public void Put(int id, Theme theme) Parameters id int theme Theme"
  },
  "api/Oqtane.Controllers.UrlMappingController.html": {
    "href": "api/Oqtane.Controllers.UrlMappingController.html",
    "title": "Class UrlMappingController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UrlMappingController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class UrlMappingController : Controller Inheritance object ControllerBase Controller UrlMappingController Constructors UrlMappingController(IUrlMappingRepository, ISyncManager, ILogManager, ITenantManager) public UrlMappingController(IUrlMappingRepository urlMappings, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters urlMappings IUrlMappingRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Roles = \"Administrators\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Administrators\")] public UrlMapping Get(int id) Parameters id int Returns UrlMapping Get(int, string) [HttpGet(\"url/{siteid}\")] public UrlMapping Get(int siteid, string url) Parameters siteid int url string Returns UrlMapping Get(string, string) [HttpGet] [Authorize(Roles = \"Administrators\")] public IEnumerable<UrlMapping> Get(string siteid, string ismapped) Parameters siteid string ismapped string Returns IEnumerable<UrlMapping> Post(UrlMapping) [HttpPost] [Authorize(Roles = \"Administrators\")] public UrlMapping Post(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns UrlMapping Put(int, UrlMapping) [HttpPut(\"{id}\")] [Authorize(Roles = \"Administrators\")] public UrlMapping Put(int id, UrlMapping urlMapping) Parameters id int urlMapping UrlMapping Returns UrlMapping"
  },
  "api/Oqtane.Controllers.UserController.html": {
    "href": "api/Oqtane.Controllers.UserController.html",
    "title": "Class UserController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class UserController : Controller Inheritance object ControllerBase Controller UserController Constructors UserController(IUserRepository, ITenantManager, IUserManager, ISiteRepository, IUserPermissions, ISettingRepository, IJwtManager, IFileRepository, ILogManager) public UserController(IUserRepository users, ITenantManager tenantManager, IUserManager userManager, ISiteRepository sites, IUserPermissions userPermissions, ISettingRepository settings, IJwtManager jwtManager, IFileRepository files, ILogManager logger) Parameters users IUserRepository tenantManager ITenantManager userManager IUserManager sites ISiteRepository userPermissions IUserPermissions settings ISettingRepository jwtManager IJwtManager files IFileRepository logger ILogManager Methods Authenticate() [HttpGet(\"authenticate\")] public User Authenticate() Returns User Delete(int, string) [HttpDelete(\"{id}\")] [Authorize(Policy = \"User:Write:Administrators\")] public Task Delete(int id, string siteid) Parameters id int siteid string Returns Task Forgot(User) [HttpPost(\"forgot\")] public Task Forgot(User user) Parameters user User Returns Task Get(int, string) [HttpGet(\"{id}\")] [Authorize] public User Get(int id, string siteid) Parameters id int siteid string Returns User Get(string, string, string) [HttpGet(\"name/{name}/{email}\")] public User Get(string name, string email, string siteid) Parameters name string email string siteid string Returns User Import(string, string, string) [HttpPost(\"import\")] [Authorize(Roles = \"Administrators\")] public Task<Dictionary<string, string>> Import(string siteid, string fileid, string notify) Parameters siteid string fileid string notify string Returns Task<Dictionary<string, string>> Link(User, string, string, string, string) [HttpPost(\"link\")] public Task<User> Link(User user, string token, string type, string key, string name) Parameters user User token string type string key string name string Returns Task<User> Login(User, bool, bool) [HttpPost(\"login\")] public Task<User> Login(User user, bool setCookie, bool isPersistent) Parameters user User setCookie bool isPersistent bool Returns Task<User> Logout(User) [HttpPost(\"logout\")] [Authorize] public Task Logout(User user) Parameters user User Returns Task PasswordRequirements(int) [HttpGet(\"passwordrequirements/{siteid}\")] public Dictionary<string, string> PasswordRequirements(int siteid) Parameters siteid int Returns Dictionary<string, string> PersonalAccessToken() [HttpGet(\"personalaccesstoken\")] [Authorize(Roles = \"Administrators\")] public string PersonalAccessToken() Returns string Post(User) [HttpPost] public Task<User> Post(User user) Parameters user User Returns Task<User> Put(int, User) [HttpPut(\"{id}\")] [Authorize] public Task<User> Put(int id, User user) Parameters id int user User Returns Task<User> Reset(User, string) [HttpPost(\"reset\")] public Task<User> Reset(User user, string token) Parameters user User token string Returns Task<User> Token() [HttpGet(\"token\")] [Authorize(Roles = \"Registered Users\")] public string Token() Returns string TwoFactor(User, string) [HttpPost(\"twofactor\")] public User TwoFactor(User user, string token) Parameters user User token string Returns User Validate(string) [HttpGet(\"validate/{password}\")] public Task<bool> Validate(string password) Parameters password string Returns Task<bool> Verify(User, string) [HttpPost(\"verify\")] public Task<User> Verify(User user, string token) Parameters user User token string Returns Task<User>"
  },
  "api/Oqtane.Controllers.UserRoleController.html": {
    "href": "api/Oqtane.Controllers.UserRoleController.html",
    "title": "Class UserRoleController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserRoleController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class UserRoleController : Controller Inheritance object ControllerBase Controller UserRoleController Constructors UserRoleController(IUserRoleRepository, IRoleRepository, IUserPermissions, ITenantManager, ISyncManager, ILogManager) public UserRoleController(IUserRoleRepository userRoles, IRoleRepository roles, IUserPermissions userPermissions, ITenantManager tenantManager, ISyncManager syncManager, ILogManager logger) Parameters userRoles IUserRoleRepository roles IRoleRepository userPermissions IUserPermissions tenantManager ITenantManager syncManager ISyncManager logger ILogManager Methods Delete(int) [HttpDelete(\"{id}\")] [Authorize(Policy = \"UserRole:Write:Administrators\")] public void Delete(int id) Parameters id int Get(int) [HttpGet(\"{id}\")] [Authorize(Roles = \"Registered Users\")] public UserRole Get(int id) Parameters id int Returns UserRole Get(string, string, string) [HttpGet] [Authorize(Roles = \"Registered Users\")] public IEnumerable<UserRole> Get(string siteid, string userid = null, string rolename = null) Parameters siteid string userid string rolename string Returns IEnumerable<UserRole> Post(UserRole) [HttpPost] [Authorize(Policy = \"UserRole:Write:Administrators\")] public UserRole Post(UserRole userRole) Parameters userRole UserRole Returns UserRole Put(int, UserRole) [HttpPut(\"{id}\")] [Authorize(Policy = \"UserRole:Write:Administrators\")] public UserRole Put(int id, UserRole userRole) Parameters id int userRole UserRole Returns UserRole"
  },
  "api/Oqtane.Controllers.VisitorController.html": {
    "href": "api/Oqtane.Controllers.VisitorController.html",
    "title": "Class VisitorController | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class VisitorController Namespace Oqtane.Controllers Assembly Oqtane.Server.dll [Route(\"api/[controller]\")] public class VisitorController : Controller Inheritance object ControllerBase Controller VisitorController Constructors VisitorController(IVisitorRepository, ILogManager, ITenantManager) public VisitorController(IVisitorRepository visitors, ILogManager logger, ITenantManager tenantManager) Parameters visitors IVisitorRepository logger ILogManager tenantManager ITenantManager Methods Get(int) [HttpGet(\"{id}\")] public Visitor Get(int id) Parameters id int Returns Visitor Get(string, string) [HttpGet] [Authorize(Roles = \"Administrators\")] public IEnumerable<Visitor> Get(string siteid, string fromdate) Parameters siteid string fromdate string Returns IEnumerable<Visitor>"
  },
  "api/Oqtane.Controllers.html": {
    "href": "api/Oqtane.Controllers.html",
    "title": "Namespace Oqtane.Controllers | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Controllers TODO: Please document what this namespace is for. Classes AliasController DatabaseController FileController FolderController InstallationController JobController JobLogController LanguageController LocalizationController LogController ModuleController ModuleControllerBase ModuleDefinitionController NotificationController PackageController PageController PageModuleController ProfileController RoleController SettingController SiteController SiteTemplateController SqlController SyncController SystemController TenantController ThemeController UrlMappingController UserController UserRoleController VisitorController Structs InstallationController.ClientAssembly"
  },
  "api/Oqtane.Documentation.InternalApi_DoNotUse_MayChangeWithoutNotice.html": {
    "href": "api/Oqtane.Documentation.InternalApi_DoNotUse_MayChangeWithoutNotice.html",
    "title": "Class InternalApi_DoNotUse_MayChangeWithoutNotice | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InternalApi_DoNotUse_MayChangeWithoutNotice Namespace Oqtane.Documentation Assembly Oqtane.Shared.dll This attribute serves as metadata for other things to mark them as internal APIs. Use this on stuff you want to document publicly, but mark as internal so people are warned [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] [PublicApi] public class InternalApi_DoNotUse_MayChangeWithoutNotice : Attribute Inheritance object Attribute InternalApi_DoNotUse_MayChangeWithoutNotice Constructors InternalApi_DoNotUse_MayChangeWithoutNotice() The [InternalApi_DoNotUse_MayChangeWithoutNotice] attribute can be used without additional comment. public InternalApi_DoNotUse_MayChangeWithoutNotice() InternalApi_DoNotUse_MayChangeWithoutNotice(string) Constructor with optional comment [InternalApi_DoNotUse_MayChangeWithoutNotice(some-comment)]. public InternalApi_DoNotUse_MayChangeWithoutNotice(string comment) Parameters comment string Reason why it's internal, optional"
  },
  "api/Oqtane.Documentation.PrivateApi.html": {
    "href": "api/Oqtane.Documentation.PrivateApi.html",
    "title": "Class PrivateApi | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PrivateApi Namespace Oqtane.Documentation Assembly Oqtane.Shared.dll This attribute marks classes, methods, etc. as private APIs So they should not be publicly documented. By default, all APIs are private, so you only need this attribute on children of classes marked with [PublicApi]. If you attach this attribute to a class like this: [PrivateApi] public class YourClass { } or like this [PrivateApi(\"Reason why the API should remain private\")] public class YourClass { } or in combination with PublicApi [PublicApi] public class YourClass { public string Name; [PrivateApi(\"Don't publish this - should only be used internally\")] public string InternalSpecialName; } It will result in this class, method etc. to not be documented in the docs.oqtane.org. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] [PublicApi] public class PrivateApi : Attribute Inheritance object Attribute PrivateApi Constructors PrivateApi() The [PrivateApi] attribute can be used without additional comment. public PrivateApi() PrivateApi(string) Constructor with optional comment [PrivateApi(some-comment)]. public PrivateApi(string comment) Parameters comment string Reason why it's private, optional"
  },
  "api/Oqtane.Documentation.PublicApi.html": {
    "href": "api/Oqtane.Documentation.PublicApi.html",
    "title": "Class PublicApi | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PublicApi Namespace Oqtane.Documentation Assembly Oqtane.Shared.dll This attribute marks classes, properties etc. as public APIs. Any API / code with this attribute will be published in the docs. You can apply it to anything, but usually you will only need it on classes. If you attach this attribute to a class like this: [PublicApi] public class YourClass { } or like this [PublicApi(\"This is stable code\")] public class YourClass { } It will result in this class, method etc. to be publicly documented in the docs.oqtane.org. If you want the entire class to be documented, just add this to the class. To exclude certain methods or properties add a PrivateApi, InternalApi or WorkInProgress attribute. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] [PublicApi] public class PublicApi : Attribute Inheritance object Attribute PublicApi Constructors PublicApi() The [PublicApi] attribute can usually be used without additional comment. public PublicApi() PublicApi(string) Constructor with optional comment [PublicApi(some-comment)] public PublicApi(string comment) Parameters comment string Reason why it's public, optional"
  },
  "api/Oqtane.Documentation.WorkInProgressApi.html": {
    "href": "api/Oqtane.Documentation.WorkInProgressApi.html",
    "title": "Class WorkInProgressApi | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class WorkInProgressApi Namespace Oqtane.Documentation Assembly Oqtane.Shared.dll This attribute marks APIs to be publicly documented with a clear warning that it's work in progress. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] [PublicApi] public class WorkInProgressApi : Attribute Inheritance object Attribute WorkInProgressApi Constructors WorkInProgressApi(string) The [WorkInProgressApi(some-comment)] attributes must always have a comment why they are WIP. public WorkInProgressApi(string comment) Parameters comment string Reason why it's WIP, required"
  },
  "api/Oqtane.Documentation.html": {
    "href": "api/Oqtane.Documentation.html",
    "title": "Namespace Oqtane.Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Documentation This namespace contains attributes like PublicApi which mark code as public, private, internal, etc. Depending on what attributes you add to your code it will appear in the generated docs - and possibly have a warning or something attached. Typical use: [PublicApi] public class YourClass { // this will be documented without any special comments // because we're not using the <summary> tag public string Name; /// <summary> /// This will be documented with this text in the summary /// </summary> public string Something; /// <summary> /// This won't appear in the public documentation /// </summary> [PrivateApi(\"Don't publish this - should only be used internally\")] public string InternalSpecialName; /// <summary> /// This will appear in the docs, but the Work-In-Progress will be clearly visible /// </summary> [WorkInProgressApi(\"We're not done yet, may change\")] public string NotDoneYet; /// <summary> /// This will appear in the docs, but with a warning /// </summary> [InternalApi_DoNotUse_MayChangeWithoutNotice(\"This may help you, but please don't use it\")] public string YouShouldKnowAboutThisButNotUseIt; } Classes InternalApi_DoNotUse_MayChangeWithoutNotice This attribute serves as metadata for other things to mark them as internal APIs. Use this on stuff you want to document publicly, but mark as internal so people are warned PrivateApi This attribute marks classes, methods, etc. as private APIs So they should not be publicly documented. By default, all APIs are private, so you only need this attribute on children of classes marked with [PublicApi]. PublicApi This attribute marks classes, properties etc. as public APIs. Any API / code with this attribute will be published in the docs. You can apply it to anything, but usually you will only need it on classes. WorkInProgressApi This attribute marks APIs to be publicly documented with a clear warning that it's work in progress."
  },
  "api/Oqtane.Enums.LogFunction.html": {
    "href": "api/Oqtane.Enums.LogFunction.html",
    "title": "Enum LogFunction | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum LogFunction Namespace Oqtane.Enums Assembly Oqtane.Shared.dll public enum LogFunction Fields Create = 0 Delete = 3 Other = 5 Read = 1 Security = 4 Update = 2"
  },
  "api/Oqtane.Enums.MigrationType.html": {
    "href": "api/Oqtane.Enums.MigrationType.html",
    "title": "Enum MigrationType | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum MigrationType Namespace Oqtane.Enums Assembly Oqtane.Shared.dll public enum MigrationType Fields Down = 1 Up = 0"
  },
  "api/Oqtane.Enums.html": {
    "href": "api/Oqtane.Enums.html",
    "title": "Namespace Oqtane.Enums | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Enums TODO: Please document what this namespace is for. Enums LogFunction MigrationType"
  },
  "api/Oqtane.Extensions.ApplicationBuilderExtensions.html": {
    "href": "api/Oqtane.Extensions.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ApplicationBuilderExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class ApplicationBuilderExtensions Inheritance object ApplicationBuilderExtensions Methods ConfigureOqtaneAssemblies(IApplicationBuilder, IWebHostEnvironment) public static IApplicationBuilder ConfigureOqtaneAssemblies(this IApplicationBuilder app, IWebHostEnvironment env) Parameters app IApplicationBuilder env IWebHostEnvironment Returns IApplicationBuilder UseExceptionMiddleWare(IApplicationBuilder) public static IApplicationBuilder UseExceptionMiddleWare(this IApplicationBuilder builder) Parameters builder IApplicationBuilder Returns IApplicationBuilder UseJwtAuthorization(IApplicationBuilder) public static IApplicationBuilder UseJwtAuthorization(this IApplicationBuilder builder) Parameters builder IApplicationBuilder Returns IApplicationBuilder UseOqtaneLocalization(IApplicationBuilder) public static IApplicationBuilder UseOqtaneLocalization(this IApplicationBuilder app) Parameters app IApplicationBuilder Returns IApplicationBuilder UseTenantResolution(IApplicationBuilder) public static IApplicationBuilder UseTenantResolution(this IApplicationBuilder builder) Parameters builder IApplicationBuilder Returns IApplicationBuilder"
  },
  "api/Oqtane.Extensions.CacheExtensions.html": {
    "href": "api/Oqtane.Extensions.CacheExtensions.html",
    "title": "Class CacheExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class CacheExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class CacheExtensions Inheritance object CacheExtensions Methods GetOrCreateAsync<TItem>(IMemoryCache, string, Func<ICacheEntry, Task<TItem>>, bool) public static Task<TItem> GetOrCreateAsync<TItem>(this IMemoryCache cache, string key, Func<ICacheEntry, Task<TItem>> factory, bool track) Parameters cache IMemoryCache key string factory Func<ICacheEntry, Task<TItem>> track bool Returns Task<TItem> Type Parameters TItem GetOrCreate<TItem>(IMemoryCache, string, Func<ICacheEntry, TItem>, bool) public static TItem GetOrCreate<TItem>(this IMemoryCache cache, string key, Func<ICacheEntry, TItem> factory, bool track) Parameters cache IMemoryCache key string factory Func<ICacheEntry, TItem> track bool Returns TItem Type Parameters TItem Remove(IMemoryCache, string, bool) public static void Remove(this IMemoryCache cache, string key, bool track) Parameters cache IMemoryCache key string track bool"
  },
  "api/Oqtane.Extensions.ClaimsPrincipalExtensions.html": {
    "href": "api/Oqtane.Extensions.ClaimsPrincipalExtensions.html",
    "title": "Class ClaimsPrincipalExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ClaimsPrincipalExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class ClaimsPrincipalExtensions Inheritance object ClaimsPrincipalExtensions Methods IsOnlyInRole(ClaimsPrincipal, string) public static bool IsOnlyInRole(this ClaimsPrincipal claimsPrincipal, string role) Parameters claimsPrincipal ClaimsPrincipal role string Returns bool Roles(ClaimsPrincipal) public static string Roles(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns string SiteId(ClaimsPrincipal) public static int SiteId(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns int SiteKey(ClaimsPrincipal) public static string SiteKey(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns string TenantId(ClaimsPrincipal) public static int TenantId(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns int UserId(ClaimsPrincipal) public static int UserId(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns int Username(ClaimsPrincipal) public static string Username(this ClaimsPrincipal claimsPrincipal) Parameters claimsPrincipal ClaimsPrincipal Returns string"
  },
  "api/Oqtane.Extensions.DbContextOptionsBuilderExtensions.html": {
    "href": "api/Oqtane.Extensions.DbContextOptionsBuilderExtensions.html",
    "title": "Class DbContextOptionsBuilderExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DbContextOptionsBuilderExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class DbContextOptionsBuilderExtensions Inheritance object DbContextOptionsBuilderExtensions Methods UseOqtaneDatabase(DbContextOptionsBuilder, IDatabase, string) public static DbContextOptionsBuilder UseOqtaneDatabase(this DbContextOptionsBuilder optionsBuilder, IDatabase database, string connectionString) Parameters optionsBuilder DbContextOptionsBuilder database IDatabase connectionString string Returns DbContextOptionsBuilder"
  },
  "api/Oqtane.Extensions.DictionaryExtensions.html": {
    "href": "api/Oqtane.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DictionaryExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class DictionaryExtensions Inheritance object DictionaryExtensions Methods GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue, bool) public static TValue GetValue<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue, bool nullOrEmptyValueIsValid = false) Parameters dictionary Dictionary<TKey, TValue> key TKey defaultValue TValue nullOrEmptyValueIsValid bool Returns TValue Type Parameters TKey TValue"
  },
  "api/Oqtane.Extensions.HttpContextExtensions.html": {
    "href": "api/Oqtane.Extensions.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class HttpContextExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class HttpContextExtensions Inheritance object HttpContextExtensions Methods GetAlias(HttpContext) public static Alias GetAlias(this HttpContext context) Parameters context HttpContext Returns Alias GetSiteSettings(HttpContext) public static Dictionary<string, string> GetSiteSettings(this HttpContext context) Parameters context HttpContext Returns Dictionary<string, string>"
  },
  "api/Oqtane.Extensions.MimeUtilities.html": {
    "href": "api/Oqtane.Extensions.MimeUtilities.html",
    "title": "Class MimeUtilities | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MimeUtilities Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class MimeUtilities Inheritance object MimeUtilities Methods GetMimeType(File) Return Mime content type based on file extension public static string GetMimeType(this File file) Parameters file File Returns string GetMimeType(string) Return Mime content type based on file extension public static string GetMimeType(string fileName) Parameters fileName string File name Returns string"
  },
  "api/Oqtane.Extensions.OqtaneSiteAuthenticationBuilderExtensions.html": {
    "href": "api/Oqtane.Extensions.OqtaneSiteAuthenticationBuilderExtensions.html",
    "title": "Class OqtaneSiteAuthenticationBuilderExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class OqtaneSiteAuthenticationBuilderExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class OqtaneSiteAuthenticationBuilderExtensions Inheritance object OqtaneSiteAuthenticationBuilderExtensions Methods WithSiteAuthentication(OqtaneSiteOptionsBuilder) public static OqtaneSiteOptionsBuilder WithSiteAuthentication(this OqtaneSiteOptionsBuilder builder) Parameters builder OqtaneSiteOptionsBuilder Returns OqtaneSiteOptionsBuilder"
  },
  "api/Oqtane.Extensions.OqtaneSiteIdentityBuilderExtensions.html": {
    "href": "api/Oqtane.Extensions.OqtaneSiteIdentityBuilderExtensions.html",
    "title": "Class OqtaneSiteIdentityBuilderExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class OqtaneSiteIdentityBuilderExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class OqtaneSiteIdentityBuilderExtensions Inheritance object OqtaneSiteIdentityBuilderExtensions Methods WithSiteIdentity(OqtaneSiteOptionsBuilder) public static OqtaneSiteOptionsBuilder WithSiteIdentity(this OqtaneSiteOptionsBuilder builder) Parameters builder OqtaneSiteOptionsBuilder Returns OqtaneSiteOptionsBuilder"
  },
  "api/Oqtane.Extensions.PermissionExtension.html": {
    "href": "api/Oqtane.Extensions.PermissionExtension.html",
    "title": "Class PermissionExtension | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionExtension Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class PermissionExtension Inheritance object PermissionExtension Methods EncodePermissions(IEnumerable<Permission>) public static string EncodePermissions(this IEnumerable<Permission> permissions) Parameters permissions IEnumerable<Permission> Returns string"
  },
  "api/Oqtane.Extensions.StringExtensions.html": {
    "href": "api/Oqtane.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class StringExtensions Namespace Oqtane.Extensions Assembly Oqtane.Server.dll public static class StringExtensions Inheritance object StringExtensions Methods ReplaceMultiple(string, string[], string) public static string ReplaceMultiple(this string s, string[] oldValues, string newValue) Parameters s string oldValues string[] newValue string Returns string StartWithAnyOf(string, IEnumerable<string>) public static bool StartWithAnyOf(this string s, IEnumerable<string> list) Parameters s string list IEnumerable<string> Returns bool"
  },
  "api/Oqtane.Extensions.html": {
    "href": "api/Oqtane.Extensions.html",
    "title": "Namespace Oqtane.Extensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Extensions TODO: Please document what this namespace is for. Classes ApplicationBuilderExtensions CacheExtensions ClaimsPrincipalExtensions DbContextOptionsBuilderExtensions DictionaryExtensions HttpContextExtensions MimeUtilities OqtaneSiteAuthenticationBuilderExtensions OqtaneSiteIdentityBuilderExtensions PermissionExtension StringExtensions"
  },
  "api/Oqtane.Head.html": {
    "href": "api/Oqtane.Head.html",
    "title": "Class Head | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Head Namespace Oqtane Assembly Oqtane.Client.dll public class Head : ComponentBase Inheritance object ComponentBase Head Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Dispose() public void Dispose() OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized()"
  },
  "api/Oqtane.IconResources.html": {
    "href": "api/Oqtane.IconResources.html",
    "title": "Class IconResources | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class IconResources Namespace Oqtane Assembly Oqtane.Client.dll Dummy class used to collect shared resource strings for this application public class IconResources Inheritance object IconResources Remarks This class is mostly used with IStringLocalizer and IHtmlLocalizer interfaces. The class must reside at the project root."
  },
  "api/Oqtane.Infrastructure.AliasAccessor.html": {
    "href": "api/Oqtane.Infrastructure.AliasAccessor.html",
    "title": "Class AliasAccessor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AliasAccessor Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class AliasAccessor : IAliasAccessor Inheritance object AliasAccessor Implements IAliasAccessor Constructors AliasAccessor(IHttpContextAccessor) public AliasAccessor(IHttpContextAccessor httpContextAccessor) Parameters httpContextAccessor IHttpContextAccessor Properties Alias public Alias Alias { get; } Property Value Alias"
  },
  "api/Oqtane.Infrastructure.ConfigManager.html": {
    "href": "api/Oqtane.Infrastructure.ConfigManager.html",
    "title": "Class ConfigManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ConfigManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class ConfigManager : IConfigManager Inheritance object ConfigManager Implements IConfigManager Constructors ConfigManager(IConfigurationRoot) public ConfigManager(IConfigurationRoot config) Parameters config IConfigurationRoot Methods AddOrUpdateSetting<T>(string, string, T, bool) public void AddOrUpdateSetting<T>(string file, string key, T value, bool reload) Parameters file string key string value T reload bool Type Parameters T AddOrUpdateSetting<T>(string, T, bool) public void AddOrUpdateSetting<T>(string key, T value, bool reload) Parameters key string value T reload bool Type Parameters T GetConnectionString() public string GetConnectionString() Returns string GetConnectionString(string) public string GetConnectionString(string name) Parameters name string Returns string GetInstallationId() public string GetInstallationId() Returns string GetSection(string) public IConfigurationSection GetSection(string key) Parameters key string Returns IConfigurationSection GetSetting<T>(string, string, T) public T GetSetting<T>(string sectionKey, string settingKey, T defaultValue) Parameters sectionKey string settingKey string defaultValue T Returns T Type Parameters T GetSetting<T>(string, T) public T GetSetting<T>(string sectionKey, T defaultValue) Parameters sectionKey string defaultValue T Returns T Type Parameters T GetSettings(string) public Dictionary<string, string> GetSettings(string sectionKey) Parameters sectionKey string Returns Dictionary<string, string> IsInstalled() public bool IsInstalled() Returns bool Reload() public void Reload() RemoveSetting(string, bool) public void RemoveSetting(string key, bool reload) Parameters key string reload bool RemoveSetting(string, string, bool) public void RemoveSetting(string file, string key, bool reload) Parameters file string key string reload bool"
  },
  "api/Oqtane.Infrastructure.DatabaseManager.html": {
    "href": "api/Oqtane.Infrastructure.DatabaseManager.html",
    "title": "Class DatabaseManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DatabaseManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class DatabaseManager : IDatabaseManager Inheritance object DatabaseManager Implements IDatabaseManager Constructors DatabaseManager(IConfigManager, IServiceScopeFactory, IMemoryCache, IConfigManager, ILogger<DatabaseManager>) public DatabaseManager(IConfigManager config, IServiceScopeFactory serviceScopeFactory, IMemoryCache cache, IConfigManager configManager, ILogger<DatabaseManager> filelogger) Parameters config IConfigManager serviceScopeFactory IServiceScopeFactory cache IMemoryCache configManager IConfigManager filelogger ILogger<DatabaseManager> Methods AddEFMigrationsHistory(ISqlRepository, string, string, string, bool) public void AddEFMigrationsHistory(ISqlRepository sql, string connectionString, string databaseType, string version, bool isMaster) Parameters sql ISqlRepository connectionString string databaseType string version string isMaster bool Install() public Installation Install() Returns Installation Install(InstallConfig) public Installation Install(InstallConfig install) Parameters install InstallConfig Returns Installation IsInstalled() public Installation IsInstalled() Returns Installation MigrateConnectionString(InstallationContext, Tenant) public string MigrateConnectionString(InstallationContext db, Tenant tenant) Parameters db InstallationContext tenant Tenant Returns string UpdateConnectionString(string) public void UpdateConnectionString(string connectionString) Parameters connectionString string UpdateDatabaseType(string) public void UpdateDatabaseType(string databaseType) Parameters databaseType string"
  },
  "api/Oqtane.Infrastructure.EventDistributorHostedService.html": {
    "href": "api/Oqtane.Infrastructure.EventDistributorHostedService.html",
    "title": "Class EventDistributorHostedService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class EventDistributorHostedService Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class EventDistributorHostedService Inheritance object EventDistributorHostedService Constructors EventDistributorHostedService(IServiceProvider, ISyncManager, IMemoryCache, ILogger<EventDistributorHostedService>) public EventDistributorHostedService(IServiceProvider serviceProvider, ISyncManager syncManager, IMemoryCache cache, ILogger<EventDistributorHostedService> filelogger) Parameters serviceProvider IServiceProvider syncManager ISyncManager cache IMemoryCache filelogger ILogger<EventDistributorHostedService> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() StartAsync(CancellationToken) Triggered when the application host is ready to start the service. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the start process has been aborted. Returns Task A Task that represents the asynchronous Start operation. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the shutdown process should no longer be graceful. Returns Task A Task that represents the asynchronous Stop operation."
  },
  "api/Oqtane.Infrastructure.EventSubscribers.CacheInvalidationEventSubscriber.html": {
    "href": "api/Oqtane.Infrastructure.EventSubscribers.CacheInvalidationEventSubscriber.html",
    "title": "Class CacheInvalidationEventSubscriber | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class CacheInvalidationEventSubscriber Namespace Oqtane.Infrastructure.EventSubscribers Assembly Oqtane.Server.dll public class CacheInvalidationEventSubscriber : IEventSubscriber Inheritance object CacheInvalidationEventSubscriber Implements IEventSubscriber Constructors CacheInvalidationEventSubscriber(IMemoryCache) public CacheInvalidationEventSubscriber(IMemoryCache cache) Parameters cache IMemoryCache Methods EntityChanged(SyncEvent) public void EntityChanged(SyncEvent syncEvent) Parameters syncEvent SyncEvent"
  },
  "api/Oqtane.Infrastructure.EventSubscribers.html": {
    "href": "api/Oqtane.Infrastructure.EventSubscribers.html",
    "title": "Namespace Oqtane.Infrastructure.EventSubscribers | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Infrastructure.EventSubscribers Classes CacheInvalidationEventSubscriber"
  },
  "api/Oqtane.Infrastructure.ExampleSiteMigration.html": {
    "href": "api/Oqtane.Infrastructure.ExampleSiteMigration.html",
    "title": "Class ExampleSiteMigration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ExampleSiteMigration Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll [SiteMigration(\"localhost:44357\", \"01.00.00\")] public class ExampleSiteMigration : ISiteMigration Inheritance object ExampleSiteMigration Implements ISiteMigration"
  },
  "api/Oqtane.Infrastructure.FileLogger.html": {
    "href": "api/Oqtane.Infrastructure.FileLogger.html",
    "title": "Class FileLogger | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FileLogger Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class FileLogger Inheritance object FileLogger Constructors FileLogger(FileLoggerProvider, IWebHostEnvironment, IConfigManager) public FileLogger(FileLoggerProvider FileLoggerProvider, IWebHostEnvironment environment, IConfigManager configManager) Parameters FileLoggerProvider FileLoggerProvider environment IWebHostEnvironment configManager IConfigManager Fields _FileLoggerProvider protected readonly FileLoggerProvider _FileLoggerProvider Field Value FileLoggerProvider Methods BeginScope<TState>(TState) Begins a logical operation scope. public IDisposable BeginScope<TState>(TState state) Parameters state TState The identifier for the scope. Returns IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. public bool IsEnabled(LogLevel logLevel) Parameters logLevel LogLevel Level to be checked. Returns bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, string>) Writes a log entry. public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters logLevel LogLevel Entry will be written on this level. eventId EventId Id of the event. state TState The entry to be written. Can be also an object. exception Exception The exception related to this entry. formatter Func<TState, Exception, string> Function to create a string message of the state and exception. Type Parameters TState The type of the object to be written."
  },
  "api/Oqtane.Infrastructure.FileLoggerProvider.html": {
    "href": "api/Oqtane.Infrastructure.FileLoggerProvider.html",
    "title": "Class FileLoggerProvider | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FileLoggerProvider Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll FileLogger should only be used in scenarios where a database is not available or tenant/site cannot be determined (ie. during startup) [ProviderAlias(\"FileLogger\")] public class FileLoggerProvider Inheritance object FileLoggerProvider Constructors FileLoggerProvider(IWebHostEnvironment, IConfigManager) public FileLoggerProvider(IWebHostEnvironment environment, IConfigManager configManager) Parameters environment IWebHostEnvironment configManager IConfigManager Methods CreateLogger(string) Creates a new ILogger instance. public ILogger CreateLogger(string categoryName) Parameters categoryName string The category name for messages produced by the logger. Returns ILogger The instance of ILogger that was created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Oqtane.Infrastructure.HostedServiceBase.html": {
    "href": "api/Oqtane.Infrastructure.HostedServiceBase.html",
    "title": "Class HostedServiceBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class HostedServiceBase Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public abstract class HostedServiceBase Inheritance object HostedServiceBase Derived NotificationJob PurgeJob Constructors HostedServiceBase(IServiceScopeFactory) public HostedServiceBase(IServiceScopeFactory serviceScopeFactory) Parameters serviceScopeFactory IServiceScopeFactory Properties EndDate public DateTime? EndDate { get; set; } Property Value DateTime? Frequency public string Frequency { get; set; } Property Value string Interval public int Interval { get; set; } Property Value int IsEnabled public bool IsEnabled { get; set; } Property Value bool Name public string Name { get; set; } Property Value string RetentionHistory public int RetentionHistory { get; set; } Property Value int StartDate public DateTime? StartDate { get; set; } Property Value DateTime? Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ExecuteAsync(CancellationToken) protected Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task ExecuteJob(IServiceProvider) public virtual string ExecuteJob(IServiceProvider provider) Parameters provider IServiceProvider Returns string ExecuteJobAsync(IServiceProvider) public virtual Task<string> ExecuteJobAsync(IServiceProvider provider) Parameters provider IServiceProvider Returns Task<string> StartAsync(CancellationToken) Triggered when the application host is ready to start the service. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the start process has been aborted. Returns Task A Task that represents the asynchronous Start operation. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the shutdown process should no longer be graceful. Returns Task A Task that represents the asynchronous Stop operation."
  },
  "api/Oqtane.Infrastructure.IAliasAccessor.html": {
    "href": "api/Oqtane.Infrastructure.IAliasAccessor.html",
    "title": "Interface IAliasAccessor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IAliasAccessor Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IAliasAccessor Properties Alias Alias Alias { get; } Property Value Alias"
  },
  "api/Oqtane.Infrastructure.IConfigManager.html": {
    "href": "api/Oqtane.Infrastructure.IConfigManager.html",
    "title": "Interface IConfigManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IConfigManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IConfigManager Methods AddOrUpdateSetting<T>(string, string, T, bool) void AddOrUpdateSetting<T>(string file, string key, T value, bool reload) Parameters file string key string value T reload bool Type Parameters T AddOrUpdateSetting<T>(string, T, bool) void AddOrUpdateSetting<T>(string key, T value, bool reload) Parameters key string value T reload bool Type Parameters T GetConnectionString() string GetConnectionString() Returns string GetConnectionString(string) string GetConnectionString(string name) Parameters name string Returns string GetInstallationId() string GetInstallationId() Returns string GetSection(string) IConfigurationSection GetSection(string sectionKey) Parameters sectionKey string Returns IConfigurationSection GetSetting<T>(string, string, T) T GetSetting<T>(string sectionKey, string settingKey, T defaultValue) Parameters sectionKey string settingKey string defaultValue T Returns T Type Parameters T GetSetting<T>(string, T) T GetSetting<T>(string settingKey, T defaultValue) Parameters settingKey string defaultValue T Returns T Type Parameters T GetSettings(string) Dictionary<string, string> GetSettings(string sectionKey) Parameters sectionKey string Returns Dictionary<string, string> IsInstalled() bool IsInstalled() Returns bool Reload() void Reload() RemoveSetting(string, bool) void RemoveSetting(string key, bool reload) Parameters key string reload bool RemoveSetting(string, string, bool) void RemoveSetting(string file, string key, bool reload) Parameters file string key string reload bool"
  },
  "api/Oqtane.Infrastructure.IDatabaseManager.html": {
    "href": "api/Oqtane.Infrastructure.IDatabaseManager.html",
    "title": "Interface IDatabaseManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IDatabaseManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IDatabaseManager Methods Install() Installation Install() Returns Installation Install(InstallConfig) Installation Install(InstallConfig install) Parameters install InstallConfig Returns Installation IsInstalled() Installation IsInstalled() Returns Installation"
  },
  "api/Oqtane.Infrastructure.IEventSubscriber.html": {
    "href": "api/Oqtane.Infrastructure.IEventSubscriber.html",
    "title": "Interface IEventSubscriber | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IEventSubscriber Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IEventSubscriber Methods EntityChanged(SyncEvent) void EntityChanged(SyncEvent syncEvent) Parameters syncEvent SyncEvent"
  },
  "api/Oqtane.Infrastructure.IHostResources.html": {
    "href": "api/Oqtane.Infrastructure.IHostResources.html",
    "title": "Interface IHostResources | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IHostResources Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IHostResources Properties Resources [Obsolete(\"IHostResources is deprecated. Use module or theme scoped Resources in conjunction with ResourceLevel.Site instead.\", false)] List<Resource> Resources { get; } Property Value List<Resource>"
  },
  "api/Oqtane.Infrastructure.IInstallable.html": {
    "href": "api/Oqtane.Infrastructure.IInstallable.html",
    "title": "Interface IInstallable | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IInstallable Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IInstallable Methods Install(Tenant, string) bool Install(Tenant tenant, string version) Parameters tenant Tenant version string Returns bool Uninstall(Tenant) bool Uninstall(Tenant tenant) Parameters tenant Tenant Returns bool"
  },
  "api/Oqtane.Infrastructure.IInstallationManager.html": {
    "href": "api/Oqtane.Infrastructure.IInstallationManager.html",
    "title": "Interface IInstallationManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IInstallationManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IInstallationManager Methods InstallPackages() void InstallPackages() RegisterAssemblies() int RegisterAssemblies() Returns int RestartApplication() void RestartApplication() UninstallPackage(string) bool UninstallPackage(string PackageName) Parameters PackageName string Returns bool UpgradeFramework() Task UpgradeFramework() Returns Task"
  },
  "api/Oqtane.Infrastructure.ILocalizationManager.html": {
    "href": "api/Oqtane.Infrastructure.ILocalizationManager.html",
    "title": "Interface ILocalizationManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILocalizationManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ILocalizationManager Methods GetDefaultCulture() string GetDefaultCulture() Returns string GetInstalledCultures() string[] GetInstalledCultures() Returns string[] GetSupportedCultures() string[] GetSupportedCultures() Returns string[]"
  },
  "api/Oqtane.Infrastructure.ILogManager.html": {
    "href": "api/Oqtane.Infrastructure.ILogManager.html",
    "title": "Interface ILogManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILogManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ILogManager Methods Log(Log) void Log(Log log) Parameters log Log Log(LogLevel, object, LogFunction, Exception, string, params object[]) void Log(LogLevel level, object @class, LogFunction function, Exception exception, string message, params object[] args) Parameters level LogLevel class object function LogFunction exception Exception message string args object[] Log(LogLevel, object, LogFunction, string, params object[]) void Log(LogLevel level, object @class, LogFunction function, string message, params object[] args) Parameters level LogLevel class object function LogFunction message string args object[] Log(int, LogLevel, object, LogFunction, Exception, string, params object[]) void Log(int siteId, LogLevel level, object @class, LogFunction function, Exception exception, string message, params object[] args) Parameters siteId int level LogLevel class object function LogFunction exception Exception message string args object[] Log(int, LogLevel, object, LogFunction, string, params object[]) void Log(int siteId, LogLevel level, object @class, LogFunction function, string message, params object[] args) Parameters siteId int level LogLevel class object function LogFunction message string args object[]"
  },
  "api/Oqtane.Infrastructure.IServerStartup.html": {
    "href": "api/Oqtane.Infrastructure.IServerStartup.html",
    "title": "Interface IServerStartup | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IServerStartup Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IServerStartup Methods Configure(IApplicationBuilder, IWebHostEnvironment) void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters app IApplicationBuilder env IWebHostEnvironment ConfigureMvc(IMvcBuilder) void ConfigureMvc(IMvcBuilder mvcBuilder) Parameters mvcBuilder IMvcBuilder ConfigureServices(IServiceCollection) void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/Oqtane.Infrastructure.IServerStateManager.html": {
    "href": "api/Oqtane.Infrastructure.IServerStateManager.html",
    "title": "Interface IServerStateManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IServerStateManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IServerStateManager Methods GetServerState(string) ServerState GetServerState(string siteKey) Parameters siteKey string Returns ServerState"
  },
  "api/Oqtane.Infrastructure.ISiteMigration.html": {
    "href": "api/Oqtane.Infrastructure.ISiteMigration.html",
    "title": "Interface ISiteMigration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteMigration Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ISiteMigration Methods Down(Site, Alias) void Down(Site site, Alias alias) Parameters site Site alias Alias Up(Site, Alias) void Up(Site site, Alias alias) Parameters site Site alias Alias"
  },
  "api/Oqtane.Infrastructure.ISiteNamedOptions-1.html": {
    "href": "api/Oqtane.Infrastructure.ISiteNamedOptions-1.html",
    "title": "Interface ISiteNamedOptions<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteNamedOptions<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ISiteNamedOptions<TOptions> where TOptions : class, new() Type Parameters TOptions Methods Configure(string, TOptions, Alias, Dictionary<string, string>) void Configure(string name, TOptions options, Alias alias, Dictionary<string, string> sitesettings) Parameters name string options TOptions alias Alias sitesettings Dictionary<string, string>"
  },
  "api/Oqtane.Infrastructure.ISiteOptions-1.html": {
    "href": "api/Oqtane.Infrastructure.ISiteOptions-1.html",
    "title": "Interface ISiteOptions<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteOptions<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ISiteOptions<TOptions> where TOptions : class, new() Type Parameters TOptions Methods Configure(TOptions, Alias, Dictionary<string, string>) void Configure(TOptions options, Alias alias, Dictionary<string, string> sitesettings) Parameters options TOptions alias Alias sitesettings Dictionary<string, string>"
  },
  "api/Oqtane.Infrastructure.ISiteTemplate.html": {
    "href": "api/Oqtane.Infrastructure.ISiteTemplate.html",
    "title": "Interface ISiteTemplate | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteTemplate Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ISiteTemplate Properties Name string Name { get; } Property Value string Methods CreateSite(Site) List<PageTemplate> CreateSite(Site site) Parameters site Site Returns List<PageTemplate>"
  },
  "api/Oqtane.Infrastructure.ISyncManager.html": {
    "href": "api/Oqtane.Infrastructure.ISyncManager.html",
    "title": "Interface ISyncManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISyncManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ISyncManager Methods AddSyncEvent(Alias, string, int, string) void AddSyncEvent(Alias alias, string entityName, int entityId, string action) Parameters alias Alias entityName string entityId int action string AddSyncEvent(int, int, string, int, string) void AddSyncEvent(int tenantId, int siteId, string entityName, int entityId, string action) Parameters tenantId int siteId int entityName string entityId int action string AddSyncEvent(int, string, int, string) [Obsolete(\"AddSyncEvent(int tenantId, string entityName, int entityId, string action) is deprecated. Use AddSyncEvent(Alias alias, string entityName, int entityId, string action) instead.\", false)] void AddSyncEvent(int tenantId, string entityName, int entityId, string action) Parameters tenantId int entityName string entityId int action string GetSyncEvents(int, DateTime) List<SyncEvent> GetSyncEvents(int tenantId, DateTime lastSyncDate) Parameters tenantId int lastSyncDate DateTime Returns List<SyncEvent> Events EntityChanged event EventHandler<SyncEvent> EntityChanged Event Type EventHandler<SyncEvent>"
  },
  "api/Oqtane.Infrastructure.ITenantManager.html": {
    "href": "api/Oqtane.Infrastructure.ITenantManager.html",
    "title": "Interface ITenantManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITenantManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface ITenantManager Methods GetAlias() Alias GetAlias() Returns Alias GetTenant() Tenant GetTenant() Returns Tenant SetAlias(Alias) void SetAlias(Alias alias) Parameters alias Alias SetAlias(int, int) void SetAlias(int tenantId, int siteId) Parameters tenantId int siteId int SetTenant(int) void SetTenant(int tenantId) Parameters tenantId int"
  },
  "api/Oqtane.Infrastructure.IUpgradeManager.html": {
    "href": "api/Oqtane.Infrastructure.IUpgradeManager.html",
    "title": "Interface IUpgradeManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUpgradeManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public interface IUpgradeManager Methods Upgrade(Tenant, string) void Upgrade(Tenant tenant, string version) Parameters tenant Tenant version string"
  },
  "api/Oqtane.Infrastructure.InstallationManager.html": {
    "href": "api/Oqtane.Infrastructure.InstallationManager.html",
    "title": "Class InstallationManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InstallationManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class InstallationManager : IInstallationManager Inheritance object InstallationManager Implements IInstallationManager Constructors InstallationManager(IHostApplicationLifetime, IWebHostEnvironment, ILogger<InstallationManager>) public InstallationManager(IHostApplicationLifetime hostApplicationLifetime, IWebHostEnvironment environment, ILogger<InstallationManager> filelogger) Parameters hostApplicationLifetime IHostApplicationLifetime environment IWebHostEnvironment filelogger ILogger<InstallationManager> Methods InstallPackages() public void InstallPackages() InstallPackages(string, string) public static string InstallPackages(string webRootPath, string contentRootPath) Parameters webRootPath string contentRootPath string Returns string RegisterAssemblies() public int RegisterAssemblies() Returns int RestartApplication() public void RestartApplication() UninstallPackage(string) public bool UninstallPackage(string PackageName) Parameters PackageName string Returns bool UpgradeFramework() public Task UpgradeFramework() Returns Task"
  },
  "api/Oqtane.Infrastructure.Interfaces.ITokenReplace.html": {
    "href": "api/Oqtane.Infrastructure.Interfaces.ITokenReplace.html",
    "title": "Interface ITokenReplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITokenReplace Namespace Oqtane.Infrastructure.Interfaces Assembly Oqtane.Server.dll public interface ITokenReplace Methods AddSource(ITokenSource) void AddSource(ITokenSource source) Parameters source ITokenSource AddSource(IDictionary<string, object>) void AddSource(IDictionary<string, object> source) Parameters source IDictionary<string, object> AddSource(Func<IDictionary<string, object>>) void AddSource(Func<IDictionary<string, object>> sourceFunc) Parameters sourceFunc Func<IDictionary<string, object>> AddSource(string, ITokenSource) void AddSource(string name, ITokenSource source) Parameters name string source ITokenSource AddSource(string, IDictionary<string, object>) void AddSource(string name, IDictionary<string, object> source) Parameters name string source IDictionary<string, object> AddSource(string, Func<IDictionary<string, object>>) void AddSource(string name, Func<IDictionary<string, object>> sourceFunc) Parameters name string sourceFunc Func<IDictionary<string, object>> AddSource(string, object) void AddSource(string key, object value) Parameters key string value object AddSource(string, string, object) void AddSource(string name, string key, object value) Parameters name string key string value object ReplaceTokens(string) string ReplaceTokens(string source) Parameters source string Returns string"
  },
  "api/Oqtane.Infrastructure.Interfaces.html": {
    "href": "api/Oqtane.Infrastructure.Interfaces.html",
    "title": "Namespace Oqtane.Infrastructure.Interfaces | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Infrastructure.Interfaces Interfaces ITokenReplace"
  },
  "api/Oqtane.Infrastructure.LocalizationManager.html": {
    "href": "api/Oqtane.Infrastructure.LocalizationManager.html",
    "title": "Class LocalizationManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LocalizationManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class LocalizationManager : ILocalizationManager Inheritance object LocalizationManager Implements ILocalizationManager Constructors LocalizationManager(IOptions<LocalizationOptions>) public LocalizationManager(IOptions<LocalizationOptions> localizationOptions) Parameters localizationOptions IOptions<LocalizationOptions> Methods GetDefaultCulture() public string GetDefaultCulture() Returns string GetInstalledCultures() public string[] GetInstalledCultures() Returns string[] GetSupportedCultures() public string[] GetSupportedCultures() Returns string[]"
  },
  "api/Oqtane.Infrastructure.LocalizationOptions.html": {
    "href": "api/Oqtane.Infrastructure.LocalizationOptions.html",
    "title": "Class LocalizationOptions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LocalizationOptions Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class LocalizationOptions Inheritance object LocalizationOptions Properties DefaultCulture public string DefaultCulture { get; set; } Property Value string"
  },
  "api/Oqtane.Infrastructure.LogManager.html": {
    "href": "api/Oqtane.Infrastructure.LogManager.html",
    "title": "Class LogManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LogManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class LogManager : ILogManager Inheritance object LogManager Implements ILogManager Constructors LogManager(ILogRepository, ITenantManager, IConfigManager, IUserPermissions, IHttpContextAccessor, IUserRoleRepository, INotificationRepository) public LogManager(ILogRepository logs, ITenantManager tenantManager, IConfigManager config, IUserPermissions userPermissions, IHttpContextAccessor accessor, IUserRoleRepository userRoles, INotificationRepository notifications) Parameters logs ILogRepository tenantManager ITenantManager config IConfigManager userPermissions IUserPermissions accessor IHttpContextAccessor userRoles IUserRoleRepository notifications INotificationRepository Methods Log(Log) public void Log(Log log) Parameters log Log Log(LogLevel, object, LogFunction, Exception, string, params object[]) public void Log(LogLevel level, object @class, LogFunction function, Exception exception, string message, params object[] args) Parameters level LogLevel class object function LogFunction exception Exception message string args object[] Log(LogLevel, object, LogFunction, string, params object[]) public void Log(LogLevel level, object @class, LogFunction function, string message, params object[] args) Parameters level LogLevel class object function LogFunction message string args object[] Log(int, LogLevel, object, LogFunction, Exception, string, params object[]) public void Log(int siteId, LogLevel level, object @class, LogFunction function, Exception exception, string message, params object[] args) Parameters siteId int level LogLevel class object function LogFunction exception Exception message string args object[] Log(int, LogLevel, object, LogFunction, string, params object[]) public void Log(int siteId, LogLevel level, object @class, LogFunction function, string message, params object[] args) Parameters siteId int level LogLevel class object function LogFunction message string args object[]"
  },
  "api/Oqtane.Infrastructure.NotificationJob.html": {
    "href": "api/Oqtane.Infrastructure.NotificationJob.html",
    "title": "Class NotificationJob | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class NotificationJob Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class NotificationJob : HostedServiceBase Inheritance object HostedServiceBase NotificationJob Inherited Members HostedServiceBase.Name HostedServiceBase.Frequency HostedServiceBase.Interval HostedServiceBase.StartDate HostedServiceBase.EndDate HostedServiceBase.RetentionHistory HostedServiceBase.IsEnabled HostedServiceBase.ExecuteJobAsync(IServiceProvider) HostedServiceBase.ExecuteAsync(CancellationToken) HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.Dispose() Constructors NotificationJob(IServiceScopeFactory) public NotificationJob(IServiceScopeFactory serviceScopeFactory) Parameters serviceScopeFactory IServiceScopeFactory Methods ExecuteJob(IServiceProvider) public override string ExecuteJob(IServiceProvider provider) Parameters provider IServiceProvider Returns string"
  },
  "api/Oqtane.Infrastructure.PurgeJob.html": {
    "href": "api/Oqtane.Infrastructure.PurgeJob.html",
    "title": "Class PurgeJob | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PurgeJob Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class PurgeJob : HostedServiceBase Inheritance object HostedServiceBase PurgeJob Inherited Members HostedServiceBase.Name HostedServiceBase.Frequency HostedServiceBase.Interval HostedServiceBase.StartDate HostedServiceBase.EndDate HostedServiceBase.RetentionHistory HostedServiceBase.IsEnabled HostedServiceBase.ExecuteJobAsync(IServiceProvider) HostedServiceBase.ExecuteAsync(CancellationToken) HostedServiceBase.StartAsync(CancellationToken) HostedServiceBase.StopAsync(CancellationToken) HostedServiceBase.Dispose() Constructors PurgeJob(IServiceScopeFactory) public PurgeJob(IServiceScopeFactory serviceScopeFactory) Parameters serviceScopeFactory IServiceScopeFactory Methods ExecuteJob(IServiceProvider) public override string ExecuteJob(IServiceProvider provider) Parameters provider IServiceProvider Returns string"
  },
  "api/Oqtane.Infrastructure.ServerState.html": {
    "href": "api/Oqtane.Infrastructure.ServerState.html",
    "title": "Class ServerState | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ServerState Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class ServerState Inheritance object ServerState Properties Assemblies public List<string> Assemblies { get; set; } Property Value List<string> IsInitialized public bool IsInitialized { get; set; } Property Value bool SiteKey public string SiteKey { get; set; } Property Value string"
  },
  "api/Oqtane.Infrastructure.ServerStateManager.html": {
    "href": "api/Oqtane.Infrastructure.ServerStateManager.html",
    "title": "Class ServerStateManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ServerStateManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class ServerStateManager : IServerStateManager Inheritance object ServerStateManager Implements IServerStateManager Constructors ServerStateManager() public ServerStateManager() Methods GetServerState(string) public ServerState GetServerState(string siteKey) Parameters siteKey string Returns ServerState"
  },
  "api/Oqtane.Infrastructure.SiteMigrationAttribute.html": {
    "href": "api/Oqtane.Infrastructure.SiteMigrationAttribute.html",
    "title": "Class SiteMigrationAttribute | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteMigrationAttribute Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll [AttributeUsage(AttributeTargets.Class)] public class SiteMigrationAttribute : Attribute Inheritance object Attribute SiteMigrationAttribute Constructors SiteMigrationAttribute(string, string) public SiteMigrationAttribute(string AliasName, string Version) Parameters AliasName string Version string Properties AliasName public virtual string AliasName { get; } Property Value string Version public virtual string Version { get; } Property Value string"
  },
  "api/Oqtane.Infrastructure.SiteNamedOptions-1.html": {
    "href": "api/Oqtane.Infrastructure.SiteNamedOptions-1.html",
    "title": "Class SiteNamedOptions<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteNamedOptions<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteNamedOptions<TOptions> : ISiteNamedOptions<TOptions> where TOptions : class, new() Type Parameters TOptions Inheritance object SiteNamedOptions<TOptions> Implements ISiteNamedOptions<TOptions> Constructors SiteNamedOptions(string, Action<TOptions, Alias, Dictionary<string, string>>) public SiteNamedOptions(string name, Action<TOptions, Alias, Dictionary<string, string>> configureOptions) Parameters name string configureOptions Action<TOptions, Alias, Dictionary<string, string>> Properties Name public string Name { get; } Property Value string Methods Configure(string, TOptions, Alias, Dictionary<string, string>) public void Configure(string name, TOptions options, Alias alias, Dictionary<string, string> sitesettings) Parameters name string options TOptions alias Alias sitesettings Dictionary<string, string>"
  },
  "api/Oqtane.Infrastructure.SiteOptions-1.html": {
    "href": "api/Oqtane.Infrastructure.SiteOptions-1.html",
    "title": "Class SiteOptions<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteOptions<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteOptions<TOptions> : ISiteOptions<TOptions> where TOptions : class, new() Type Parameters TOptions Inheritance object SiteOptions<TOptions> Implements ISiteOptions<TOptions> Constructors SiteOptions(Action<TOptions, Alias, Dictionary<string, string>>) public SiteOptions(Action<TOptions, Alias, Dictionary<string, string>> configureOptions) Parameters configureOptions Action<TOptions, Alias, Dictionary<string, string>> Methods Configure(TOptions, Alias, Dictionary<string, string>) public void Configure(TOptions options, Alias alias, Dictionary<string, string> sitesettings) Parameters options TOptions alias Alias sitesettings Dictionary<string, string>"
  },
  "api/Oqtane.Infrastructure.SiteOptionsCache-1.html": {
    "href": "api/Oqtane.Infrastructure.SiteOptionsCache-1.html",
    "title": "Class SiteOptionsCache<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteOptionsCache<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteOptionsCache<TOptions> where TOptions : class, new() Type Parameters TOptions Inheritance object SiteOptionsCache<TOptions> Constructors SiteOptionsCache(IAliasAccessor) public SiteOptionsCache(IAliasAccessor aliasAccessor) Parameters aliasAccessor IAliasAccessor Methods Clear() Clears all options instances from the cache. public void Clear() GetOrAdd(string, Func<TOptions>) Gets a named options instance, or adds a new instance created with createOptions. public TOptions GetOrAdd(string name, Func<TOptions> createOptions) Parameters name string The name of the options instance. createOptions Func<TOptions> The func used to create the new instance. Returns TOptions The options instance. TryAdd(string, TOptions) Tries to adds a new option to the cache, will return false if the name already exists. public bool TryAdd(string name, TOptions options) Parameters name string The name of the options instance. options TOptions The options instance. Returns bool Whether anything was added. TryRemove(string) Try to remove an options instance. public bool TryRemove(string name) Parameters name string The name of the options instance. Returns bool Whether anything was removed."
  },
  "api/Oqtane.Infrastructure.SiteOptionsFactory-1.html": {
    "href": "api/Oqtane.Infrastructure.SiteOptionsFactory-1.html",
    "title": "Class SiteOptionsFactory<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteOptionsFactory<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteOptionsFactory<TOptions> where TOptions : class, new() Type Parameters TOptions Inheritance object SiteOptionsFactory<TOptions> Constructors SiteOptionsFactory(IEnumerable<IConfigureOptions<TOptions>>, IEnumerable<IPostConfigureOptions<TOptions>>, IEnumerable<ISiteOptions<TOptions>>, IEnumerable<ISiteNamedOptions<TOptions>>, IHttpContextAccessor) public SiteOptionsFactory(IEnumerable<IConfigureOptions<TOptions>> configureOptions, IEnumerable<IPostConfigureOptions<TOptions>> postConfigureOptions, IEnumerable<ISiteOptions<TOptions>> siteOptions, IEnumerable<ISiteNamedOptions<TOptions>> siteNamedOptions, IHttpContextAccessor accessor) Parameters configureOptions IEnumerable<IConfigureOptions<TOptions>> postConfigureOptions IEnumerable<IPostConfigureOptions<TOptions>> siteOptions IEnumerable<ISiteOptions<TOptions>> siteNamedOptions IEnumerable<ISiteNamedOptions<TOptions>> accessor IHttpContextAccessor Methods Create(string) Returns a configured TOptions instance with the given name. public TOptions Create(string name) Parameters name string The name of the TOptions instance to create. Returns TOptions The created TOptions instance with thw given name."
  },
  "api/Oqtane.Infrastructure.SiteOptionsManager-1.html": {
    "href": "api/Oqtane.Infrastructure.SiteOptionsManager-1.html",
    "title": "Class SiteOptionsManager<TOptions> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteOptionsManager<TOptions> Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteOptionsManager<TOptions> where TOptions : class, new() Type Parameters TOptions Inheritance object SiteOptionsManager<TOptions> Constructors SiteOptionsManager(IOptionsFactory<TOptions>, IOptionsMonitorCache<TOptions>) public SiteOptionsManager(IOptionsFactory<TOptions> factory, IOptionsMonitorCache<TOptions> cache) Parameters factory IOptionsFactory<TOptions> cache IOptionsMonitorCache<TOptions> Properties Value The default configured TOptions instance public TOptions Value { get; } Property Value TOptions Methods Get(string) Returns a configured TOptions instance with the given name. public virtual TOptions Get(string name) Parameters name string The name of the TOptions instance, if nullDefaultName is used. Returns TOptions The TOptions instance that matches the given name. Reset() public void Reset()"
  },
  "api/Oqtane.Infrastructure.SiteState.html": {
    "href": "api/Oqtane.Infrastructure.SiteState.html",
    "title": "Class SiteState | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteState Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SiteState Inheritance object SiteState Properties Alias public Alias Alias { get; set; } Property Value Alias"
  },
  "api/Oqtane.Infrastructure.SyncManager.html": {
    "href": "api/Oqtane.Infrastructure.SyncManager.html",
    "title": "Class SyncManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SyncManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class SyncManager : ISyncManager Inheritance object SyncManager Implements ISyncManager Constructors SyncManager() public SyncManager() Methods AddSyncEvent(Alias, string, int, string) public void AddSyncEvent(Alias alias, string entityName, int entityId, string action) Parameters alias Alias entityName string entityId int action string AddSyncEvent(int, int, string, int, string) public void AddSyncEvent(int tenantId, int siteId, string entityName, int entityId, string action) Parameters tenantId int siteId int entityName string entityId int action string AddSyncEvent(int, string, int, string) public void AddSyncEvent(int tenantId, string entityName, int entityId, string action) Parameters tenantId int entityName string entityId int action string GetSyncEvents(int, DateTime) public List<SyncEvent> GetSyncEvents(int tenantId, DateTime lastSyncDate) Parameters tenantId int lastSyncDate DateTime Returns List<SyncEvent> Events EntityChanged public event EventHandler<SyncEvent> EntityChanged Event Type EventHandler<SyncEvent>"
  },
  "api/Oqtane.Infrastructure.TenantManager.html": {
    "href": "api/Oqtane.Infrastructure.TenantManager.html",
    "title": "Class TenantManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class TenantManager : ITenantManager Inheritance object TenantManager Implements ITenantManager Constructors TenantManager(IHttpContextAccessor, IAliasRepository, ITenantRepository, SiteState) public TenantManager(IHttpContextAccessor httpContextAccessor, IAliasRepository aliasRepository, ITenantRepository tenantRepository, SiteState siteState) Parameters httpContextAccessor IHttpContextAccessor aliasRepository IAliasRepository tenantRepository ITenantRepository siteState SiteState Methods GetAlias() public Alias GetAlias() Returns Alias GetTenant() public Tenant GetTenant() Returns Tenant SetAlias(Alias) public void SetAlias(Alias alias) Parameters alias Alias SetAlias(int, int) public void SetAlias(int tenantId, int siteId) Parameters tenantId int siteId int SetTenant(int) public void SetTenant(int tenantId) Parameters tenantId int"
  },
  "api/Oqtane.Infrastructure.TokenReplace.html": {
    "href": "api/Oqtane.Infrastructure.TokenReplace.html",
    "title": "Class TokenReplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TokenReplace Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class TokenReplace : ITokenReplace Inheritance object TokenReplace Implements ITokenReplace Constructors TokenReplace(ILogManager) public TokenReplace(ILogManager logger) Parameters logger ILogManager Fields GenericName public const string GenericName = \"generic\" Field Value string Methods AddSource(ITokenSource) public void AddSource(ITokenSource source) Parameters source ITokenSource AddSource(IDictionary<string, object>) public void AddSource(IDictionary<string, object> source) Parameters source IDictionary<string, object> AddSource(Func<IDictionary<string, object>>) public void AddSource(Func<IDictionary<string, object>> sourceFunc) Parameters sourceFunc Func<IDictionary<string, object>> AddSource(string, ITokenSource) public void AddSource(string name, ITokenSource source) Parameters name string source ITokenSource AddSource(string, IDictionary<string, object>) public void AddSource(string name, IDictionary<string, object> source) Parameters name string source IDictionary<string, object> AddSource(string, Func<IDictionary<string, object>>) public void AddSource(string name, Func<IDictionary<string, object>> sourceFunc) Parameters name string sourceFunc Func<IDictionary<string, object>> AddSource(string, object) public void AddSource(string key, object value) Parameters key string value object AddSource(string, string, object) public void AddSource(string name, string key, object value) Parameters name string key string value object ReplaceTokens(string) public string ReplaceTokens(string source) Parameters source string Returns string"
  },
  "api/Oqtane.Infrastructure.UpgradeManager.html": {
    "href": "api/Oqtane.Infrastructure.UpgradeManager.html",
    "title": "Class UpgradeManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UpgradeManager Namespace Oqtane.Infrastructure Assembly Oqtane.Server.dll public class UpgradeManager : IUpgradeManager Inheritance object UpgradeManager Implements IUpgradeManager Constructors UpgradeManager(IServiceScopeFactory, IWebHostEnvironment, IConfigManager) public UpgradeManager(IServiceScopeFactory serviceScopeFactory, IWebHostEnvironment environment, IConfigManager configManager) Parameters serviceScopeFactory IServiceScopeFactory environment IWebHostEnvironment configManager IConfigManager Methods Upgrade(Tenant, string) public void Upgrade(Tenant tenant, string version) Parameters tenant Tenant version string"
  },
  "api/Oqtane.Infrastructure.html": {
    "href": "api/Oqtane.Infrastructure.html",
    "title": "Namespace Oqtane.Infrastructure | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Infrastructure TODO: Please document what this namespace is for. Namespaces Oqtane.Infrastructure.EventSubscribers Oqtane.Infrastructure.Interfaces Classes AliasAccessor ConfigManager DatabaseManager EventDistributorHostedService ExampleSiteMigration FileLogger FileLoggerProvider FileLogger should only be used in scenarios where a database is not available or tenant/site cannot be determined (ie. during startup) HostedServiceBase InstallationManager LocalizationManager LocalizationOptions LogManager NotificationJob PurgeJob ServerState ServerStateManager SiteMigrationAttribute SiteNamedOptions<TOptions> SiteOptionsCache<TOptions> SiteOptionsFactory<TOptions> SiteOptionsManager<TOptions> SiteOptions<TOptions> SyncManager TenantManager TokenReplace UpgradeManager Interfaces IAliasAccessor IConfigManager IDatabaseManager IEventSubscriber IHostResources IInstallable IInstallationManager ILocalizationManager ILogManager IServerStartup IServerStateManager ISiteMigration ISiteNamedOptions<TOptions> ISiteOptions<TOptions> ISiteTemplate ISyncManager ITenantManager IUpgradeManager"
  },
  "api/Oqtane.Interfaces.IDatabaseConfigControl.html": {
    "href": "api/Oqtane.Interfaces.IDatabaseConfigControl.html",
    "title": "Interface IDatabaseConfigControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IDatabaseConfigControl Namespace Oqtane.Interfaces Assembly Oqtane.Shared.dll public interface IDatabaseConfigControl Methods GetConnectionString() string GetConnectionString() Returns string"
  },
  "api/Oqtane.Interfaces.ISettingsControl.html": {
    "href": "api/Oqtane.Interfaces.ISettingsControl.html",
    "title": "Interface ISettingsControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISettingsControl Namespace Oqtane.Interfaces Assembly Oqtane.Shared.dll public interface ISettingsControl Methods UpdateSettings() Task UpdateSettings() Returns Task"
  },
  "api/Oqtane.Interfaces.ITokenSource.html": {
    "href": "api/Oqtane.Interfaces.ITokenSource.html",
    "title": "Interface ITokenSource | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITokenSource Namespace Oqtane.Interfaces Assembly Oqtane.Shared.dll public interface ITokenSource Methods GetTokens() IDictionary<string, object> GetTokens() Returns IDictionary<string, object>"
  },
  "api/Oqtane.Interfaces.html": {
    "href": "api/Oqtane.Interfaces.html",
    "title": "Namespace Oqtane.Interfaces | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Interfaces Interfaces IDatabaseConfigControl ISettingsControl ITokenSource"
  },
  "api/Oqtane.Managers.IUserManager.html": {
    "href": "api/Oqtane.Managers.IUserManager.html",
    "title": "Interface IUserManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserManager Namespace Oqtane.Managers Assembly Oqtane.Server.dll public interface IUserManager Methods AddUser(User) Task<User> AddUser(User user) Parameters user User Returns Task<User> DeleteUser(int, int) Task DeleteUser(int userid, int siteid) Parameters userid int siteid int Returns Task ForgotPassword(User) Task ForgotPassword(User user) Parameters user User Returns Task GetUser(int, int) User GetUser(int userid, int siteid) Parameters userid int siteid int Returns User GetUser(string, int) User GetUser(string username, int siteid) Parameters username string siteid int Returns User GetUser(string, string, int) User GetUser(string username, string email, int siteid) Parameters username string email string siteid int Returns User ImportUsers(int, string, bool) Task<Dictionary<string, string>> ImportUsers(int siteId, string filePath, bool notify) Parameters siteId int filePath string notify bool Returns Task<Dictionary<string, string>> LinkExternalAccount(User, string, string, string, string) Task<User> LinkExternalAccount(User user, string token, string type, string key, string name) Parameters user User token string type string key string name string Returns Task<User> LoginUser(User, bool, bool) Task<User> LoginUser(User user, bool setCookie, bool isPersistent) Parameters user User setCookie bool isPersistent bool Returns Task<User> ResetPassword(User, string) Task<User> ResetPassword(User user, string token) Parameters user User token string Returns Task<User> UpdateUser(User) Task<User> UpdateUser(User user) Parameters user User Returns Task<User> ValidatePassword(string) Task<bool> ValidatePassword(string password) Parameters password string Returns Task<bool> VerifyEmail(User, string) Task<User> VerifyEmail(User user, string token) Parameters user User token string Returns Task<User> VerifyTwoFactor(User, string) User VerifyTwoFactor(User user, string token) Parameters user User token string Returns User"
  },
  "api/Oqtane.Managers.UserManager.html": {
    "href": "api/Oqtane.Managers.UserManager.html",
    "title": "Class UserManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserManager Namespace Oqtane.Managers Assembly Oqtane.Server.dll public class UserManager : IUserManager Inheritance object UserManager Implements IUserManager Constructors UserManager(IUserRepository, IRoleRepository, IUserRoleRepository, UserManager<IdentityUser>, SignInManager<IdentityUser>, ITenantManager, INotificationRepository, IFolderRepository, IFileRepository, IProfileRepository, ISettingRepository, ISyncManager, ILogManager, IStringLocalizer<UserManager>, ISiteRepository) public UserManager(IUserRepository users, IRoleRepository roles, IUserRoleRepository userRoles, UserManager<IdentityUser> identityUserManager, SignInManager<IdentityUser> identitySignInManager, ITenantManager tenantManager, INotificationRepository notifications, IFolderRepository folders, IFileRepository files, IProfileRepository profiles, ISettingRepository settings, ISyncManager syncManager, ILogManager logger, IStringLocalizer<UserManager> localizer, ISiteRepository siteRepo) Parameters users IUserRepository roles IRoleRepository userRoles IUserRoleRepository identityUserManager UserManager<IdentityUser> identitySignInManager SignInManager<IdentityUser> tenantManager ITenantManager notifications INotificationRepository folders IFolderRepository files IFileRepository profiles IProfileRepository settings ISettingRepository syncManager ISyncManager logger ILogManager localizer IStringLocalizer<UserManager> siteRepo ISiteRepository Methods AddUser(User) public Task<User> AddUser(User user) Parameters user User Returns Task<User> DeleteUser(int, int) public Task DeleteUser(int userid, int siteid) Parameters userid int siteid int Returns Task ForgotPassword(User) public Task ForgotPassword(User user) Parameters user User Returns Task GetUser(int, int) public User GetUser(int userid, int siteid) Parameters userid int siteid int Returns User GetUser(string, int) public User GetUser(string username, int siteid) Parameters username string siteid int Returns User GetUser(string, string, int) public User GetUser(string username, string email, int siteid) Parameters username string email string siteid int Returns User ImportUsers(int, string, bool) public Task<Dictionary<string, string>> ImportUsers(int siteId, string filePath, bool notify) Parameters siteId int filePath string notify bool Returns Task<Dictionary<string, string>> LinkExternalAccount(User, string, string, string, string) public Task<User> LinkExternalAccount(User user, string token, string type, string key, string name) Parameters user User token string type string key string name string Returns Task<User> LoginUser(User, bool, bool) public Task<User> LoginUser(User user, bool setCookie, bool isPersistent) Parameters user User setCookie bool isPersistent bool Returns Task<User> ResetPassword(User, string) public Task<User> ResetPassword(User user, string token) Parameters user User token string Returns Task<User> UpdateUser(User) public Task<User> UpdateUser(User user) Parameters user User Returns Task<User> ValidatePassword(string) public Task<bool> ValidatePassword(string password) Parameters password string Returns Task<bool> VerifyEmail(User, string) public Task<User> VerifyEmail(User user, string token) Parameters user User token string Returns Task<User> VerifyTwoFactor(User, string) public User VerifyTwoFactor(User user, string token) Parameters user User token string Returns User"
  },
  "api/Oqtane.Managers.html": {
    "href": "api/Oqtane.Managers.html",
    "title": "Namespace Oqtane.Managers | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Managers Classes UserManager Interfaces IUserManager"
  },
  "api/Oqtane.Models.Alias.html": {
    "href": "api/Oqtane.Models.Alias.html",
    "title": "Class Alias | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Alias Namespace Oqtane.Models Assembly Oqtane.Shared.dll An Alias maps a url like oqtane.my or oqtane.my/products to a Site and Tenant public class Alias : ModelBase, IAuditable Inheritance object ModelBase Alias Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties AliasId The primary ID for internal use. It's also used in API calls to identify the site. public int AliasId { get; set; } Property Value int BaseUrl Base Url for static resources (note that this will only be set for remote clients) [NotMapped] public string BaseUrl { get; set; } Property Value string IsDefault Specifies if the alias is the default for the tenant/site. Requests for non-default aliases are redirected to the default alias. public bool IsDefault { get; set; } Property Value bool Name The Alias Name = URL. The Name contains the entire path - so it can be oqtane.me, www.oqtane.me or oqtane.me/products public string Name { get; set; } Property Value string Path The path contains the url-part after the first slash. If the Name is oqtane.me the Path is empty if the Name is oqtane.me/products the Path is products [NotMapped] public string Path { get; } Property Value string Protocol Protocol for the request from which the alias was resolved (ie. http:// or https:// ) [NotMapped] public string Protocol { get; set; } Property Value string SiteId The Site this Alias references. public int SiteId { get; set; } Property Value int SiteKey Unique key used for identifying a site within a runtime process (ie. cache, file system, etc...) [NotMapped] public string SiteKey { get; } Property Value string TenantId The Tenant this Alias (and the Site) references. It's important, as anything related to the Alias must be requested from a database, which is found by the Tenant it's in. public int TenantId { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Culture.html": {
    "href": "api/Oqtane.Models.Culture.html",
    "title": "Class Culture | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Culture Namespace Oqtane.Models Assembly Oqtane.Shared.dll Culture information describing a Culture public class Culture Inheritance object Culture Properties DisplayName Nice name for the user, like English (United States) public string DisplayName { get; set; } Property Value string IsDefault Information if this is the default culture. public bool IsDefault { get; set; } Property Value bool Remarks Not sure if this is actually valid, as ATM there is no setting to configure a default culture Name Short code like en or en-US public string Name { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Database.html": {
    "href": "api/Oqtane.Models.Database.html",
    "title": "Class Database | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Database Namespace Oqtane.Models Assembly Oqtane.Shared.dll Information about a Database used in the current Oqtane installation public class Database Inheritance object Database Properties ControlType Namespace & name of the UI control to configure this database, like Oqtane.Installer.Controls.SqlServerConfig, Oqtane.Client public string ControlType { get; set; } Property Value string DBType Type of DB using the full namespace, like Oqtane.Database.SqlServer.SqlServerDatabase, Oqtane.Database.SqlServer public string DBType { get; set; } Property Value string IsDefault whether this item is the default database provider ( ie. specified by DefaultDBType in appsettings.json ) public bool IsDefault { get; set; } Property Value bool Name Name of the Database public string Name { get; set; } Property Value string"
  },
  "api/Oqtane.Models.File.html": {
    "href": "api/Oqtane.Models.File.html",
    "title": "Class File | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class File Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a File in Oqtane public class File : ModelBase, IAuditable Inheritance object ModelBase File Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Extension Methods Utilities.IsFileValid(File) Properties Description Description of a file public string Description { get; set; } Property Value string Extension File name extension like 'jpg' Always lower case Without the dot (.) public string Extension { get; set; } Property Value string FileId ID to identify the file public int FileId { get; set; } Property Value int Folder Object reference to the Folder object. Use this if you need to determine what Site the file belongs to. TODO: not sure if this is always populated, must verify and document public Folder Folder { get; set; } Property Value Folder FolderId Reference to the Folder. Use this if you need to determine what Site the file belongs to. public int FolderId { get; set; } Property Value int ImageHeight The height of an image (if the file is an image) in pixels. This is calculated at time of Upload, so if the file is manually replaced, the value will be wrong. public int ImageHeight { get; set; } Property Value int ImageWidth The width of an image (if the file is an image) in pixels. This is calculated at time of Upload, so if the file is manually replaced, the value will be wrong. public int ImageWidth { get; set; } Property Value int IsDeleted Deprecated - not used public bool? IsDeleted { get; set; } Property Value bool? Name Name of the file todo: with extension or not? public string Name { get; set; } Property Value string Size File size public int Size { get; set; } Property Value int Url url for accessing file [NotMapped] public string Url { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Folder.html": {
    "href": "api/Oqtane.Models.Folder.html",
    "title": "Class Folder | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Folder Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Folder in Oqtane public class Folder : ModelBase, IAuditable Inheritance object ModelBase Folder Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Extension Methods Utilities.IsPathValid(Folder) Properties Capacity Maximum folder capacity (in bytes) public int Capacity { get; set; } Property Value int FolderId ID to identify the folder public int FolderId { get; set; } Property Value int HasChildren Information if this folder has sub-items like more Folder or File objects [NotMapped] public bool HasChildren { get; set; } Property Value bool ImageSizes List of image sizes which can be generated dynamically from uploaded images (ie. 200x200,x200,200x) public string ImageSizes { get; set; } Property Value string IsDeleted Deprecated - not used public bool? IsDeleted { get; set; } Property Value bool? IsSystem Folder is a dependency of the framework and cannot be modified or removed public bool IsSystem { get; set; } Property Value bool Level Folder Depth TODO: todoc Where does this start, so Depth 0 or 1 is where in the file system? [NotMapped] public int Level { get; set; } Property Value int Name Folder name public string Name { get; set; } Property Value string Order Sorting order of the folder public int Order { get; set; } Property Value int ParentId Reference to the parent Folder, if it has a parent folder. public int? ParentId { get; set; } Property Value int? Path Path to the folder TODO: document from where the path starts public string Path { get; set; } Property Value string PermissionList TODO: todoc what would this contain? [NotMapped] public List<Permission> PermissionList { get; set; } Property Value List<Permission> Permissions [Obsolete(\"The Permissions property is deprecated. Use PermissionList instead\", false)] [NotMapped] [JsonIgnore] public string Permissions { get; set; } Property Value string SiteId Reference to the Site. public int SiteId { get; set; } Property Value int Type Folder type - based on FolderTypes public string Type { get; set; } Property Value string"
  },
  "api/Oqtane.Models.IAuditable.html": {
    "href": "api/Oqtane.Models.IAuditable.html",
    "title": "Interface IAuditable | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IAuditable Namespace Oqtane.Models Assembly Oqtane.Shared.dll Basic create/edit information - used in many objects. public interface IAuditable Properties CreatedBy Username of the creator of this Object. string CreatedBy { get; set; } Property Value string CreatedOn Created Timestamp for this Object. DateTime CreatedOn { get; set; } Property Value DateTime ModifiedBy Username of the last user who modified this Object. string ModifiedBy { get; set; } Property Value string ModifiedOn Modified Timestamp for this Object. DateTime ModifiedOn { get; set; } Property Value DateTime"
  },
  "api/Oqtane.Models.IDeletable.html": {
    "href": "api/Oqtane.Models.IDeletable.html",
    "title": "Interface IDeletable | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IDeletable Namespace Oqtane.Models Assembly Oqtane.Shared.dll Audit information for things than can be deleted. public interface IDeletable Properties DeletedBy User who deleted this object. string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. DateTime? DeletedOn { get; set; } Property Value DateTime? IsDeleted If something is deleted, this will be true. bool IsDeleted { get; set; } Property Value bool"
  },
  "api/Oqtane.Models.Installation.html": {
    "href": "api/Oqtane.Models.Installation.html",
    "title": "Class Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Installation Namespace Oqtane.Models Assembly Oqtane.Shared.dll Internal message used internally during installation. Each part of the installation will return the status / message when installing. public class Installation Inheritance object Installation Properties Alias current alias value from server public Alias Alias { get; set; } Property Value Alias Message Message or error in case something failed. public string Message { get; set; } Property Value string Success Status if everything worked. public bool Success { get; set; } Property Value bool"
  },
  "api/Oqtane.Models.Job.html": {
    "href": "api/Oqtane.Models.Job.html",
    "title": "Class Job | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Job Namespace Oqtane.Models Assembly Oqtane.Shared.dll Definition of a Job / Task which is run on the server. When Jobs run, they create a JobLog public class Job : ModelBase, IAuditable Inheritance object ModelBase Job Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties EndDate When the job is to be run the last time. See also StartDate. public DateTime? EndDate { get; set; } Property Value DateTime? Frequency Unit used in how often the job should run - expects a character like m (minutes), H (hours) etc. public string Frequency { get; set; } Property Value string Interval How often the Job should run - see also Frequency public int Interval { get; set; } Property Value int IsEnabled Determines if the Job is activated / enabled. public bool IsEnabled { get; set; } Property Value bool IsExecuting If the Job is executing right now. public bool IsExecuting { get; set; } Property Value bool IsStarted If the Job has ever started running public bool IsStarted { get; set; } Property Value bool JobId Internal ID public int JobId { get; set; } Property Value int JobType What kind of Job this is public string JobType { get; set; } Property Value string Name Name for simple identification public string Name { get; set; } Property Value string NextExecution When the Job will run again next time. public DateTime? NextExecution { get; set; } Property Value DateTime? RetentionHistory Todo: todoc - unsure what this does public int RetentionHistory { get; set; } Property Value int StartDate When the Job is to be run the first time. See also EndDate. public DateTime? StartDate { get; set; } Property Value DateTime?"
  },
  "api/Oqtane.Models.JobLog.html": {
    "href": "api/Oqtane.Models.JobLog.html",
    "title": "Class JobLog | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JobLog Namespace Oqtane.Models Assembly Oqtane.Shared.dll Log / Journal of Jobs executed. public class JobLog Inheritance object JobLog Properties FinishDate Timestamp when the Job ended. public DateTime? FinishDate { get; set; } Property Value DateTime? Job Reference to the Job. public Job Job { get; set; } Property Value Job Remarks It's not clear if this is always populated. JobId Reference to the Job which was run public int JobId { get; set; } Property Value int JobLogId Internal ID public int JobLogId { get; set; } Property Value int Notes Additional protocol information that was left after the Job ran. public string Notes { get; set; } Property Value string StartDate Timestamp when the Job started. public DateTime StartDate { get; set; } Property Value DateTime Succeeded Success information. public bool? Succeeded { get; set; } Property Value bool?"
  },
  "api/Oqtane.Models.Language.html": {
    "href": "api/Oqtane.Models.Language.html",
    "title": "Class Language | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Language Namespace Oqtane.Models Assembly Oqtane.Shared.dll Language Information for Sites TODO: todoc - unclear how this is different from Culture public class Language : ModelBase, IAuditable Inheritance object ModelBase Language Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties Code Language / Culture code, like 'en-US' - corresponds to Name public string Code { get; set; } Property Value string IsDefault Is this the default language on a Site public bool IsDefault { get; set; } Property Value bool LanguageId Internal ID public int LanguageId { get; set; } Property Value int Name Language Name - corresponds to DisplayName, not Name public string Name { get; set; } Property Value string SiteId Reference to a Site TODO: todoc - unclear why it's nullable public int? SiteId { get; set; } Property Value int? Version [NotMapped] public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Log.html": {
    "href": "api/Oqtane.Models.Log.html",
    "title": "Class Log | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Log Namespace Oqtane.Models Assembly Oqtane.Shared.dll A log entry in the events log. public class Log Inheritance object Log Properties Category public string Category { get; set; } Property Value string Exception Information about raised Exceptions public string Exception { get; set; } Property Value string Feature public string Feature { get; set; } Property Value string Function public string Function { get; set; } Property Value string Level Log level / severity public string Level { get; set; } Property Value string LogDate Timestamp public DateTime LogDate { get; set; } Property Value DateTime LogId Internal ID public int LogId { get; set; } Property Value int Message Log Message public string Message { get; set; } Property Value string MessageTemplate public string MessageTemplate { get; set; } Property Value string ModuleId Reference to the Module public int? ModuleId { get; set; } Property Value int? PageId Reference to the Page public int? PageId { get; set; } Property Value int? Properties public string Properties { get; set; } Property Value string Server Name of the server that created this entry public string Server { get; set; } Property Value string SiteId Reference to the Site public int? SiteId { get; set; } Property Value int? Url Url if relevant for this log entry. public string Url { get; set; } Property Value string UserId Reference to the User public int? UserId { get; set; } Property Value int?"
  },
  "api/Oqtane.Models.MigrationHistoryTable.html": {
    "href": "api/Oqtane.Models.MigrationHistoryTable.html",
    "title": "Class MigrationHistoryTable | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MigrationHistoryTable Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class MigrationHistoryTable Inheritance object MigrationHistoryTable Properties AppliedDateColumnName public string AppliedDateColumnName { get; set; } Property Value string AppliedVersionColumnName public string AppliedVersionColumnName { get; set; } Property Value string MigrationIdColumnName public string MigrationIdColumnName { get; set; } Property Value string ProductVersionColumnName public string ProductVersionColumnName { get; set; } Property Value string TableName public string TableName { get; set; } Property Value string TableSchema public string TableSchema { get; set; } Property Value string"
  },
  "api/Oqtane.Models.ModelBase.html": {
    "href": "api/Oqtane.Models.ModelBase.html",
    "title": "Class ModelBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModelBase Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class ModelBase : IAuditable Inheritance object ModelBase Implements IAuditable Derived Alias File Folder Job Language Module ModuleDefinition Page PageModule Permission Profile Role Setting Site Tenant Theme User UserRole Properties CreatedBy Username of the creator of this Object. public string CreatedBy { get; set; } Property Value string CreatedOn Created Timestamp for this Object. public DateTime CreatedOn { get; set; } Property Value DateTime ModifiedBy Username of the last user who modified this Object. public string ModifiedBy { get; set; } Property Value string ModifiedOn Modified Timestamp for this Object. public DateTime ModifiedOn { get; set; } Property Value DateTime"
  },
  "api/Oqtane.Models.Module.html": {
    "href": "api/Oqtane.Models.Module.html",
    "title": "Class Module | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Module Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Module Instance which will be shown on a page. This is different from a ModuleDefinition which describes a Module. public class Module : ModelBase, IAuditable Inheritance object ModelBase Module Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties Actions [NotMapped] public string Actions { get; set; } Property Value string AllPages Determines if this Module Instance should be shown on all pages of the current Site public bool AllPages { get; set; } Property Value bool ContainerType [NotMapped] public string ContainerType { get; set; } Property Value string ControlTitle [NotMapped] public string ControlTitle { get; set; } Property Value string DeletedBy [NotMapped] public string DeletedBy { get; set; } Property Value string DeletedOn [NotMapped] public DateTime? DeletedOn { get; set; } Property Value DateTime? EffectiveDate [NotMapped] public DateTime? EffectiveDate { get; set; } Property Value DateTime? ExpiryDate [NotMapped] public DateTime? ExpiryDate { get; set; } Property Value DateTime? IsDeleted [NotMapped] public bool IsDeleted { get; set; } Property Value bool ModuleDefinition Reference to the ModuleDefinition used for this module. TODO: todoc - unclear if this is always populated [NotMapped] public ModuleDefinition ModuleDefinition { get; set; } Property Value ModuleDefinition ModuleDefinitionName Reference to the ModuleDefinition public string ModuleDefinitionName { get; set; } Property Value string ModuleId The ID of this instance public int ModuleId { get; set; } Property Value int ModuleType [NotMapped] public string ModuleType { get; set; } Property Value string Order [NotMapped] public int Order { get; set; } Property Value int PageId Reference to the Page this module is on. [NotMapped] public int PageId { get; set; } Property Value int PageModuleId [NotMapped] public int PageModuleId { get; set; } Property Value int Pane The Pane this module is shown in. [NotMapped] public string Pane { get; set; } Property Value string PaneModuleCount [NotMapped] public int PaneModuleCount { get; set; } Property Value int PaneModuleIndex [NotMapped] public int PaneModuleIndex { get; set; } Property Value int PermissionList [NotMapped] public List<Permission> PermissionList { get; set; } Property Value List<Permission> Permissions [Obsolete(\"The Permissions property is deprecated. Use PermissionList instead\", false)] [NotMapped] [JsonIgnore] public string Permissions { get; set; } Property Value string Prerender [NotMapped] public bool? Prerender { get; set; } Property Value bool? RenderId [NotMapped] public Guid RenderId { get; set; } Property Value Guid RenderMode [NotMapped] public string RenderMode { get; set; } Property Value string SecurityAccessLevel [NotMapped] public SecurityAccessLevel SecurityAccessLevel { get; set; } Property Value SecurityAccessLevel Settings [NotMapped] public Dictionary<string, string> Settings { get; set; } Property Value Dictionary<string, string> SiteId Reference to the Site public int SiteId { get; set; } Property Value int Title [NotMapped] public string Title { get; set; } Property Value string UseAdminContainer [NotMapped] public bool UseAdminContainer { get; set; } Property Value bool"
  },
  "api/Oqtane.Models.ModuleContent.html": {
    "href": "api/Oqtane.Models.ModuleContent.html",
    "title": "Class ModuleContent | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleContent Namespace Oqtane.Models Assembly Oqtane.Shared.dll Generic Model for Module-Contents to enable Import/Export of the Module-Data public class ModuleContent Inheritance object ModuleContent Properties Content Serialized Content of the module for import/export. public string Content { get; set; } Property Value string ModuleDefinitionName Reference to a ModuleDefinition for which this content is relevant. public string ModuleDefinitionName { get; set; } Property Value string Version Version of the ModuleDefinition which is used here. It's not the version of the Content public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.ModuleDefinition.html": {
    "href": "api/Oqtane.Models.ModuleDefinition.html",
    "title": "Class ModuleDefinition | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleDefinition Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Module type (Definition) in Oqtane. The available Modules are determined at StartUp. public class ModuleDefinition : ModelBase, IAuditable Inheritance object ModelBase ModuleDefinition Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties AssemblyName [NotMapped] public string AssemblyName { get; set; } Property Value string Categories Categories this Module will be shown in (in the admin-dialogs) public string Categories { get; set; } Property Value string Contact [NotMapped] public string Contact { get; set; } Property Value string ControlTypeRoutes [NotMapped] public string ControlTypeRoutes { get; set; } Property Value string ControlTypeTemplate [NotMapped] public string ControlTypeTemplate { get; set; } Property Value string DefaultAction [NotMapped] public string DefaultAction { get; set; } Property Value string Dependencies [NotMapped] public string Dependencies { get; set; } Property Value string Description Module description for admin dialogs. public string Description { get; set; } Property Value string IsAutoEnabled [NotMapped] public bool IsAutoEnabled { get; set; } Property Value bool IsEnabled [NotMapped] public bool IsEnabled { get; set; } Property Value bool IsPortable [NotMapped] public bool IsPortable { get; set; } Property Value bool License [NotMapped] public string License { get; set; } Property Value string ModuleDefinitionId Reference to the ModuleDefinition. public int ModuleDefinitionId { get; set; } Property Value int ModuleDefinitionName Name of the ModuleDefinition public string ModuleDefinitionName { get; set; } Property Value string Name Friendly name to show in UI public string Name { get; set; } Property Value string Owner [NotMapped] public string Owner { get; set; } Property Value string PackageName [NotMapped] public string PackageName { get; set; } Property Value string PageTemplates [NotMapped] public List<PageTemplate> PageTemplates { get; set; } Property Value List<PageTemplate> PermissionList [NotMapped] public List<Permission> PermissionList { get; set; } Property Value List<Permission> PermissionNames [NotMapped] public string PermissionNames { get; set; } Property Value string Permissions [Obsolete(\"The Permissions property is deprecated. Use PermissionList instead\", false)] [NotMapped] [JsonIgnore] public string Permissions { get; set; } Property Value string ReleaseVersions ReleaseVersions contains a comma delimited list of all official release versions of a module ie \"1.0.0,1.0.1\" Must be set for modules which use SQL scripts or include version-based logic in IInstallable implementations [NotMapped] public string ReleaseVersions { get; set; } Property Value string Resources [NotMapped] public List<Resource> Resources { get; set; } Property Value List<Resource> Runtimes [NotMapped] public string Runtimes { get; set; } Property Value string ServerManagerType [NotMapped] public string ServerManagerType { get; set; } Property Value string SettingsType [NotMapped] public string SettingsType { get; set; } Property Value string SiteId [NotMapped] public int SiteId { get; set; } Property Value int Template [NotMapped] public string Template { get; set; } Property Value string Url [NotMapped] public string Url { get; set; } Property Value string Version Version information of this Module based on the DLL / NuGet package. public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Notification.html": {
    "href": "api/Oqtane.Models.Notification.html",
    "title": "Class Notification | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Notification Namespace Oqtane.Models Assembly Oqtane.Shared.dll Notification for a User - usually meant to be sent as an E-Mail. public class Notification : IDeletable Inheritance object Notification Implements IDeletable Constructors Notification() public Notification() Notification(int, User, User, string, string) public Notification(int siteId, User from, User to, string subject, string body) Parameters siteId int from User to User subject string body string Notification(int, User, User, string, string, int?) public Notification(int siteId, User from, User to, string subject, string body, int? parentId) Parameters siteId int from User to User subject string body string parentId int? Notification(int, User, string, string) public Notification(int siteId, User to, string subject, string body) Parameters siteId int to User subject string body string Notification(int, User, string, string, DateTime) public Notification(int siteId, User to, string subject, string body, DateTime sendOn) Parameters siteId int to User subject string body string sendOn DateTime Notification(int, string, string, string, string) public Notification(int siteId, string toDisplayName, string toEmail, string subject, string body) Parameters siteId int toDisplayName string toEmail string subject string body string Notification(int, string, string, string, string, DateTime) public Notification(int siteId, string toDisplayName, string toEmail, string subject, string body, DateTime sendOn) Parameters siteId int toDisplayName string toEmail string subject string body string sendOn DateTime Notification(int, string, string, string, string, string, string) public Notification(int siteId, string fromDisplayName, string fromEmail, string toDisplayName, string toEmail, string subject, string body) Parameters siteId int fromDisplayName string fromEmail string toDisplayName string toEmail string subject string body string Properties Body Body / Contents of this Notification public string Body { get; set; } Property Value string CreatedOn When the notification was created. public DateTime CreatedOn { get; set; } Property Value DateTime DeletedBy User who deleted this object. public string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. public DateTime? DeletedOn { get; set; } Property Value DateTime? DeliveredOn When the Notification was sent/delivered. public DateTime? DeliveredOn { get; set; } Property Value DateTime? FromDisplayName Nice Name of the Creator public string FromDisplayName { get; set; } Property Value string FromEmail Creator E-Mail public string FromEmail { get; set; } Property Value string FromUserId Creator User ID public int? FromUserId { get; set; } Property Value int? IsDeleted If something is deleted, this will be true. public bool IsDeleted { get; set; } Property Value bool IsDelivered If it has been delivered. See also DeliveredOn. public bool IsDelivered { get; set; } Property Value bool IsRead If it has been read. See also IsDelivered public bool IsRead { get; set; } Property Value bool NotificationId Internal ID public int NotificationId { get; set; } Property Value int ParentId Reference to an optional Parent Notification - in case it's a kind of thread with reply-messages. public int? ParentId { get; set; } Property Value int? SendOn When the Notification should be sent. See also DeliveredOn public DateTime? SendOn { get; set; } Property Value DateTime? SiteId Reference to the Site on which the Notification was created. public int SiteId { get; set; } Property Value int Subject Message Subject. public string Subject { get; set; } Property Value string ToDisplayName Recipient Nice-Name. public string ToDisplayName { get; set; } Property Value string ToEmail Recipient Mail public string ToEmail { get; set; } Property Value string ToUserId Recipient User ID - nullable, as Recipient could be someone that's not a user. public int? ToUserId { get; set; } Property Value int?"
  },
  "api/Oqtane.Models.Package.html": {
    "href": "api/Oqtane.Models.Package.html",
    "title": "Class Package | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Package Namespace Oqtane.Models Assembly Oqtane.Shared.dll A software Package for installation. public class Package Inheritance object Package Properties Description Description of the Package. public string Description { get; set; } Property Value string Downloads Download count to show how popular the package is. public long Downloads { get; set; } Property Value long ExpiryDate The expiry date of the package public DateTime? ExpiryDate { get; set; } Property Value DateTime? License License for the Package. public string License { get; set; } Property Value string LogoFileId logo file id public int? LogoFileId { get; set; } Property Value int? LogoUrl logo url public string LogoUrl { get; set; } Property Value string Name Friendly name of the package public string Name { get; set; } Property Value string Owner Owner of the package public string Owner { get; set; } Property Value string OwnerUrl Url for the owner of the package public string OwnerUrl { get; set; } Property Value string PackageId ID of the Package. Usually constructed of the Namespace. public string PackageId { get; set; } Property Value string PackageUrl The direct Url for downloading the package public string PackageUrl { get; set; } Property Value string PaymentUrl The Url for purchasing the package public string PaymentUrl { get; set; } Property Value string Price The price of the package public decimal? Price { get; set; } Property Value decimal? ProductUrl Friendly name of the package public string ProductUrl { get; set; } Property Value string ReleaseDate date the package was released public DateTime ReleaseDate { get; set; } Property Value DateTime SupportUrl The direct Url for getting support for the product public string SupportUrl { get; set; } Property Value string TrialPeriod The trial period in days public int TrialPeriod { get; set; } Property Value int Version Version as defined in the NuGet package. public string Version { get; set; } Property Value string Vulnerabilities Indicates if any known security vulnerabilities exist public int Vulnerabilities { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Page.html": {
    "href": "api/Oqtane.Models.Page.html",
    "title": "Class Page | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Page Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Page in Oqtane public class Page : ModelBase, IAuditable, IDeletable Inheritance object ModelBase Page Implements IAuditable IDeletable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties BodyContent Content to be included in the body of the page public string BodyContent { get; set; } Property Value string DefaultContainerType Reference to a Container which will be used for modules on this page. public string DefaultContainerType { get; set; } Property Value string DeletedBy User who deleted this object. public string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. public DateTime? DeletedOn { get; set; } Property Value DateTime? EditMode [Obsolete(\"The EditMode property is deprecated\", false)] [NotMapped] public bool EditMode { get; set; } Property Value bool EffectiveDate Start of when this assignment is valid. See also ExpiryDate public DateTime? EffectiveDate { get; set; } Property Value DateTime? ExpiryDate End of when this assignment is valid. See also EffectiveDate public DateTime? ExpiryDate { get; set; } Property Value DateTime? HasChildren Determines if there are sub-pages. True if this page has sub-pages. [NotMapped] public bool HasChildren { get; set; } Property Value bool HeadContent Content to be included in the head of the page public string HeadContent { get; set; } Property Value string Icon Icon file for this page. TODO: unclear what this is for, and what icon library is used. Probably FontAwesome? public string Icon { get; set; } Property Value string IsClickable public bool IsClickable { get; set; } Property Value bool IsDeleted If something is deleted, this will be true. public bool IsDeleted { get; set; } Property Value bool IsNavigation public bool IsNavigation { get; set; } Property Value bool IsPersonalizable public bool IsPersonalizable { get; set; } Property Value bool LayoutType [Obsolete(\"The LayoutType property is deprecated\", false)] [NotMapped] public string LayoutType { get; set; } Property Value string Level [NotMapped] public int Level { get; set; } Property Value int Name Page Name. TODO: todoc where this is used public string Name { get; set; } Property Value string Order Sort order in the list of other sibling pages public int Order { get; set; } Property Value int PageId Id of the Page public int PageId { get; set; } Property Value int Panes List of Pane-names which this Page has. [NotMapped] public List<string> Panes { get; set; } Property Value List<string> ParentId Reference to the parent Page if it has one. public int? ParentId { get; set; } Property Value int? Path Path of the page. TODO: todoc relative to what? site root, parent-page, domain? public string Path { get; set; } Property Value string PermissionList [NotMapped] public List<Permission> PermissionList { get; set; } Property Value List<Permission> Permissions [Obsolete(\"The Permissions property is deprecated. Use PermissionList instead\", false)] [NotMapped] [JsonIgnore] public string Permissions { get; set; } Property Value string Resources List of Resource (CSS, JS) which this page needs to render properly. [NotMapped] public List<Resource> Resources { get; set; } Property Value List<Resource> Settings [NotMapped] public Dictionary<string, string> Settings { get; set; } Property Value Dictionary<string, string> SiteId Reference to the Site. public int SiteId { get; set; } Property Value int ThemeType Reference to a Theme which will be used to show this page. public string ThemeType { get; set; } Property Value string Title Page Title which is shown in the browser tab. public string Title { get; set; } Property Value string Url Full URL to this page. TODO: verify that this is the case - does it contain domain etc. or just from domain or alias root? public string Url { get; set; } Property Value string UserId public int? UserId { get; set; } Property Value int?"
  },
  "api/Oqtane.Models.PageModule.html": {
    "href": "api/Oqtane.Models.PageModule.html",
    "title": "Class PageModule | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageModule Namespace Oqtane.Models Assembly Oqtane.Shared.dll Information about a Module instance on a Page public class PageModule : ModelBase, IAuditable, IDeletable Inheritance object ModelBase PageModule Implements IAuditable IDeletable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties ContainerType Reference to a Razor Container which wraps this module instance. public string ContainerType { get; set; } Property Value string DeletedBy User who deleted this object. public string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. public DateTime? DeletedOn { get; set; } Property Value DateTime? EffectiveDate Start of when this assignment is valid. See also ExpiryDate public DateTime? EffectiveDate { get; set; } Property Value DateTime? ExpiryDate End of when this assignment is valid. See also EffectiveDate public DateTime? ExpiryDate { get; set; } Property Value DateTime? IsDeleted If something is deleted, this will be true. public bool IsDeleted { get; set; } Property Value bool Module The Module itself. TODO: todoc - unclear if this is always populated public Module Module { get; set; } Property Value Module ModuleId Reference to the Module. public int ModuleId { get; set; } Property Value int Order The sorting order / position in the Pane where this module appears. public int Order { get; set; } Property Value int PageId Reference to the Page. public int PageId { get; set; } Property Value int PageModuleId Internal ID to identify this instance. public int PageModuleId { get; set; } Property Value int Pane The Pane which this module instance appears. public string Pane { get; set; } Property Value string Title Module title. Will be shown in the Container if the container shows titles. public string Title { get; set; } Property Value string"
  },
  "api/Oqtane.Models.PageTemplate.html": {
    "href": "api/Oqtane.Models.PageTemplate.html",
    "title": "Class PageTemplate | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageTemplate Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class PageTemplate Inheritance object PageTemplate Constructors PageTemplate() public PageTemplate() Properties AliasName public string AliasName { get; set; } Property Value string BodyContent public string BodyContent { get; set; } Property Value string DefaultContainerType public string DefaultContainerType { get; set; } Property Value string EditMode [Obsolete(\"This property is obsolete\", false)] public bool EditMode { get; set; } Property Value bool HeadContent public string HeadContent { get; set; } Property Value string Icon public string Icon { get; set; } Property Value string IsClickable public bool IsClickable { get; set; } Property Value bool IsDeleted public bool IsDeleted { get; set; } Property Value bool IsNavigation public bool IsNavigation { get; set; } Property Value bool IsPersonalizable public bool IsPersonalizable { get; set; } Property Value bool Name public string Name { get; set; } Property Value string Order public int Order { get; set; } Property Value int PagePermissions [Obsolete(\"The PagePermissions property is deprecated. Use PermissionList instead\", false)] public string PagePermissions { get; set; } Property Value string PageTemplateModules public List<PageTemplateModule> PageTemplateModules { get; set; } Property Value List<PageTemplateModule> Parent public string Parent { get; set; } Property Value string Path public string Path { get; set; } Property Value string PermissionList public List<Permission> PermissionList { get; set; } Property Value List<Permission> ThemeType public string ThemeType { get; set; } Property Value string Title public string Title { get; set; } Property Value string Update public bool Update { get; set; } Property Value bool Url public string Url { get; set; } Property Value string Version public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.PageTemplateModule.html": {
    "href": "api/Oqtane.Models.PageTemplateModule.html",
    "title": "Class PageTemplateModule | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageTemplateModule Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class PageTemplateModule Inheritance object PageTemplateModule Constructors PageTemplateModule() public PageTemplateModule() Properties ContainerType public string ContainerType { get; set; } Property Value string Content public string Content { get; set; } Property Value string IsDeleted public bool IsDeleted { get; set; } Property Value bool ModuleDefinitionName public string ModuleDefinitionName { get; set; } Property Value string ModulePermissions [Obsolete(\"The ModulePermissions property is deprecated. Use PermissionList instead\", false)] public string ModulePermissions { get; set; } Property Value string Order public int Order { get; set; } Property Value int Pane public string Pane { get; set; } Property Value string PermissionList public List<Permission> PermissionList { get; set; } Property Value List<Permission> Title public string Title { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Permission.html": {
    "href": "api/Oqtane.Models.Permission.html",
    "title": "Class Permission | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Permission Namespace Oqtane.Models Assembly Oqtane.Shared.dll Permission information for anything in Oqtane. Things in Oqtane are identified as Entities, so anything that can be identified can be described here. public class Permission : ModelBase, IAuditable Inheritance object ModelBase Permission Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Constructors Permission() public Permission() Permission(int, string, int, string, string, int?, bool) public Permission(int siteId, string entityName, int entityId, string permissionName, string roleName, int? userId, bool isAuthorized) Parameters siteId int entityName string entityId int permissionName string roleName string userId int? isAuthorized bool Permission(int, string, string, string, int?, bool) public Permission(int siteId, string entityName, string permissionName, string roleName, int? userId, bool isAuthorized) Parameters siteId int entityName string permissionName string roleName string userId int? isAuthorized bool Permission(string, int, bool) public Permission(string permissionName, int userId, bool isAuthorized) Parameters permissionName string userId int isAuthorized bool Permission(string, string, bool) public Permission(string permissionName, string roleName, bool isAuthorized) Parameters permissionName string roleName string isAuthorized bool Properties EntityId ID of the Entity these permissions apply to (ie. a ModuleId). A value of -1 indicates the permission applies to all EntityNames regardless of ID (ie. API permissions) public int EntityId { get; set; } Property Value int EntityName Name of the Entity these permissions apply to (ie. Module ) public string EntityName { get; set; } Property Value string IsAuthorized The type of permission (ie. grant = true, deny = false) public bool IsAuthorized { get; set; } Property Value bool PermissionId Internal ID storing this information. public int PermissionId { get; set; } Property Value int PermissionName Name of the permission (ie. View) public string PermissionName { get; set; } Property Value string Role [Obsolete(\"The Role property is deprecated\", false)] [NotMapped] [JsonIgnore] public Role Role { get; set; } Property Value Role RoleId Role this permission applies to. If null then this is a User permission. public int? RoleId { get; set; } Property Value int? RoleName The role name associated to the RoleId. [NotMapped] public string RoleName { get; set; } Property Value string SiteId Reference to the Site which contains both the target Entity and permissions. public int SiteId { get; set; } Property Value int UserId User this permission applies to. If null then this is a Role permission. public int? UserId { get; set; } Property Value int? Methods Clone(Permission) public Permission Clone(Permission permission) Parameters permission Permission Returns Permission"
  },
  "api/Oqtane.Models.Profile.html": {
    "href": "api/Oqtane.Models.Profile.html",
    "title": "Class Profile | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Profile Namespace Oqtane.Models Assembly Oqtane.Shared.dll A single Profile Property information of a User. So a user will have many of these to fully describe his Profile. public class Profile : ModelBase, IAuditable Inheritance object ModelBase Profile Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties Autocomplete Autocomplete setting for the property. If set, enable autocomplete for the corresponding input field. public string Autocomplete { get; set; } Property Value string Category Category of this Profile-Property for grouping etc. public string Category { get; set; } Property Value string DefaultValue Initial/default value of this Property. public string DefaultValue { get; set; } Property Value string Description Description of the Property for the UI. public string Description { get; set; } Property Value string IsPrivate Some Profile Properties are private, meaning other users won't see them. public bool IsPrivate { get; set; } Property Value bool IsRequired Some Profile Properties are required - marked with this field. public bool IsRequired { get; set; } Property Value bool MaxLength Limits the input length of the property. public int MaxLength { get; set; } Property Value int Name Name of the Profile-Property. NOT the User-Name. public string Name { get; set; } Property Value string Options This gives possible values for dropdown input fields. public string Options { get; set; } Property Value string ProfileId Internal ID public int ProfileId { get; set; } Property Value int Rows Optional number of rows (textarea) public int Rows { get; set; } Property Value int SiteId Reference to the Site. It's nullable, probably because certain users like Super-Users don't specifically belong to any site. public int? SiteId { get; set; } Property Value int? Title Title (label) of the Profile Property. public string Title { get; set; } Property Value string Validation Optional RegExp validation expression public string Validation { get; set; } Property Value string ViewOrder Order of the Property in the list of Profile-Properties. public int ViewOrder { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Resource.html": {
    "href": "api/Oqtane.Models.Resource.html",
    "title": "Class Resource | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Resource Namespace Oqtane.Models Assembly Oqtane.Shared.dll Resource Objects describe a JavaScript or CSS file which is needed by the Module to work. public class Resource Inheritance object Resource Properties Bundle For Scripts a Bundle can be used to identify dependencies and ordering in the script loading process public string Bundle { get; set; } Property Value string Content Allows specification of inline script - not applicable to Stylesheets public string Content { get; set; } Property Value string CrossOrigin Cross-Origin rules for this Resources. Usually anonymous public string CrossOrigin { get; set; } Property Value string Declaration [Obsolete(\"ResourceDeclaration is deprecated\", false)] public ResourceDeclaration Declaration { get; set; } Property Value ResourceDeclaration ES6Module For Scripts this allows type=\"module\" registrations - not applicable to Stylesheets public bool ES6Module { get; set; } Property Value bool Integrity Integrity checks to increase the security of resources accessed. Especially common in CDN resources. public string Integrity { get; set; } Property Value string Level For Stylesheets this defines the relative position for cascading purposes public ResourceLevel Level { get; set; } Property Value ResourceLevel Location For Scripts this defines if the resource should be included in the Head or Body public ResourceLocation Location { get; set; } Property Value ResourceLocation Namespace The namespace of the component that declared the resource - only used in SiteRouter public string Namespace { get; set; } Property Value string Reload Indicates that a script should be reloaded on every page transition - not applicable to Stylesheets public bool Reload { get; set; } Property Value bool RenderMode For Scripts this defines the render mode (default is all render modes) - not applicable to Stylesheets public string RenderMode { get; set; } Property Value string ResourceType A ResourceType so the Interop can properly create script or link tags public ResourceType ResourceType { get; set; } Property Value ResourceType Url Path to the resource (note that querytring parameters can be included for cache busting ie. ?v=#) public string Url { get; set; } Property Value string Methods Clone(ResourceLevel, string) public Resource Clone(ResourceLevel level, string name) Parameters level ResourceLevel name string Returns Resource"
  },
  "api/Oqtane.Models.Result.html": {
    "href": "api/Oqtane.Models.Result.html",
    "title": "Class Result | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Result Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class Result Inheritance object Result Constructors Result(bool) public Result(bool success) Parameters success bool Result(bool, string) public Result(bool success, string message) Parameters success bool message string Properties Message public string Message { get; set; } Property Value string Success public bool Success { get; set; } Property Value bool"
  },
  "api/Oqtane.Models.Role.html": {
    "href": "api/Oqtane.Models.Role.html",
    "title": "Class Role | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Role Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Security Role in Oqtane. public class Role : ModelBase, IAuditable Inheritance object ModelBase Role Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties Description Brief description for Admin dialogs. public string Description { get; set; } Property Value string IsAutoAssigned Determines if users automatically get assigned to this role. public bool IsAutoAssigned { get; set; } Property Value bool IsSystem public bool IsSystem { get; set; } Property Value bool Name Role name to show in Admin dialogs. public string Name { get; set; } Property Value string RoleId Primary ID public int RoleId { get; set; } Property Value int SiteId Reference to a Site if applicable. public int? SiteId { get; set; } Property Value int?"
  },
  "api/Oqtane.Models.Route.html": {
    "href": "api/Oqtane.Models.Route.html",
    "title": "Class Route | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Route Namespace Oqtane.Models Assembly Oqtane.Shared.dll A route is comprised of multiple components ( some optional depending on context ) {scheme}://{hostname}/{aliaspath}/{pagepath}/*/{moduleid}/{action}/!/{urlparameters}?{query}#{fragment} public class Route Inheritance object Route Constructors Route() parameterless constructor to prevent deserialization exceptions public Route() Route(string, string) default constructor the route parameter can be obtained from NavigationManager.Uri on client or HttpContext.Request.GetEncodedUrl() on server the aliaspath parameter can be obtained from PageState.Alias.Path on client or TenantManager.GetAlias().Path on server public Route(string route, string aliaspath) Parameters route string aliaspath string Properties AbsolutePath The absolute path for the route public string AbsolutePath { get; set; } Property Value string Action A route may contain an action (ie. when created using EditUrl) located after the module id. public string Action { get; set; } Property Value string AliasPath An absolute path may contain an alias path public string AliasPath { get; set; } Property Value string Authority The host name or IP address and port number (does not include scheme or trailing slash) public string Authority { get; set; } Property Value string Fragment A route may contain a fragment located after the # delimiter public string Fragment { get; set; } Property Value string Host A fully qualified route contains a host name. The host name may include a port number. public string Host { get; set; } Property Value string ModuleId A route may contain a module id (ie. when created using EditUrl) located after the module delimiter segment (/*/). public string ModuleId { get; set; } Property Value string PagePath A absolute path may contain a page path. public string PagePath { get; set; } Property Value string PathAndQuery The absolute path for the route including the querystring public string PathAndQuery { get; set; } Property Value string Port A host name may contain a port number public string Port { get; set; } Property Value string Query All querystring parameters (prefixed with a ? delimiter) public string Query { get; set; } Property Value string RootUrl The root url contains the resource identifier for the root of an Oqtane installation ( including scheme ) public string RootUrl { get; } Property Value string Scheme A fully qualified route contains a scheme (ie. http, https ) public string Scheme { get; set; } Property Value string SiteUrl The site url contains the resource identifier for the home page of a specific Oqtane site ( including scheme and possibly an alias path ) public string SiteUrl { get; } Property Value string UrlParameters A route may contain parameters located after the url parameter delimiter segment (/!/). public string UrlParameters { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Setting.html": {
    "href": "api/Oqtane.Models.Setting.html",
    "title": "Class Setting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Setting Namespace Oqtane.Models Assembly Oqtane.Shared.dll A setting for any kind of object like Tenant, Site, Page, Module etc. public class Setting : ModelBase, IAuditable Inheritance object ModelBase Setting Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties EntityId Id of the Entity we're describing - so it could be Site number 2 public int EntityId { get; set; } Property Value int EntityName What kind of entity the setting is for, like Page, Site etc. public string EntityName { get; set; } Property Value string IsPrivate Indicates if this setting is private - indicating it should be maintained on the server and not sent to the client public bool IsPrivate { get; set; } Property Value bool SettingId ID in the Database - mainly used to later update an existing setting. public int SettingId { get; set; } Property Value int SettingName Name of the setting. public string SettingName { get; set; } Property Value string SettingValue The value of this Setting. It's always a string, so make sure to convert/cast as needed. public string SettingValue { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Site.html": {
    "href": "api/Oqtane.Models.Site.html",
    "title": "Class Site | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Site Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Site in a Tenant in an Oqtane installation. Sites can have multiple Aliases. public class Site : ModelBase, IAuditable, IDeletable Inheritance object ModelBase Site Implements IAuditable IDeletable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties AdminContainerType public string AdminContainerType { get; set; } Property Value string AllowRegistration Determines if visitors may register / create user accounts public bool AllowRegistration { get; set; } Property Value bool BodyContent Content to be included in the body of the page public string BodyContent { get; set; } Property Value string CaptureBrokenUrls Determines if broken urls (404s) will be captured automatically public bool CaptureBrokenUrls { get; set; } Property Value bool DefaultContainerType public string DefaultContainerType { get; set; } Property Value string DefaultLayoutType [NotMapped] [Obsolete(\"This property is deprecated.\", false)] public string DefaultLayoutType { get; set; } Property Value string DefaultThemeType public string DefaultThemeType { get; set; } Property Value string DeletedBy User who deleted this object. public string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. public DateTime? DeletedOn { get; set; } Property Value DateTime? FaviconFileId Reference to a File which has the FavIcon for this site. Should be an image. The theme can then use this where needed. TODO: todoc does this get applied automatically, or does the Theme do this? public int? FaviconFileId { get; set; } Property Value int? HeadContent Content to be included in the head of the page public string HeadContent { get; set; } Property Value string HomePageId The home page of the site which will be used as a fallback if no page has a path of \"/\" public int? HomePageId { get; set; } Property Value int? Hybrid Indicates if a site can be integrated with an external .NET MAUI hybrid application public bool Hybrid { get; set; } Property Value bool ImageFiles The ImageFile extensions [NotMapped] public string ImageFiles { get; set; } Property Value string IsDeleted If something is deleted, this will be true. public bool IsDeleted { get; set; } Property Value bool Languages [NotMapped] public List<Language> Languages { get; set; } Property Value List<Language> LogoFileId Reference to a File which has the Logo for this site. Should be an image. The theme can then use this where needed. public int? LogoFileId { get; set; } Property Value int? Modules [NotMapped] public List<Module> Modules { get; set; } Property Value List<Module> Name The site Name TODO: todoc where this will be used / shown public string Name { get; set; } Property Value string Pages [NotMapped] public List<Page> Pages { get; set; } Property Value List<Page> Prerender If the site supports prerendering (only applies to Interactive rendermode) public bool Prerender { get; set; } Property Value bool PwaAppIconFileId public int? PwaAppIconFileId { get; set; } Property Value int? PwaIsEnabled public bool PwaIsEnabled { get; set; } Property Value bool PwaSplashIconFileId public int? PwaSplashIconFileId { get; set; } Property Value int? RenderMode The default render mode for the site ie. Static,Interactive,Headless public string RenderMode { get; set; } Property Value string Runtime The render mode for UI components which require interactivity ie. Server,WebAssembly,Auto public string Runtime { get; set; } Property Value string Settings [NotMapped] public Dictionary<string, string> Settings { get; set; } Property Value Dictionary<string, string> SiteGuid Unique GUID to identify the Site. public string SiteGuid { get; set; } Property Value string SiteId Internal ID, not to be confused with the AliasId public int SiteId { get; set; } Property Value int SiteTemplateType [NotMapped] public string SiteTemplateType { get; set; } Property Value string TenantId Reference to the Tenant the Site is in public int TenantId { get; set; } Property Value int Themes [NotMapped] public List<Theme> Themes { get; set; } Property Value List<Theme> UploadableFiles The UploadableFile extensions [NotMapped] public string UploadableFiles { get; set; } Property Value string Version Keeps track of site configuration changes and is used by the ISiteMigration interface public string Version { get; set; } Property Value string VisitorTracking Determines if visitors will be tracked public bool VisitorTracking { get; set; } Property Value bool"
  },
  "api/Oqtane.Models.SiteTemplate.html": {
    "href": "api/Oqtane.Models.SiteTemplate.html",
    "title": "Class SiteTemplate | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteTemplate Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class SiteTemplate Inheritance object SiteTemplate Properties Name public string Name { get; set; } Property Value string TypeName public string TypeName { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Sitemap.html": {
    "href": "api/Oqtane.Models.Sitemap.html",
    "title": "Class Sitemap | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Sitemap Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Sitemap public class Sitemap Inheritance object Sitemap Properties ModifiedOn Url public DateTime ModifiedOn { get; set; } Property Value DateTime Url Url public string Url { get; set; } Property Value string"
  },
  "api/Oqtane.Models.SqlQuery.html": {
    "href": "api/Oqtane.Models.SqlQuery.html",
    "title": "Class SqlQuery | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SqlQuery Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class SqlQuery Inheritance object SqlQuery Properties DBConnectionString public string DBConnectionString { get; set; } Property Value string DBType public string DBType { get; set; } Property Value string Query public string Query { get; set; } Property Value string Results public List<Dictionary<string, string>> Results { get; set; } Property Value List<Dictionary<string, string>> TenantId Reference to the Tenant this belongs to public int TenantId { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Sync.html": {
    "href": "api/Oqtane.Models.Sync.html",
    "title": "Class Sync | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Sync Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class Sync Inheritance object Sync Properties SyncDate public DateTime SyncDate { get; set; } Property Value DateTime SyncEvents public List<SyncEvent> SyncEvents { get; set; } Property Value List<SyncEvent>"
  },
  "api/Oqtane.Models.SyncEvent.html": {
    "href": "api/Oqtane.Models.SyncEvent.html",
    "title": "Class SyncEvent | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SyncEvent Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class SyncEvent : EventArgs Inheritance object EventArgs SyncEvent Properties Action public string Action { get; set; } Property Value string EntityId public int EntityId { get; set; } Property Value int EntityName public string EntityName { get; set; } Property Value string ModifiedOn public DateTime ModifiedOn { get; set; } Property Value DateTime SiteId public int SiteId { get; set; } Property Value int TenantId public int TenantId { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Template.html": {
    "href": "api/Oqtane.Models.Template.html",
    "title": "Class Template | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Template Namespace Oqtane.Models Assembly Oqtane.Shared.dll model for defining metadata for a Module or Theme template public class Template Inheritance object Template Properties Location location where template will be created (dynamically set) public string Location { get; set; } Property Value string Name name of template (folder name) public string Name { get; set; } Property Value string Namespace namespace (uses tokens) public string Namespace { get; set; } Property Value string Title title of template public string Title { get; set; } Property Value string Type type of template - Internal / External public string Type { get; set; } Property Value string Version minimum framework version dependency public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Tenant.html": {
    "href": "api/Oqtane.Models.Tenant.html",
    "title": "Class Tenant | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Tenant Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Tenant in Oqtane. Tenants can contain multiple Sites and have all their data in a separate Database. public class Tenant : ModelBase, IAuditable Inheritance object ModelBase Tenant Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties DBConnectionString Connection string to access this Tenant DB. public string DBConnectionString { get; set; } Property Value string DBType Type of DB used in this Tenant public string DBType { get; set; } Property Value string Remarks New in v2.1.0 Name Name of the Tenant to show in Tenant lists. public string Name { get; set; } Property Value string TenantId ID of the Tenant. public int TenantId { get; set; } Property Value int Version public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.Theme.html": {
    "href": "api/Oqtane.Models.Theme.html",
    "title": "Class Theme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Theme Namespace Oqtane.Models Assembly Oqtane.Shared.dll Information about a Theme in Oqtane. public class Theme : ModelBase, IAuditable Inheritance object ModelBase Theme Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Constructors Theme() public Theme() Properties AssemblyName [NotMapped] public string AssemblyName { get; set; } Property Value string Contact [NotMapped] public string Contact { get; set; } Property Value string ContainerControls [Obsolete(\"This property is obsolete. Use Containers instead.\", false)] [NotMapped] public string ContainerControls { get; set; } Property Value string ContainerSettingsType [NotMapped] public string ContainerSettingsType { get; set; } Property Value string Containers [NotMapped] public List<ThemeControl> Containers { get; set; } Property Value List<ThemeControl> Dependencies [NotMapped] public string Dependencies { get; set; } Property Value string IsAutoEnabled [NotMapped] public bool IsAutoEnabled { get; set; } Property Value bool IsEnabled [NotMapped] public bool IsEnabled { get; set; } Property Value bool Layouts [Obsolete(\"This property is obsolete.\", false)] [NotMapped] public List<ThemeControl> Layouts { get; set; } Property Value List<ThemeControl> License [NotMapped] public string License { get; set; } Property Value string Name Friendly name to show in UI public string Name { get; set; } Property Value string Owner [NotMapped] public string Owner { get; set; } Property Value string PackageName [NotMapped] public string PackageName { get; set; } Property Value string PaneLayouts [Obsolete(\"This property is obsolete. Use Layouts instead.\", false)] [NotMapped] public string PaneLayouts { get; set; } Property Value string Resources [NotMapped] public List<Resource> Resources { get; set; } Property Value List<Resource> SiteId [NotMapped] public int SiteId { get; set; } Property Value int Template [NotMapped] public string Template { get; set; } Property Value string ThemeControls [Obsolete(\"This property is obsolete. Use Themes instead.\", false)] [NotMapped] public string ThemeControls { get; set; } Property Value string ThemeId Reference to the Theme. public int ThemeId { get; set; } Property Value int ThemeName Full Namespace / Identifier of the Theme. public string ThemeName { get; set; } Property Value string ThemeSettingsType [NotMapped] public string ThemeSettingsType { get; set; } Property Value string Themes [NotMapped] public List<ThemeControl> Themes { get; set; } Property Value List<ThemeControl> Url [NotMapped] public string Url { get; set; } Property Value string Version [NotMapped] public string Version { get; set; } Property Value string"
  },
  "api/Oqtane.Models.ThemeControl.html": {
    "href": "api/Oqtane.Models.ThemeControl.html",
    "title": "Class ThemeControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeControl Namespace Oqtane.Models Assembly Oqtane.Shared.dll public class ThemeControl Inheritance object ThemeControl Properties Name public string Name { get; set; } Property Value string Panes public string Panes { get; set; } Property Value string Thumbnail public string Thumbnail { get; set; } Property Value string TypeName public string TypeName { get; set; } Property Value string"
  },
  "api/Oqtane.Models.UrlMapping.html": {
    "href": "api/Oqtane.Models.UrlMapping.html",
    "title": "Class UrlMapping | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UrlMapping Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a UrlMapping in Oqtane. public class UrlMapping Inheritance object UrlMapping Properties CreatedOn Date when the url was first requested for the site public DateTime CreatedOn { get; set; } Property Value DateTime MappedUrl A Url the visitor will be redirected to public string MappedUrl { get; set; } Property Value string RequestedOn Date when the url was last requested for the site public DateTime RequestedOn { get; set; } Property Value DateTime Requests Number of requests all time for the url public int Requests { get; set; } Property Value int SiteId Reference to a Site public int SiteId { get; set; } Property Value int Url A fully quaified Url public string Url { get; set; } Property Value string UrlMappingId ID of this UrlMapping. public int UrlMappingId { get; set; } Property Value int"
  },
  "api/Oqtane.Models.User.html": {
    "href": "api/Oqtane.Models.User.html",
    "title": "Class User | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class User Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a User in Oqtane. public class User : ModelBase, IAuditable, IDeletable Inheritance object ModelBase User Implements IAuditable IDeletable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties DeletedBy User who deleted this object. public string DeletedBy { get; set; } Property Value string DeletedOn Timestamp when it was deleted. public DateTime? DeletedOn { get; set; } Property Value DateTime? DisplayName Name shown in menus / dialogs etc. public string DisplayName { get; set; } Property Value string Email User E-Mail address. public string Email { get; set; } Property Value string EmailConfirmed Information if this user's email address is confirmed (set during user creation) [NotMapped] public bool EmailConfirmed { get; set; } Property Value bool FolderPath The path name of the user's personal folder [NotMapped] public string FolderPath { get; } Property Value string IsAuthenticated Information if this user is authenticated. Anonymous users are not authenticated. [NotMapped] public bool IsAuthenticated { get; set; } Property Value bool IsDeleted If something is deleted, this will be true. public bool IsDeleted { get; set; } Property Value bool LastIPAddress Tracking information of IP used when the user last worked on this site. public string LastIPAddress { get; set; } Property Value string LastLoginOn Timestamp of last login. public DateTime? LastLoginOn { get; set; } Property Value DateTime? Password The users password. Note that this is not plaintext, so you can probably never really work with this. [NotMapped] public string Password { get; set; } Property Value string PhotoFileId Reference to a File containing the users photo. public int? PhotoFileId { get; set; } Property Value int? Roles Role names this user has. TODO: todoc - is this comma separated? [NotMapped] public string Roles { get; set; } Property Value string Settings Public User Settings [NotMapped] public Dictionary<string, string> Settings { get; set; } Property Value Dictionary<string, string> SiteId Reference to the Site this user belongs to. [NotMapped] public int SiteId { get; set; } Property Value int SuppressNotification Indicates if new user should be notified by email (set during user creation) [NotMapped] public bool SuppressNotification { get; set; } Property Value bool TwoFactorCode Stores the 2 factor verification code public string TwoFactorCode { get; set; } Property Value string TwoFactorExpiry The expiry date/time for the 2 factor verification code public DateTime? TwoFactorExpiry { get; set; } Property Value DateTime? TwoFactorRequired Indicates if the user requires 2 factor authentication to sign in public bool TwoFactorRequired { get; set; } Property Value bool UserId ID of this User. public int UserId { get; set; } Property Value int Username Username used for login. public string Username { get; set; } Property Value string"
  },
  "api/Oqtane.Models.UserRole.html": {
    "href": "api/Oqtane.Models.UserRole.html",
    "title": "Class UserRole | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserRole Namespace Oqtane.Models Assembly Oqtane.Shared.dll Assigns a Role to a User public class UserRole : ModelBase, IAuditable Inheritance object ModelBase UserRole Implements IAuditable Inherited Members ModelBase.CreatedBy ModelBase.CreatedOn ModelBase.ModifiedBy ModelBase.ModifiedOn Properties EffectiveDate Start of when this assignment is valid. See also ExpiryDate public DateTime? EffectiveDate { get; set; } Property Value DateTime? ExpiryDate End of when this assignment is valid. See also EffectiveDate public DateTime? ExpiryDate { get; set; } Property Value DateTime? Role Direct reference to the Role object. TODO: todoc - is this always populated? public Role Role { get; set; } Property Value Role RoleId Reference to the Role which the User receives public int RoleId { get; set; } Property Value int User Direct reference to the User object. TODO: todoc - is this always populated? public User User { get; set; } Property Value User UserId Reference to the User who receives this Role assignment. public int UserId { get; set; } Property Value int UserRoleId Id of this assignment public int UserRoleId { get; set; } Property Value int"
  },
  "api/Oqtane.Models.Visitor.html": {
    "href": "api/Oqtane.Models.Visitor.html",
    "title": "Class Visitor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Visitor Namespace Oqtane.Models Assembly Oqtane.Shared.dll Describes a Visitor in Oqtane. public class Visitor Inheritance object Visitor Properties CreatedOn Date the visitor first visited the site public DateTime CreatedOn { get; set; } Property Value DateTime IPAddress Last recorded IP Address of visitor public string IPAddress { get; set; } Property Value string Language Last recorded language of visitor public string Language { get; set; } Property Value string Referrer Last recorded Referrer of visitor public string Referrer { get; set; } Property Value string SiteId Reference to a Site public int SiteId { get; set; } Property Value int Url Last recorded Url of visitor public string Url { get; set; } Property Value string User Direct reference to the User object (if applicable) public User User { get; set; } Property Value User UserAgent Last recorded user agent of visitor public string UserAgent { get; set; } Property Value string UserId Reference to a User if applicable public int? UserId { get; set; } Property Value int? VisitedOn Date the visitor last visited the site public DateTime VisitedOn { get; set; } Property Value DateTime VisitorId ID of this Visitor. public int VisitorId { get; set; } Property Value int Visits Number of times a visitor has visited a site public int Visits { get; set; } Property Value int"
  },
  "api/Oqtane.Models.html": {
    "href": "api/Oqtane.Models.html",
    "title": "Namespace Oqtane.Models | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Models TODO: Please document what this namespace is for. Classes Alias An Alias maps a url like oqtane.my or oqtane.my/products to a Site and Tenant Culture Culture information describing a Culture Database Information about a Database used in the current Oqtane installation File Describes a File in Oqtane Folder Describes a Folder in Oqtane Installation Internal message used internally during installation. Each part of the installation will return the status / message when installing. Job Definition of a Job / Task which is run on the server. When Jobs run, they create a JobLog JobLog Log / Journal of Jobs executed. Language Language Information for Sites TODO: todoc - unclear how this is different from Culture Log A log entry in the events log. MigrationHistoryTable ModelBase Module Describes a Module Instance which will be shown on a page. This is different from a ModuleDefinition which describes a Module. ModuleContent Generic Model for Module-Contents to enable Import/Export of the Module-Data ModuleDefinition Describes a Module type (Definition) in Oqtane. The available Modules are determined at StartUp. Notification Notification for a User - usually meant to be sent as an E-Mail. Package A software Package for installation. Page Describes a Page in Oqtane PageModule Information about a Module instance on a Page PageTemplate PageTemplateModule Permission Permission information for anything in Oqtane. Things in Oqtane are identified as Entities, so anything that can be identified can be described here. Profile A single Profile Property information of a User. So a user will have many of these to fully describe his Profile. Resource Resource Objects describe a JavaScript or CSS file which is needed by the Module to work. Result Role Describes a Security Role in Oqtane. Route A route is comprised of multiple components ( some optional depending on context ) {scheme}://{hostname}/{aliaspath}/{pagepath}/*/{moduleid}/{action}/!/{urlparameters}?{query}#{fragment} Setting A setting for any kind of object like Tenant, Site, Page, Module etc. Site Describes a Site in a Tenant in an Oqtane installation. Sites can have multiple Aliases. SiteTemplate Sitemap Describes a Sitemap SqlQuery Sync SyncEvent Template model for defining metadata for a Module or Theme template Tenant Describes a Tenant in Oqtane. Tenants can contain multiple Sites and have all their data in a separate Database. Theme Information about a Theme in Oqtane. ThemeControl UrlMapping Describes a UrlMapping in Oqtane. User Describes a User in Oqtane. UserRole Assigns a Role to a User Visitor Describes a Visitor in Oqtane. Interfaces IAuditable Basic create/edit information - used in many objects. IDeletable Audit information for things than can be deleted."
  },
  "api/Oqtane.Modules.Controls.ActionDialog.html": {
    "href": "api/Oqtane.Modules.Controls.ActionDialog.html",
    "title": "Class ActionDialog | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ActionDialog Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class ActionDialog : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent ActionDialog Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Action [Parameter] public string Action { get; set; } Property Value string Class [Parameter] public string Class { get; set; } Property Value string Disabled [Parameter] public bool Disabled { get; set; } Property Value bool EditMode [Parameter] public string EditMode { get; set; } Property Value string Header [Parameter] public string Header { get; set; } Property Value string IconName [Parameter] public string IconName { get; set; } Property Value string Id [Parameter] public string Id { get; set; } Property Value string Message [Parameter] public string Message { get; set; } Property Value string OnClick [Parameter] public Action OnClick { get; set; } Property Value Action PermissionList [Parameter] public List<Permission> PermissionList { get; set; } Property Value List<Permission> Permissions [Parameter] public string Permissions { get; set; } Property Value string Security [Parameter] public SecurityAccessLevel? Security { get; set; } Property Value SecurityAccessLevel? Text [Parameter] public string Text { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.ActionLink.html": {
    "href": "api/Oqtane.Modules.Controls.ActionLink.html",
    "title": "Class ActionLink | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ActionLink Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class ActionLink : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent ActionLink Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Action [Parameter] public string Action { get; set; } Property Value string Class [Parameter] public string Class { get; set; } Property Value string Disabled [Parameter] public bool Disabled { get; set; } Property Value bool EditMode [Parameter] public string EditMode { get; set; } Property Value string IconName [Parameter] public string IconName { get; set; } Property Value string IconOnly [Parameter] public bool IconOnly { get; set; } Property Value bool ModuleId [Parameter] public int ModuleId { get; set; } Property Value int OnClick [Parameter] public Action OnClick { get; set; } Property Value Action Parameters [Parameter] public string Parameters { get; set; } Property Value string Path [Parameter] public string Path { get; set; } Property Value string PermissionList [Parameter] public List<Permission> PermissionList { get; set; } Property Value List<Permission> Permissions [Parameter] public string Permissions { get; set; } Property Value string ReturnUrl [Parameter] public string ReturnUrl { get; set; } Property Value string Security [Parameter] public SecurityAccessLevel? Security { get; set; } Property Value SecurityAccessLevel? Style [Parameter] public string Style { get; set; } Property Value string Text [Parameter] public string Text { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.AuditInfo.html": {
    "href": "api/Oqtane.Modules.Controls.AuditInfo.html",
    "title": "Class AuditInfo | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AuditInfo Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class AuditInfo : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase AuditInfo Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties CreatedBy [Parameter] public string CreatedBy { get; set; } Property Value string CreatedOn [Parameter] public DateTime? CreatedOn { get; set; } Property Value DateTime? DateTimeFormat [Parameter] public string DateTimeFormat { get; set; } Property Value string DeletedBy [Parameter] public string DeletedBy { get; set; } Property Value string DeletedOn [Parameter] public DateTime? DeletedOn { get; set; } Property Value DateTime? IsDeleted [Parameter] public bool IsDeleted { get; set; } Property Value bool ModifiedBy [Parameter] public string ModifiedBy { get; set; } Property Value string ModifiedOn [Parameter] public DateTime? ModifiedOn { get; set; } Property Value DateTime? Style [Parameter] public string Style { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.AutoComplete.html": {
    "href": "api/Oqtane.Modules.Controls.AutoComplete.html",
    "title": "Class AutoComplete | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AutoComplete Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class AutoComplete : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent AutoComplete Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Characters [Parameter] public int Characters { get; set; } Property Value int Key [Parameter] public string Key { get; set; } Property Value string OnSearch [Parameter] public Func<string, Task<Dictionary<string, string>>> OnSearch { get; set; } Property Value Func<string, Task<Dictionary<string, string>>> Placeholder [Parameter] public string Placeholder { get; set; } Property Value string Required [Parameter] public bool Required { get; set; } Property Value bool Rows [Parameter] public int Rows { get; set; } Property Value int Value [Parameter] public string Value { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Clear() public void Clear() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.FileManager.html": {
    "href": "api/Oqtane.Modules.Controls.FileManager.html",
    "title": "Class FileManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FileManager Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class FileManager : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase FileManager Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties FileId [Parameter] public int FileId { get; set; } Property Value int Filter [Parameter] public string Filter { get; set; } Property Value string Folder [Parameter] public string Folder { get; set; } Property Value string FolderId [Parameter] public int FolderId { get; set; } Property Value int Id [Parameter] public string Id { get; set; } Property Value string OnDelete [Parameter] public EventCallback<int> OnDelete { get; set; } Property Value EventCallback<int> OnSelect [Parameter] public EventCallback<int> OnSelect { get; set; } Property Value EventCallback<int> OnUpload [Parameter] public EventCallback<int> OnUpload { get; set; } Property Value EventCallback<int> ShowFiles [Parameter] public bool ShowFiles { get; set; } Property Value bool ShowFolders [Parameter] public bool ShowFolders { get; set; } Property Value bool ShowImage [Parameter] public bool ShowImage { get; set; } Property Value bool ShowProgress [Parameter] public bool ShowProgress { get; set; } Property Value bool ShowSuccess [Parameter] public bool ShowSuccess { get; set; } Property Value bool ShowUpload [Parameter] public bool ShowUpload { get; set; } Property Value bool UploadMultiple [Parameter] public bool UploadMultiple { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder GetFile() public File GetFile() Returns File GetFileId() public int GetFileId() Returns int GetFolderId() public int GetFolderId() Returns int OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation. Refresh() public Task Refresh() Returns Task Refresh(int) public Task Refresh(int fileId) Parameters fileId int Returns Task"
  },
  "api/Oqtane.Modules.Controls.InputList.html": {
    "href": "api/Oqtane.Modules.Controls.InputList.html",
    "title": "Class InputList | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InputList Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class InputList : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent InputList Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) LocalizableComponent.OnParametersSet() ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties DataList [EditorRequired] [Parameter] public Dictionary<string, string> DataList { get; set; } Property Value Dictionary<string, string> Value [Parameter] public string Value { get; set; } Property Value string ValueChanged [EditorRequired] [Parameter] public EventCallback<string> ValueChanged { get; set; } Property Value EventCallback<string> Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnChange(ChangeEventArgs) protected void OnChange(ChangeEventArgs e) Parameters e ChangeEventArgs OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized()"
  },
  "api/Oqtane.Modules.Controls.Label.html": {
    "href": "api/Oqtane.Modules.Controls.Label.html",
    "title": "Class Label | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Label Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class Label : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent Label Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties ChildContent [Parameter] public RenderFragment ChildContent { get; set; } Property Value RenderFragment Class [Parameter] public string Class { get; set; } Property Value string For [Parameter] public string For { get; set; } Property Value string HelpText [Parameter] public string HelpText { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.LocalizableComponent.html": {
    "href": "api/Oqtane.Modules.Controls.LocalizableComponent.html",
    "title": "Class LocalizableComponent | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LocalizableComponent Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class LocalizableComponent : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties IsLocalizable protected bool IsLocalizable { get; } Property Value bool LocalizerFactory [Inject] public IStringLocalizerFactory LocalizerFactory { get; set; } Property Value IStringLocalizerFactory ResourceKey [Parameter] public string ResourceKey { get; set; } Property Value string ResourceType [Parameter] public string ResourceType { get; set; } Property Value string Methods Localize(string) protected string Localize(string name) Parameters name string Returns string Localize(string, string) protected string Localize(string propertyName, string propertyValue) Parameters propertyName string propertyValue string Returns string OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.ModuleMessage.html": {
    "href": "api/Oqtane.Modules.Controls.ModuleMessage.html",
    "title": "Class ModuleMessage | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleMessage Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class ModuleMessage : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase ModuleMessage Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Message [Parameter] public string Message { get; set; } Property Value string Type [Parameter] public MessageType Type { get; set; } Property Value MessageType Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet() RefreshMessage(string, MessageType) public void RefreshMessage(string message, MessageType type) Parameters message string type MessageType"
  },
  "api/Oqtane.Modules.Controls.Pager-1.html": {
    "href": "api/Oqtane.Modules.Controls.Pager-1.html",
    "title": "Class Pager<TableItem> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Pager<TableItem> Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class Pager<TableItem> : ModuleControlBase, IModuleControl Type Parameters TableItem Inheritance object ComponentBase ModuleBase ModuleControlBase Pager<TableItem> Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Class [Parameter] public string Class { get; set; } Property Value string ColumnClass [Parameter] public string ColumnClass { get; set; } Property Value string Columns [Parameter] public string Columns { get; set; } Property Value string CurrentPage [Parameter] public string CurrentPage { get; set; } Property Value string Detail [Parameter] public RenderFragment<TableItem> Detail { get; set; } Property Value RenderFragment<TableItem> DisplayPages [Parameter] public string DisplayPages { get; set; } Property Value string Footer [Parameter] public RenderFragment Footer { get; set; } Property Value RenderFragment Format [Parameter] public string Format { get; set; } Property Value string Header [Parameter] public RenderFragment Header { get; set; } Property Value RenderFragment Items [Parameter] public IEnumerable<TableItem> Items { get; set; } Property Value IEnumerable<TableItem> OnPageChange [Parameter] public Action<int> OnPageChange { get; set; } Property Value Action<int> PageSize [Parameter] public string PageSize { get; set; } Property Value string Parameters [Parameter] public string Parameters { get; set; } Property Value string Row [Parameter] public RenderFragment<TableItem> Row { get; set; } Property Value RenderFragment<TableItem> RowClass [Parameter] public string RowClass { get; set; } Property Value string SearchProperties [Parameter] public string SearchProperties { get; set; } Property Value string Toolbar [Parameter] public string Toolbar { get; set; } Property Value string _Search [SupplyParameterFromForm(FormName = \"PagerForm\")] public string _Search { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder NavigateToPage(string) public void NavigateToPage(string direction) Parameters direction string OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet() Reset() public void Reset() Search() public void Search() SetPagerSize() public void SetPagerSize() SkipPages(string) public void SkipPages(string direction) Parameters direction string UpdateList(int) public void UpdateList(int page) Parameters page int"
  },
  "api/Oqtane.Modules.Controls.PermissionGrid.html": {
    "href": "api/Oqtane.Modules.Controls.PermissionGrid.html",
    "title": "Class PermissionGrid | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionGrid Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class PermissionGrid : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase PermissionGrid Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties EntityName [Parameter] public string EntityName { get; set; } Property Value string PermissionList [Parameter] public List<Permission> PermissionList { get; set; } Property Value List<Permission> PermissionNames [Parameter] public string PermissionNames { get; set; } Property Value string Permissions [Parameter] public string Permissions { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder GetPermissionList() public List<Permission> GetPermissionList() Returns List<Permission> GetPermissions() public string GetPermissions() Returns string OnInitializedAsync() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed. protected override Task OnInitializedAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.Modules.Controls.RichTextEditor.html": {
    "href": "api/Oqtane.Modules.Controls.RichTextEditor.html",
    "title": "Class RichTextEditor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RichTextEditor Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class RichTextEditor : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase RichTextEditor Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties AllowFileManagement [Parameter] public bool AllowFileManagement { get; set; } Property Value bool AllowRawHtml [Parameter] public bool AllowRawHtml { get; set; } Property Value bool AllowRichText [Parameter] public bool AllowRichText { get; set; } Property Value bool Content [Parameter] public string Content { get; set; } Property Value string DebugLevel [Parameter] public string DebugLevel { get; set; } Property Value string Placeholder [Parameter] public string Placeholder { get; set; } Property Value string ReadOnly [Parameter] public bool ReadOnly { get; set; } Property Value bool Resources Identifies all resources in a module public override List<Resource> Resources { get; } Property Value List<Resource> Theme [Parameter] public string Theme { get; set; } Property Value string ToolbarContent [Parameter] public RenderFragment ToolbarContent { get; set; } Property Value RenderFragment Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder CloseRawFileManager() public void CloseRawFileManager() CloseRichFileManager() public void CloseRichFileManager() GetHtml() public Task<string> GetHtml() Returns Task<string> InsertRawImage() public Task InsertRawImage() Returns Task InsertRichImage() public Task InsertRichImage() Returns Task OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.RichTextEditorInterop.html": {
    "href": "api/Oqtane.Modules.Controls.RichTextEditorInterop.html",
    "title": "Class RichTextEditorInterop | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RichTextEditorInterop Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class RichTextEditorInterop Inheritance object RichTextEditorInterop Constructors RichTextEditorInterop(IJSRuntime) public RichTextEditorInterop(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Methods CreateEditor(ElementReference, ElementReference, bool, string, string, string) public Task CreateEditor(ElementReference quillElement, ElementReference toolbar, bool readOnly, string placeholder, string theme, string debugLevel) Parameters quillElement ElementReference toolbar ElementReference readOnly bool placeholder string theme string debugLevel string Returns Task EnableEditor(ElementReference, bool) public Task EnableEditor(ElementReference quillElement, bool mode) Parameters quillElement ElementReference mode bool Returns Task GetContent(ElementReference) public ValueTask<string> GetContent(ElementReference quillElement) Parameters quillElement ElementReference Returns ValueTask<string> GetCurrentCursor(ElementReference) public ValueTask<int> GetCurrentCursor(ElementReference quillElement) Parameters quillElement ElementReference Returns ValueTask<int> GetHtml(ElementReference) public ValueTask<string> GetHtml(ElementReference quillElement) Parameters quillElement ElementReference Returns ValueTask<string> GetText(ElementReference) public ValueTask<string> GetText(ElementReference quillElement) Parameters quillElement ElementReference Returns ValueTask<string> InsertImage(ElementReference, string, string, int) public Task InsertImage(ElementReference quillElement, string imageUrl, string altText, int editorIndex) Parameters quillElement ElementReference imageUrl string altText string editorIndex int Returns Task LoadEditorContent(ElementReference, string) public Task LoadEditorContent(ElementReference quillElement, string content) Parameters quillElement ElementReference content string Returns Task"
  },
  "api/Oqtane.Modules.Controls.Section.html": {
    "href": "api/Oqtane.Modules.Controls.Section.html",
    "title": "Class Section | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Section Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class Section : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent Section Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties ChildContent [Parameter] public RenderFragment ChildContent { get; set; } Property Value RenderFragment Expanded [Parameter] public string Expanded { get; set; } Property Value string Heading [Parameter] public string Heading { get; set; } Property Value string IsVisible [Parameter] public bool IsVisible { get; set; } Property Value bool Name [Parameter] public string Name { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.TabPanel.html": {
    "href": "api/Oqtane.Modules.Controls.TabPanel.html",
    "title": "Class TabPanel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TabPanel Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class TabPanel : LocalizableComponent, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase LocalizableComponent TabPanel Implements IModuleControl Inherited Members LocalizableComponent.LocalizerFactory LocalizableComponent.ResourceKey LocalizableComponent.ResourceType LocalizableComponent.IsLocalizable LocalizableComponent.Localize(string) LocalizableComponent.Localize(string, string) ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties ChildContent [Parameter] public RenderFragment ChildContent { get; set; } Property Value RenderFragment Heading [Parameter] public string Heading { get; set; } Property Value string Name [Parameter] public string Name { get; set; } Property Value string Security [Parameter] public SecurityAccessLevel? Security { get; set; } Property Value SecurityAccessLevel? Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder DisplayHeading() public string DisplayHeading() Returns string OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.TabStrip.html": {
    "href": "api/Oqtane.Modules.Controls.TabStrip.html",
    "title": "Class TabStrip | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TabStrip Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class TabStrip : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase TabStrip Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties ActiveTab [Parameter] public string ActiveTab { get; set; } Property Value string ChildContent [Parameter] public RenderFragment ChildContent { get; set; } Property Value RenderFragment Id [Parameter] public string Id { get; set; } Property Value string Refresh [Parameter] public bool Refresh { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Modules.Controls.TriStateCheckBox.html": {
    "href": "api/Oqtane.Modules.Controls.TriStateCheckBox.html",
    "title": "Class TriStateCheckBox | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TriStateCheckBox Namespace Oqtane.Modules.Controls Assembly Oqtane.Client.dll public class TriStateCheckBox : ModuleControlBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase TriStateCheckBox Implements IModuleControl Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance Properties Disabled [Parameter] public bool Disabled { get; set; } Property Value bool OnChange [Parameter] public Action<bool?> OnChange { get; set; } Property Value Action<bool?> Value [Parameter] public bool? Value { get; set; } Property Value bool? Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized()"
  },
  "api/Oqtane.Modules.Controls.html": {
    "href": "api/Oqtane.Modules.Controls.html",
    "title": "Namespace Oqtane.Modules.Controls | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Modules.Controls TODO: Please document what this namespace is for. Classes LocalizableComponent RichTextEditorInterop"
  },
  "api/Oqtane.Modules.IClientService.html": {
    "href": "api/Oqtane.Modules.IClientService.html",
    "title": "Interface IClientService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IClientService Namespace Oqtane.Modules Assembly Oqtane.Shared.dll Empty interface used to decorate client module services for auto registration as scoped public interface IClientService"
  },
  "api/Oqtane.Modules.IModule.html": {
    "href": "api/Oqtane.Modules.IModule.html",
    "title": "Interface IModule | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModule Namespace Oqtane.Modules Assembly Oqtane.Client.dll public interface IModule Properties ModuleDefinition ModuleDefinition ModuleDefinition { get; } Property Value ModuleDefinition"
  },
  "api/Oqtane.Modules.IModuleControl.html": {
    "href": "api/Oqtane.Modules.IModuleControl.html",
    "title": "Interface IModuleControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModuleControl Namespace Oqtane.Modules Assembly Oqtane.Shared.dll public interface IModuleControl Properties Actions Allows for routing by configuration rather than by convention ( comma delimited ) - defaults to using component file name string Actions { get; } Property Value string Prerender Specifies the prerender mode for the moudle control ie: true or false bool? Prerender { get; } Property Value bool? RenderMode Specifies the required render mode for the module control ie. Static,Interactive string RenderMode { get; } Property Value string Resources Identifies all resources in a module List<Resource> Resources { get; } Property Value List<Resource> SecurityAccessLevel Defines the security access level for this control - defaults to View SecurityAccessLevel SecurityAccessLevel { get; } Property Value SecurityAccessLevel Title Title to display for this control - defaults to module title string Title { get; } Property Value string UseAdminContainer Container for embedding module control - defaults to true. false will suppress the default modal UI popup behavior and render the component in the page. bool UseAdminContainer { get; } Property Value bool"
  },
  "api/Oqtane.Modules.IPortable.html": {
    "href": "api/Oqtane.Modules.IPortable.html",
    "title": "Interface IPortable | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPortable Namespace Oqtane.Modules Assembly Oqtane.Server.dll public interface IPortable Methods ExportModule(Module) string ExportModule(Module module) Parameters module Module Returns string ImportModule(Module, string, string) void ImportModule(Module module, string content, string version) Parameters module Module content string version string"
  },
  "api/Oqtane.Modules.IService.html": {
    "href": "api/Oqtane.Modules.IService.html",
    "title": "Interface IService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IService Namespace Oqtane.Modules Assembly Oqtane.Shared.dll Empty interface used to decorate module services for auto registration as scoped public interface IService"
  },
  "api/Oqtane.Modules.ISitemap.html": {
    "href": "api/Oqtane.Modules.ISitemap.html",
    "title": "Interface ISitemap | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISitemap Namespace Oqtane.Modules Assembly Oqtane.Server.dll public interface ISitemap Methods GetUrls(string, string, Module) List<Sitemap> GetUrls(string alias, string path, Module module) Parameters alias string path string module Module Returns List<Sitemap>"
  },
  "api/Oqtane.Modules.ITransientService.html": {
    "href": "api/Oqtane.Modules.ITransientService.html",
    "title": "Interface ITransientService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITransientService Namespace Oqtane.Modules Assembly Oqtane.Shared.dll Empty interface used to decorate module services for auto registration as a transient public interface ITransientService"
  },
  "api/Oqtane.Modules.MessageType.html": {
    "href": "api/Oqtane.Modules.MessageType.html",
    "title": "Enum MessageType | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum MessageType Namespace Oqtane.Modules Assembly Oqtane.Client.dll public enum MessageType Fields Error = 3 Info = 1 Success = 0 Undefined = 4 Warning = 2"
  },
  "api/Oqtane.Modules.MigratableModuleBase.html": {
    "href": "api/Oqtane.Modules.MigratableModuleBase.html",
    "title": "Class MigratableModuleBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MigratableModuleBase Namespace Oqtane.Modules Assembly Oqtane.Server.dll public class MigratableModuleBase Inheritance object MigratableModuleBase Methods Migrate(DBContextBase, Tenant, MigrationType) public bool Migrate(DBContextBase dbContext, Tenant tenant, MigrationType migrationType) Parameters dbContext DBContextBase tenant Tenant migrationType MigrationType Returns bool"
  },
  "api/Oqtane.Modules.ModuleBase.Logger.html": {
    "href": "api/Oqtane.Modules.ModuleBase.Logger.html",
    "title": "Class ModuleBase.Logger | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleBase.Logger Namespace Oqtane.Modules Assembly Oqtane.Client.dll public class ModuleBase.Logger Inheritance object ModuleBase.Logger Constructors Logger(ModuleBase) public Logger(ModuleBase moduleBase) Parameters moduleBase ModuleBase Methods LogCritical(LogFunction, string, params object[]) public Task LogCritical(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogCritical(Exception, string, params object[]) public Task LogCritical(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogCritical(string, params object[]) public Task LogCritical(string message, params object[] args) Parameters message string args object[] Returns Task LogDebug(LogFunction, string, params object[]) public Task LogDebug(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogDebug(Exception, string, params object[]) public Task LogDebug(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogDebug(string, params object[]) public Task LogDebug(string message, params object[] args) Parameters message string args object[] Returns Task LogError(LogFunction, string, params object[]) public Task LogError(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogError(Exception, string, params object[]) public Task LogError(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogError(string, params object[]) public Task LogError(string message, params object[] args) Parameters message string args object[] Returns Task LogInformation(LogFunction, string, params object[]) public Task LogInformation(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogInformation(Exception, string, params object[]) public Task LogInformation(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogInformation(string, params object[]) public Task LogInformation(string message, params object[] args) Parameters message string args object[] Returns Task LogTrace(LogFunction, string, params object[]) public Task LogTrace(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogTrace(Exception, string, params object[]) public Task LogTrace(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogTrace(string, params object[]) public Task LogTrace(string message, params object[] args) Parameters message string args object[] Returns Task LogWarning(LogFunction, string, params object[]) public Task LogWarning(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogWarning(Exception, string, params object[]) public Task LogWarning(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogWarning(string, params object[]) public Task LogWarning(string message, params object[] args) Parameters message string args object[] Returns Task"
  },
  "api/Oqtane.Modules.ModuleBase.html": {
    "href": "api/Oqtane.Modules.ModuleBase.html",
    "title": "Class ModuleBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleBase Namespace Oqtane.Modules Assembly Oqtane.Client.dll public abstract class ModuleBase : ComponentBase, IModuleControl Inheritance object ComponentBase ModuleBase Implements IModuleControl Derived ModuleControlBase Properties Actions Allows for routing by configuration rather than by convention ( comma delimited ) - defaults to using component file name public virtual string Actions { get; } Property Value string JSRuntime [Inject] protected IJSRuntime JSRuntime { get; set; } Property Value IJSRuntime LoggingService [Inject] protected ILogService LoggingService { get; set; } Property Value ILogService ModuleInstance public ModuleInstance ModuleInstance { get; } Property Value ModuleInstance ModuleState [CascadingParameter] protected Module ModuleState { get; set; } Property Value Module PageState [CascadingParameter] protected PageState PageState { get; set; } Property Value PageState Prerender Specifies the prerender mode for the moudle control ie: true or false public virtual bool? Prerender { get; } Property Value bool? RenderMode Specifies the required render mode for the module control ie. Static,Interactive public virtual string RenderMode { get; } Property Value string RenderModeBoundary [Parameter] public RenderModeBoundary RenderModeBoundary { get; set; } Property Value RenderModeBoundary Resources Identifies all resources in a module public virtual List<Resource> Resources { get; set; } Property Value List<Resource> SecurityAccessLevel Defines the security access level for this control - defaults to View public virtual SecurityAccessLevel SecurityAccessLevel { get; set; } Property Value SecurityAccessLevel SiteState [Inject] protected SiteState SiteState { get; set; } Property Value SiteState Title Title to display for this control - defaults to module title public virtual string Title { get; } Property Value string UrlParameters public Dictionary<string, string> UrlParameters { get; } Property Value Dictionary<string, string> UrlParametersTemplate public virtual string UrlParametersTemplate { get; set; } Property Value string UseAdminContainer Container for embedding module control - defaults to true. false will suppress the default modal UI popup behavior and render the component in the page. public virtual bool UseAdminContainer { get; } Property Value bool logger protected ModuleBase.Logger logger { get; } Property Value ModuleBase.Logger Methods AddHeadContent(string) public void AddHeadContent(string content) Parameters content string AddModuleMessage(string, MessageType) public void AddModuleMessage(string message, MessageType type) Parameters message string type MessageType AddModuleMessage(string, MessageType, string) public void AddModuleMessage(string message, MessageType type, string position) Parameters message string type MessageType position string AddScript(Resource) public void AddScript(Resource resource) Parameters resource Resource AddUrlParameters(params object[]) public string AddUrlParameters(params object[] parameters) Parameters parameters object[] Returns string ClearModuleMessage() public void ClearModuleMessage() ContentUrl(int) [Obsolete(\"ContentUrl(int fileId) is deprecated. Use FileUrl(int fileId) instead.\", false)] public string ContentUrl(int fileid) Parameters fileid int Returns string ContentUrl(int, bool) [Obsolete(\"ContentUrl(int fileId, bool asAttachment) is deprecated. Use FileUrl(int fileId, bool download) instead.\", false)] public string ContentUrl(int fileid, bool asAttachment) Parameters fileid int asAttachment bool Returns string EditUrl(int, string) public string EditUrl(int moduleId, string action) Parameters moduleId int action string Returns string EditUrl(int, string, string) public string EditUrl(int moduleId, string action, string parameters) Parameters moduleId int action string parameters string Returns string EditUrl(string) public string EditUrl(string action) Parameters action string Returns string EditUrl(string, int, string, string) public string EditUrl(string path, int moduleid, string action, string parameters) Parameters path string moduleid int action string parameters string Returns string EditUrl(string, string) public string EditUrl(string action, string parameters) Parameters action string parameters string Returns string FileUrl(int) public string FileUrl(int fileid) Parameters fileid int Returns string FileUrl(int, bool) public string FileUrl(int fileid, bool download) Parameters fileid int download bool Returns string FileUrl(string, string) public string FileUrl(string folderpath, string filename) Parameters folderpath string filename string Returns string FileUrl(string, string, bool) public string FileUrl(string folderpath, string filename, bool download) Parameters folderpath string filename string download bool Returns string GetUrlParameters(string) public virtual Dictionary<string, string> GetUrlParameters(string template = \"\") Parameters template string Returns Dictionary<string, string> HideProgressIndicator() public void HideProgressIndicator() ImageUrl(int, int, int) public string ImageUrl(int fileid, int width, int height) Parameters fileid int width int height int Returns string ImageUrl(int, int, int, string) public string ImageUrl(int fileid, int width, int height, string mode) Parameters fileid int width int height int mode string Returns string ImageUrl(int, int, int, string, string, string, int, bool) public string ImageUrl(int fileid, int width, int height, string mode, string position, string background, int rotate, bool recreate) Parameters fileid int width int height int mode string position string background string rotate int recreate bool Returns string Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) public Task Log(Alias alias, LogLevel level, LogFunction function, Exception exception, string message, params object[] args) Parameters alias Alias level LogLevel function LogFunction exception Exception message string args object[] Returns Task Log(Alias, LogLevel, string, Exception, string, params object[]) public Task Log(Alias alias, LogLevel level, string function, Exception exception, string message, params object[] args) Parameters alias Alias level LogLevel function string exception Exception message string args object[] Returns Task ModulePath() public string ModulePath() Returns string NavigateUrl() public string NavigateUrl() Returns string NavigateUrl(bool) public string NavigateUrl(bool refresh) Parameters refresh bool Returns string NavigateUrl(string) public string NavigateUrl(string path) Parameters path string Returns string NavigateUrl(string, bool) public string NavigateUrl(string path, bool refresh) Parameters path string refresh bool Returns string NavigateUrl(string, string) public string NavigateUrl(string path, string parameters) Parameters path string parameters string Returns string OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. ScrollToPageTop() public Task ScrollToPageTop() Returns Task SetModuleTitle(string) public void SetModuleTitle(string title) Parameters title string SetModuleVisibility(bool) public void SetModuleVisibility(bool visible) Parameters visible bool SetPageTitle(string) public void SetPageTitle(string title) Parameters title string ShouldRender() Returns a flag to indicate whether the component should render. protected override bool ShouldRender() Returns bool ShowProgressIndicator() public void ShowProgressIndicator()"
  },
  "api/Oqtane.Modules.ModuleControlBase.html": {
    "href": "api/Oqtane.Modules.ModuleControlBase.html",
    "title": "Class ModuleControlBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleControlBase Namespace Oqtane.Modules Assembly Oqtane.Client.dll public abstract class ModuleControlBase : ModuleBase, IModuleControl Inheritance object ComponentBase ModuleBase ModuleControlBase Implements IModuleControl Derived LocalizableComponent Inherited Members ModuleBase.logger ModuleBase.LoggingService ModuleBase.JSRuntime ModuleBase.SiteState ModuleBase.PageState ModuleBase.ModuleState ModuleBase.RenderModeBoundary ModuleBase.SecurityAccessLevel ModuleBase.Title ModuleBase.Actions ModuleBase.UseAdminContainer ModuleBase.Resources ModuleBase.RenderMode ModuleBase.Prerender ModuleBase.UrlParametersTemplate ModuleBase.UrlParameters ModuleBase.OnAfterRenderAsync(bool) ModuleBase.ShouldRender() ModuleBase.ModulePath() ModuleBase.NavigateUrl() ModuleBase.NavigateUrl(string) ModuleBase.NavigateUrl(bool) ModuleBase.NavigateUrl(string, string) ModuleBase.NavigateUrl(string, bool) ModuleBase.EditUrl(string) ModuleBase.EditUrl(string, string) ModuleBase.EditUrl(int, string) ModuleBase.EditUrl(int, string, string) ModuleBase.EditUrl(string, int, string, string) ModuleBase.FileUrl(string, string) ModuleBase.FileUrl(string, string, bool) ModuleBase.FileUrl(int) ModuleBase.FileUrl(int, bool) ModuleBase.ImageUrl(int, int, int) ModuleBase.ImageUrl(int, int, int, string) ModuleBase.ImageUrl(int, int, int, string, string, string, int, bool) ModuleBase.AddUrlParameters(params object[]) ModuleBase.GetUrlParameters(string) ModuleBase.AddModuleMessage(string, MessageType) ModuleBase.AddModuleMessage(string, MessageType, string) ModuleBase.ClearModuleMessage() ModuleBase.ShowProgressIndicator() ModuleBase.HideProgressIndicator() ModuleBase.SetModuleTitle(string) ModuleBase.SetModuleVisibility(bool) ModuleBase.SetPageTitle(string) ModuleBase.AddHeadContent(string) ModuleBase.AddScript(Resource) ModuleBase.ScrollToPageTop() ModuleBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ModuleBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ModuleBase.ContentUrl(int) ModuleBase.ContentUrl(int, bool) ModuleBase.ModuleInstance"
  },
  "api/Oqtane.Modules.html": {
    "href": "api/Oqtane.Modules.html",
    "title": "Namespace Oqtane.Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Modules TODO: Please document what this namespace is for. Namespaces Oqtane.Modules.Controls Classes MigratableModuleBase ModuleBase ModuleBase.Logger ModuleControlBase Interfaces IClientService Empty interface used to decorate client module services for auto registration as scoped IModule IModuleControl IPortable IService Empty interface used to decorate module services for auto registration as scoped ISitemap ITransientService Empty interface used to decorate module services for auto registration as a transient Enums MessageType"
  },
  "api/Oqtane.Pages.ExternalModel.html": {
    "href": "api/Oqtane.Pages.ExternalModel.html",
    "title": "Class ExternalModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ExternalModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll [AllowAnonymous] [IgnoreAntiforgeryToken] public class ExternalModel : PageModel Inheritance object PageModel ExternalModel Methods OnGetAsync(string) public IActionResult OnGetAsync(string returnurl) Parameters returnurl string Returns IActionResult OnPostAsync(string) public IActionResult OnPostAsync(string returnurl) Parameters returnurl string Returns IActionResult"
  },
  "api/Oqtane.Pages.FilesModel.html": {
    "href": "api/Oqtane.Pages.FilesModel.html",
    "title": "Class FilesModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FilesModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll [AllowAnonymous] public class FilesModel : PageModel Inheritance object PageModel FilesModel Constructors FilesModel(IWebHostEnvironment, IFileRepository, IUserPermissions, IUrlMappingRepository, ISyncManager, ILogManager, ITenantManager) public FilesModel(IWebHostEnvironment environment, IFileRepository files, IUserPermissions userPermissions, IUrlMappingRepository urlMappings, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters environment IWebHostEnvironment files IFileRepository userPermissions IUserPermissions urlMappings IUrlMappingRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods OnGet(string) public IActionResult OnGet(string path) Parameters path string Returns IActionResult"
  },
  "api/Oqtane.Pages.HostModel.html": {
    "href": "api/Oqtane.Pages.HostModel.html",
    "title": "Class HostModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class HostModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll public class HostModel : PageModel Inheritance object PageModel HostModel Constructors HostModel(IConfigManager, ITenantManager, ILocalizationManager, ILanguageRepository, IAntiforgery, IJwtManager, ISiteRepository, IPageRepository, IUrlMappingRepository, IVisitorRepository, IAliasRepository, ISettingRepository, IThemeRepository, IServerStateManager, ILogManager) public HostModel(IConfigManager configuration, ITenantManager tenantManager, ILocalizationManager localizationManager, ILanguageRepository languages, IAntiforgery antiforgery, IJwtManager jwtManager, ISiteRepository sites, IPageRepository pages, IUrlMappingRepository urlMappings, IVisitorRepository visitors, IAliasRepository aliases, ISettingRepository settings, IThemeRepository themes, IServerStateManager serverState, ILogManager logger) Parameters configuration IConfigManager tenantManager ITenantManager localizationManager ILocalizationManager languages ILanguageRepository antiforgery IAntiforgery jwtManager IJwtManager sites ISiteRepository pages IPageRepository urlMappings IUrlMappingRepository visitors IVisitorRepository aliases IAliasRepository settings ISettingRepository themes IThemeRepository serverState IServerStateManager logger ILogManager Fields AntiForgeryToken public string AntiForgeryToken Field Value string AuthorizationToken public string AuthorizationToken Field Value string BodyResources public string BodyResources Field Value string HeadResources public string HeadResources Field Value string Language public string Language Field Value string Message public string Message Field Value string PWAScript public string PWAScript Field Value string ReconnectScript public string ReconnectScript Field Value string RemoteIPAddress public string RemoteIPAddress Field Value string RenderMode public string RenderMode Field Value string Runtime public string Runtime Field Value string StyleSheets public string StyleSheets Field Value string VisitorId public int VisitorId Field Value int Methods OnGet() public IActionResult OnGet() Returns IActionResult"
  },
  "api/Oqtane.Pages.LoginModel.html": {
    "href": "api/Oqtane.Pages.LoginModel.html",
    "title": "Class LoginModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LoginModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll [AllowAnonymous] public class LoginModel : PageModel Inheritance object PageModel LoginModel Constructors LoginModel(UserManager<IdentityUser>, SignInManager<IdentityUser>, IUserManager) public LoginModel(UserManager<IdentityUser> identityUserManager, SignInManager<IdentityUser> identitySignInManager, IUserManager userManager) Parameters identityUserManager UserManager<IdentityUser> identitySignInManager SignInManager<IdentityUser> userManager IUserManager Methods OnPostAsync(string, string, bool, string) public Task<IActionResult> OnPostAsync(string username, string password, bool remember, string returnurl) Parameters username string password string remember bool returnurl string Returns Task<IActionResult>"
  },
  "api/Oqtane.Pages.LogoutModel.html": {
    "href": "api/Oqtane.Pages.LogoutModel.html",
    "title": "Class LogoutModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LogoutModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll [Authorize] [IgnoreAntiforgeryToken] public class LogoutModel : PageModel Inheritance object PageModel LogoutModel Constructors LogoutModel(IUserManager, ISyncManager) public LogoutModel(IUserManager userManager, ISyncManager syncManager) Parameters userManager IUserManager syncManager ISyncManager Methods OnPostAsync(string) public Task<IActionResult> OnPostAsync(string returnurl) Parameters returnurl string Returns Task<IActionResult>"
  },
  "api/Oqtane.Pages.SitemapModel.html": {
    "href": "api/Oqtane.Pages.SitemapModel.html",
    "title": "Class SitemapModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SitemapModel Namespace Oqtane.Pages Assembly Oqtane.Server.dll [AllowAnonymous] public class SitemapModel : PageModel Inheritance object PageModel SitemapModel Constructors SitemapModel(IServiceProvider, IPageRepository, IPageModuleRepository, IModuleDefinitionRepository, ISettingRepository, IUserPermissions, IUrlMappingRepository, ISyncManager, ILogManager, ITenantManager) public SitemapModel(IServiceProvider serviceProvider, IPageRepository pages, IPageModuleRepository pageModules, IModuleDefinitionRepository moduleDefinitions, ISettingRepository settings, IUserPermissions userPermissions, IUrlMappingRepository urlMappings, ISyncManager syncManager, ILogManager logger, ITenantManager tenantManager) Parameters serviceProvider IServiceProvider pages IPageRepository pageModules IPageModuleRepository moduleDefinitions IModuleDefinitionRepository settings ISettingRepository userPermissions IUserPermissions urlMappings IUrlMappingRepository syncManager ISyncManager logger ILogManager tenantManager ITenantManager Methods OnGet() public IActionResult OnGet() Returns IActionResult"
  },
  "api/Oqtane.Pages.StringWriterWithEncoding.html": {
    "href": "api/Oqtane.Pages.StringWriterWithEncoding.html",
    "title": "Class StringWriterWithEncoding | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class StringWriterWithEncoding Namespace Oqtane.Pages Assembly Oqtane.Server.dll public class StringWriterWithEncoding : StringWriter Inheritance object MarshalByRefObject TextWriter StringWriter StringWriterWithEncoding Constructors StringWriterWithEncoding(StringBuilder, Encoding) public StringWriterWithEncoding(StringBuilder builder, Encoding encoding) Parameters builder StringBuilder encoding Encoding Properties Encoding Gets the Encoding in which the output is written. public override Encoding Encoding { get; } Property Value Encoding The Encoding in which the output is written."
  },
  "api/Oqtane.Pages.html": {
    "href": "api/Oqtane.Pages.html",
    "title": "Namespace Oqtane.Pages | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Pages Classes ExternalModel FilesModel LoginModel LogoutModel SitemapModel StringWriterWithEncoding"
  },
  "api/Oqtane.Providers.IdentityAuthenticationStateProvider.html": {
    "href": "api/Oqtane.Providers.IdentityAuthenticationStateProvider.html",
    "title": "Class IdentityAuthenticationStateProvider | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class IdentityAuthenticationStateProvider Namespace Oqtane.Providers Assembly Oqtane.Client.dll public class IdentityAuthenticationStateProvider : AuthenticationStateProvider Inheritance object AuthenticationStateProvider IdentityAuthenticationStateProvider Constructors IdentityAuthenticationStateProvider(IServiceProvider) public IdentityAuthenticationStateProvider(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods GetAuthenticationStateAsync() Asynchronously gets an AuthenticationState that describes the current user. public override Task<AuthenticationState> GetAuthenticationStateAsync() Returns Task<AuthenticationState> A task that, when resolved, gives an AuthenticationState instance that describes the current user. NotifyAuthenticationChanged() public void NotifyAuthenticationChanged()"
  },
  "api/Oqtane.Providers.IdentityRevalidatingAuthenticationStateProvider.html": {
    "href": "api/Oqtane.Providers.IdentityRevalidatingAuthenticationStateProvider.html",
    "title": "Class IdentityRevalidatingAuthenticationStateProvider | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class IdentityRevalidatingAuthenticationStateProvider Namespace Oqtane.Providers Assembly Oqtane.Server.dll public class IdentityRevalidatingAuthenticationStateProvider : RevalidatingServerAuthenticationStateProvider Inheritance object AuthenticationStateProvider ServerAuthenticationStateProvider RevalidatingServerAuthenticationStateProvider IdentityRevalidatingAuthenticationStateProvider Constructors IdentityRevalidatingAuthenticationStateProvider(ILoggerFactory, IServiceScopeFactory, IOptions<IdentityOptions>) public IdentityRevalidatingAuthenticationStateProvider(ILoggerFactory loggerFactory, IServiceScopeFactory scopeFactory, IOptions<IdentityOptions> options) Parameters loggerFactory ILoggerFactory scopeFactory IServiceScopeFactory options IOptions<IdentityOptions> Properties RevalidationInterval Gets the interval between revalidation attempts. protected override TimeSpan RevalidationInterval { get; } Property Value TimeSpan Methods ValidateAuthenticationStateAsync(AuthenticationState, CancellationToken) Determines whether the authentication state is still valid. protected override Task<bool> ValidateAuthenticationStateAsync(AuthenticationState authState, CancellationToken cancellationToken) Parameters authState AuthenticationState cancellationToken CancellationToken A CancellationToken to observe while performing the operation. Returns Task<bool> A Task that resolves as true if the authenticationState is still valid, or false if it is not."
  },
  "api/Oqtane.Providers.html": {
    "href": "api/Oqtane.Providers.html",
    "title": "Namespace Oqtane.Providers | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Providers Classes IdentityAuthenticationStateProvider IdentityRevalidatingAuthenticationStateProvider"
  },
  "api/Oqtane.Repository.AliasRepository.html": {
    "href": "api/Oqtane.Repository.AliasRepository.html",
    "title": "Class AliasRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AliasRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class AliasRepository : IAliasRepository Inheritance object AliasRepository Implements IAliasRepository Constructors AliasRepository(MasterDBContext, IMemoryCache) public AliasRepository(MasterDBContext context, IMemoryCache cache) Parameters context MasterDBContext cache IMemoryCache Methods AddAlias(Alias) public Alias AddAlias(Alias alias) Parameters alias Alias Returns Alias DeleteAlias(int) public void DeleteAlias(int aliasId) Parameters aliasId int GetAlias(int) public Alias GetAlias(int aliasId) Parameters aliasId int Returns Alias GetAlias(int, bool) public Alias GetAlias(int aliasId, bool tracking) Parameters aliasId int tracking bool Returns Alias GetAlias(string) public Alias GetAlias(string url) Parameters url string Returns Alias GetAliases() public IEnumerable<Alias> GetAliases() Returns IEnumerable<Alias> UpdateAlias(Alias) public Alias UpdateAlias(Alias alias) Parameters alias Alias Returns Alias"
  },
  "api/Oqtane.Repository.DBContextBase.html": {
    "href": "api/Oqtane.Repository.DBContextBase.html",
    "title": "Class DBContextBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DBContextBase Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class DBContextBase : IdentityUserContext<IdentityUser> Inheritance object DbContext IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityUserContext<IdentityUser, string> IdentityUserContext<IdentityUser> DBContextBase Derived TenantDBContext Constructors DBContextBase(ITenantManager, IHttpContextAccessor) [Obsolete(\"This constructor is obsolete. Use DBContextBase(IDBContextDependencies DBContextDependencies) instead.\", false)] public DBContextBase(ITenantManager tenantManager, IHttpContextAccessor httpContextAccessor) Parameters tenantManager ITenantManager httpContextAccessor IHttpContextAccessor DBContextBase(IDBContextDependencies) public DBContextBase(IDBContextDependencies DBContextDependencies) Parameters DBContextDependencies IDBContextDependencies Properties ActiveDatabase public IDatabase ActiveDatabase { get; set; } Property Value IDatabase Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples. OnModelCreating(ModelBuilder) Configures the schema needed for the identity framework. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder The builder being used to construct the model for this context. SaveChanges() Saves all changes made in this context to the database. public override int SaveChanges() Returns int The number of state entries written to the database. Remarks This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads. Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute in parallel. See Avoiding DbContext threading issues for more information and examples. See Saving data in EF Core for more information and examples. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory. SaveChangesAsync(CancellationToken) Saves all changes made in this context to the database. public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A CancellationToken to observe while waiting for the task to complete. Returns Task<int> A task that represents the asynchronous save operation. The task result contains the number of state entries written to the database. Remarks This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads. Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute in parallel. See Avoiding DbContext threading issues for more information and examples. See Saving data in EF Core for more information and examples. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory. OperationCanceledException If the CancellationToken is canceled."
  },
  "api/Oqtane.Repository.DBContextDependencies.html": {
    "href": "api/Oqtane.Repository.DBContextDependencies.html",
    "title": "Class DBContextDependencies | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DBContextDependencies Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class DBContextDependencies : IDBContextDependencies Inheritance object DBContextDependencies Implements IDBContextDependencies Constructors DBContextDependencies(ITenantManager, IHttpContextAccessor, IConfigurationRoot) public DBContextDependencies(ITenantManager tenantManager, IHttpContextAccessor httpContextAccessor, IConfigurationRoot config) Parameters tenantManager ITenantManager httpContextAccessor IHttpContextAccessor config IConfigurationRoot Properties Accessor public IHttpContextAccessor Accessor { get; } Property Value IHttpContextAccessor Config public IConfigurationRoot Config { get; } Property Value IConfigurationRoot TenantManager public ITenantManager TenantManager { get; } Property Value ITenantManager"
  },
  "api/Oqtane.Repository.DbContextUtils.html": {
    "href": "api/Oqtane.Repository.DbContextUtils.html",
    "title": "Class DbContextUtils | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DbContextUtils Namespace Oqtane.Repository Assembly Oqtane.Server.dll public static class DbContextUtils Inheritance object DbContextUtils Methods SaveChanges(DbContext, IHttpContextAccessor) public static void SaveChanges(DbContext context, IHttpContextAccessor accessor) Parameters context DbContext accessor IHttpContextAccessor"
  },
  "api/Oqtane.Repository.FileRepository.html": {
    "href": "api/Oqtane.Repository.FileRepository.html",
    "title": "Class FileRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FileRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class FileRepository : IFileRepository Inheritance object FileRepository Implements IFileRepository Constructors FileRepository(IDbContextFactory<TenantDBContext>, IPermissionRepository, IFolderRepository, ITenantManager) public FileRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IPermissionRepository permissions, IFolderRepository folderRepository, ITenantManager tenants) Parameters dbContextFactory IDbContextFactory<TenantDBContext> permissions IPermissionRepository folderRepository IFolderRepository tenants ITenantManager Methods AddFile(File) public File AddFile(File file) Parameters file File Returns File DeleteFile(int) public void DeleteFile(int fileId) Parameters fileId int GetFile(int) public File GetFile(int fileId) Parameters fileId int Returns File GetFile(int, bool) public File GetFile(int fileId, bool tracking) Parameters fileId int tracking bool Returns File GetFile(int, string) public File GetFile(int folderId, string fileName) Parameters folderId int fileName string Returns File GetFile(int, string, string) public File GetFile(int siteId, string folderPath, string fileName) Parameters siteId int folderPath string fileName string Returns File GetFilePath(File) public string GetFilePath(File file) Parameters file File Returns string GetFilePath(int) public string GetFilePath(int fileId) Parameters fileId int Returns string GetFiles(int) public IEnumerable<File> GetFiles(int folderId) Parameters folderId int Returns IEnumerable<File> GetFiles(int, bool) public IEnumerable<File> GetFiles(int folderId, bool tracking) Parameters folderId int tracking bool Returns IEnumerable<File> UpdateFile(File) public File UpdateFile(File file) Parameters file File Returns File"
  },
  "api/Oqtane.Repository.FolderRepository.html": {
    "href": "api/Oqtane.Repository.FolderRepository.html",
    "title": "Class FolderRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FolderRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class FolderRepository : IFolderRepository Inheritance object FolderRepository Implements IFolderRepository Constructors FolderRepository(IDbContextFactory<TenantDBContext>, IPermissionRepository, IWebHostEnvironment, ITenantManager) public FolderRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IPermissionRepository permissions, IWebHostEnvironment environment, ITenantManager tenants) Parameters dbContextFactory IDbContextFactory<TenantDBContext> permissions IPermissionRepository environment IWebHostEnvironment tenants ITenantManager Methods AddFolder(Folder) public Folder AddFolder(Folder folder) Parameters folder Folder Returns Folder DeleteFolder(int) public void DeleteFolder(int folderId) Parameters folderId int GetFolder(int) public Folder GetFolder(int folderId) Parameters folderId int Returns Folder GetFolder(int, bool) public Folder GetFolder(int folderId, bool tracking) Parameters folderId int tracking bool Returns Folder GetFolder(int, string) public Folder GetFolder(int siteId, string path) Parameters siteId int path string Returns Folder GetFolderPath(Folder) public string GetFolderPath(Folder folder) Parameters folder Folder Returns string GetFolderPath(int) public string GetFolderPath(int folderId) Parameters folderId int Returns string GetFolders(int) public IEnumerable<Folder> GetFolders(int siteId) Parameters siteId int Returns IEnumerable<Folder> UpdateFolder(Folder) public Folder UpdateFolder(Folder folder) Parameters folder Folder Returns Folder"
  },
  "api/Oqtane.Repository.IAliasRepository.html": {
    "href": "api/Oqtane.Repository.IAliasRepository.html",
    "title": "Interface IAliasRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IAliasRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IAliasRepository Methods AddAlias(Alias) Alias AddAlias(Alias alias) Parameters alias Alias Returns Alias DeleteAlias(int) void DeleteAlias(int aliasId) Parameters aliasId int GetAlias(int) Alias GetAlias(int aliasId) Parameters aliasId int Returns Alias GetAlias(int, bool) Alias GetAlias(int aliasId, bool tracking) Parameters aliasId int tracking bool Returns Alias GetAlias(string) Alias GetAlias(string url) Parameters url string Returns Alias GetAliases() IEnumerable<Alias> GetAliases() Returns IEnumerable<Alias> UpdateAlias(Alias) Alias UpdateAlias(Alias alias) Parameters alias Alias Returns Alias"
  },
  "api/Oqtane.Repository.IDBContextDependencies.html": {
    "href": "api/Oqtane.Repository.IDBContextDependencies.html",
    "title": "Interface IDBContextDependencies | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IDBContextDependencies Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IDBContextDependencies Properties Accessor IHttpContextAccessor Accessor { get; } Property Value IHttpContextAccessor Config IConfigurationRoot Config { get; } Property Value IConfigurationRoot TenantManager ITenantManager TenantManager { get; } Property Value ITenantManager"
  },
  "api/Oqtane.Repository.IFileRepository.html": {
    "href": "api/Oqtane.Repository.IFileRepository.html",
    "title": "Interface IFileRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IFileRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IFileRepository Methods AddFile(File) File AddFile(File file) Parameters file File Returns File DeleteFile(int) void DeleteFile(int fileId) Parameters fileId int GetFile(int) File GetFile(int fileId) Parameters fileId int Returns File GetFile(int, bool) File GetFile(int fileId, bool tracking) Parameters fileId int tracking bool Returns File GetFile(int, string) File GetFile(int folderId, string fileName) Parameters folderId int fileName string Returns File GetFile(int, string, string) File GetFile(int siteId, string folderPath, string fileName) Parameters siteId int folderPath string fileName string Returns File GetFilePath(File) string GetFilePath(File file) Parameters file File Returns string GetFilePath(int) string GetFilePath(int fileId) Parameters fileId int Returns string GetFiles(int) IEnumerable<File> GetFiles(int folderId) Parameters folderId int Returns IEnumerable<File> GetFiles(int, bool) IEnumerable<File> GetFiles(int folderId, bool tracking) Parameters folderId int tracking bool Returns IEnumerable<File> UpdateFile(File) File UpdateFile(File file) Parameters file File Returns File"
  },
  "api/Oqtane.Repository.IFolderRepository.html": {
    "href": "api/Oqtane.Repository.IFolderRepository.html",
    "title": "Interface IFolderRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IFolderRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IFolderRepository Methods AddFolder(Folder) Folder AddFolder(Folder folder) Parameters folder Folder Returns Folder DeleteFolder(int) void DeleteFolder(int folderId) Parameters folderId int GetFolder(int) Folder GetFolder(int folderId) Parameters folderId int Returns Folder GetFolder(int, bool) Folder GetFolder(int folderId, bool tracking) Parameters folderId int tracking bool Returns Folder GetFolder(int, string) Folder GetFolder(int siteId, string path) Parameters siteId int path string Returns Folder GetFolderPath(Folder) string GetFolderPath(Folder folder) Parameters folder Folder Returns string GetFolderPath(int) string GetFolderPath(int folderId) Parameters folderId int Returns string GetFolders(int) IEnumerable<Folder> GetFolders(int siteId) Parameters siteId int Returns IEnumerable<Folder> UpdateFolder(Folder) Folder UpdateFolder(Folder folder) Parameters folder Folder Returns Folder"
  },
  "api/Oqtane.Repository.IJobLogRepository.html": {
    "href": "api/Oqtane.Repository.IJobLogRepository.html",
    "title": "Interface IJobLogRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IJobLogRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IJobLogRepository Methods AddJobLog(JobLog) JobLog AddJobLog(JobLog jobLog) Parameters jobLog JobLog Returns JobLog DeleteJobLog(int) void DeleteJobLog(int jobLogId) Parameters jobLogId int GetJobLog(int) JobLog GetJobLog(int jobLogId) Parameters jobLogId int Returns JobLog GetJobLogs() IEnumerable<JobLog> GetJobLogs() Returns IEnumerable<JobLog> UpdateJobLog(JobLog) JobLog UpdateJobLog(JobLog jobLog) Parameters jobLog JobLog Returns JobLog"
  },
  "api/Oqtane.Repository.IJobRepository.html": {
    "href": "api/Oqtane.Repository.IJobRepository.html",
    "title": "Interface IJobRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IJobRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IJobRepository Methods AddJob(Job) Job AddJob(Job job) Parameters job Job Returns Job DeleteJob(int) void DeleteJob(int jobId) Parameters jobId int GetJob(int) Job GetJob(int jobId) Parameters jobId int Returns Job GetJob(int, bool) Job GetJob(int jobId, bool tracking) Parameters jobId int tracking bool Returns Job GetJobs() IEnumerable<Job> GetJobs() Returns IEnumerable<Job> UpdateJob(Job) Job UpdateJob(Job job) Parameters job Job Returns Job"
  },
  "api/Oqtane.Repository.ILanguageRepository.html": {
    "href": "api/Oqtane.Repository.ILanguageRepository.html",
    "title": "Interface ILanguageRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILanguageRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ILanguageRepository Methods AddLanguage(Language) Language AddLanguage(Language language) Parameters language Language Returns Language DeleteLanguage(int) void DeleteLanguage(int languageId) Parameters languageId int GetLanguage(int) Language GetLanguage(int languageId) Parameters languageId int Returns Language GetLanguages(int) IEnumerable<Language> GetLanguages(int siteId) Parameters siteId int Returns IEnumerable<Language> UpdateLanguage(Language) void UpdateLanguage(Language language) Parameters language Language"
  },
  "api/Oqtane.Repository.ILogRepository.html": {
    "href": "api/Oqtane.Repository.ILogRepository.html",
    "title": "Interface ILogRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILogRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ILogRepository Methods AddLog(Log) void AddLog(Log log) Parameters log Log DeleteLogs(int, int) int DeleteLogs(int siteId, int age) Parameters siteId int age int Returns int GetLog(int) Log GetLog(int logId) Parameters logId int Returns Log GetLogs(int, string, string, int) IEnumerable<Log> GetLogs(int siteId, string level, string function, int rows) Parameters siteId int level string function string rows int Returns IEnumerable<Log>"
  },
  "api/Oqtane.Repository.IModuleDefinitionRepository.html": {
    "href": "api/Oqtane.Repository.IModuleDefinitionRepository.html",
    "title": "Interface IModuleDefinitionRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModuleDefinitionRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IModuleDefinitionRepository Methods DeleteModuleDefinition(int) void DeleteModuleDefinition(int moduleDefinitionId) Parameters moduleDefinitionId int FilterModuleDefinition(ModuleDefinition) ModuleDefinition FilterModuleDefinition(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition Returns ModuleDefinition GetModuleDefinition(int, int) ModuleDefinition GetModuleDefinition(int moduleDefinitionId, int siteId) Parameters moduleDefinitionId int siteId int Returns ModuleDefinition GetModuleDefinitions() IEnumerable<ModuleDefinition> GetModuleDefinitions() Returns IEnumerable<ModuleDefinition> GetModuleDefinitions(int) IEnumerable<ModuleDefinition> GetModuleDefinitions(int siteId) Parameters siteId int Returns IEnumerable<ModuleDefinition> UpdateModuleDefinition(ModuleDefinition) void UpdateModuleDefinition(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition"
  },
  "api/Oqtane.Repository.IModuleRepository.html": {
    "href": "api/Oqtane.Repository.IModuleRepository.html",
    "title": "Interface IModuleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModuleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IModuleRepository Methods AddModule(Module) Module AddModule(Module module) Parameters module Module Returns Module DeleteModule(int) void DeleteModule(int moduleId) Parameters moduleId int ExportModule(int) string ExportModule(int moduleId) Parameters moduleId int Returns string GetModule(int) Module GetModule(int moduleId) Parameters moduleId int Returns Module GetModule(int, bool) Module GetModule(int moduleId, bool tracking) Parameters moduleId int tracking bool Returns Module GetModules(int) IEnumerable<Module> GetModules(int siteId) Parameters siteId int Returns IEnumerable<Module> ImportModule(int, string) bool ImportModule(int moduleId, string content) Parameters moduleId int content string Returns bool UpdateModule(Module) Module UpdateModule(Module module) Parameters module Module Returns Module"
  },
  "api/Oqtane.Repository.INotificationRepository.html": {
    "href": "api/Oqtane.Repository.INotificationRepository.html",
    "title": "Interface INotificationRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface INotificationRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface INotificationRepository Methods AddNotification(Notification) Notification AddNotification(Notification notification) Parameters notification Notification Returns Notification DeleteNotification(int) void DeleteNotification(int notificationId) Parameters notificationId int DeleteNotifications(int, int) int DeleteNotifications(int siteId, int age) Parameters siteId int age int Returns int GetNotification(int) Notification GetNotification(int notificationId) Parameters notificationId int Returns Notification GetNotification(int, bool) Notification GetNotification(int notificationId, bool tracking) Parameters notificationId int tracking bool Returns Notification GetNotificationCount(int, int, int, bool) int GetNotificationCount(int siteId, int fromUserId, int toUserId, bool isRead) Parameters siteId int fromUserId int toUserId int isRead bool Returns int GetNotifications(int, int, int) IEnumerable<Notification> GetNotifications(int siteId, int fromUserId, int toUserId) Parameters siteId int fromUserId int toUserId int Returns IEnumerable<Notification> GetNotifications(int, int, int, int, bool) IEnumerable<Notification> GetNotifications(int siteId, int fromUserId, int toUserId, int count, bool isRead) Parameters siteId int fromUserId int toUserId int count int isRead bool Returns IEnumerable<Notification> UpdateNotification(Notification) Notification UpdateNotification(Notification notification) Parameters notification Notification Returns Notification"
  },
  "api/Oqtane.Repository.IPageModuleRepository.html": {
    "href": "api/Oqtane.Repository.IPageModuleRepository.html",
    "title": "Interface IPageModuleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPageModuleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IPageModuleRepository Methods AddPageModule(PageModule) PageModule AddPageModule(PageModule pageModule) Parameters pageModule PageModule Returns PageModule DeletePageModule(int) void DeletePageModule(int pageModuleId) Parameters pageModuleId int GetPageModule(int) PageModule GetPageModule(int pageModuleId) Parameters pageModuleId int Returns PageModule GetPageModule(int, bool) PageModule GetPageModule(int pageModuleId, bool tracking) Parameters pageModuleId int tracking bool Returns PageModule GetPageModule(int, int) PageModule GetPageModule(int pageId, int moduleId) Parameters pageId int moduleId int Returns PageModule GetPageModules(int) IEnumerable<PageModule> GetPageModules(int siteId) Parameters siteId int Returns IEnumerable<PageModule> UpdatePageModule(PageModule) PageModule UpdatePageModule(PageModule pageModule) Parameters pageModule PageModule Returns PageModule"
  },
  "api/Oqtane.Repository.IPageRepository.html": {
    "href": "api/Oqtane.Repository.IPageRepository.html",
    "title": "Interface IPageRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPageRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IPageRepository Methods AddPage(Page) Page AddPage(Page page) Parameters page Page Returns Page DeletePage(int) void DeletePage(int pageId) Parameters pageId int GetPage(int) Page GetPage(int pageId) Parameters pageId int Returns Page GetPage(int, bool) Page GetPage(int pageId, bool tracking) Parameters pageId int tracking bool Returns Page GetPage(string, int) Page GetPage(string path, int siteId) Parameters path string siteId int Returns Page GetPages(int) IEnumerable<Page> GetPages(int siteId) Parameters siteId int Returns IEnumerable<Page> UpdatePage(Page) Page UpdatePage(Page page) Parameters page Page Returns Page"
  },
  "api/Oqtane.Repository.IPermissionRepository.html": {
    "href": "api/Oqtane.Repository.IPermissionRepository.html",
    "title": "Interface IPermissionRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPermissionRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IPermissionRepository Methods AddPermission(Permission) Permission AddPermission(Permission permission) Parameters permission Permission Returns Permission DeletePermission(int) void DeletePermission(int permissionId) Parameters permissionId int DeletePermissions(int, string, int) void DeletePermissions(int siteId, string entityName, int entityId) Parameters siteId int entityName string entityId int GetPermission(int) Permission GetPermission(int permissionId) Parameters permissionId int Returns Permission GetPermissions(int, string) IEnumerable<Permission> GetPermissions(int siteId, string entityName) Parameters siteId int entityName string Returns IEnumerable<Permission> GetPermissions(int, string, int) IEnumerable<Permission> GetPermissions(int siteId, string entityName, int entityId) Parameters siteId int entityName string entityId int Returns IEnumerable<Permission> GetPermissions(int, string, int, string) IEnumerable<Permission> GetPermissions(int siteId, string entityName, int entityId, string permissionName) Parameters siteId int entityName string entityId int permissionName string Returns IEnumerable<Permission> GetPermissions(int, string, string) IEnumerable<Permission> GetPermissions(int siteId, string entityName, string permissionName) Parameters siteId int entityName string permissionName string Returns IEnumerable<Permission> UpdatePermission(Permission) Permission UpdatePermission(Permission permission) Parameters permission Permission Returns Permission UpdatePermissions(int, string, int, List<Permission>) void UpdatePermissions(int siteId, string entityName, int entityId, List<Permission> permissions) Parameters siteId int entityName string entityId int permissions List<Permission>"
  },
  "api/Oqtane.Repository.IProfileRepository.html": {
    "href": "api/Oqtane.Repository.IProfileRepository.html",
    "title": "Interface IProfileRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IProfileRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IProfileRepository Methods AddProfile(Profile) Profile AddProfile(Profile profile) Parameters profile Profile Returns Profile DeleteProfile(int) void DeleteProfile(int profileId) Parameters profileId int GetProfile(int) Profile GetProfile(int profileId) Parameters profileId int Returns Profile GetProfile(int, bool) Profile GetProfile(int profileId, bool tracking) Parameters profileId int tracking bool Returns Profile GetProfiles(int) IEnumerable<Profile> GetProfiles(int siteId) Parameters siteId int Returns IEnumerable<Profile> UpdateProfile(Profile) Profile UpdateProfile(Profile profile) Parameters profile Profile Returns Profile"
  },
  "api/Oqtane.Repository.IRoleRepository.html": {
    "href": "api/Oqtane.Repository.IRoleRepository.html",
    "title": "Interface IRoleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IRoleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IRoleRepository Methods AddRole(Role) Role AddRole(Role role) Parameters role Role Returns Role DeleteRole(int) void DeleteRole(int roleId) Parameters roleId int GetRole(int) Role GetRole(int roleId) Parameters roleId int Returns Role GetRole(int, bool) Role GetRole(int roleId, bool tracking) Parameters roleId int tracking bool Returns Role GetRoles(int) IEnumerable<Role> GetRoles(int siteId) Parameters siteId int Returns IEnumerable<Role> GetRoles(int, bool) IEnumerable<Role> GetRoles(int siteId, bool includeGlobalRoles) Parameters siteId int includeGlobalRoles bool Returns IEnumerable<Role> UpdateRole(Role) Role UpdateRole(Role role) Parameters role Role Returns Role"
  },
  "api/Oqtane.Repository.ISettingRepository.html": {
    "href": "api/Oqtane.Repository.ISettingRepository.html",
    "title": "Interface ISettingRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISettingRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ISettingRepository Methods AddSetting(Setting) Setting AddSetting(Setting setting) Parameters setting Setting Returns Setting DeleteSetting(string, int) void DeleteSetting(string entityName, int settingId) Parameters entityName string settingId int DeleteSettings(string, int) void DeleteSettings(string entityName, int entityId) Parameters entityName string entityId int GetSetting(string, int) Setting GetSetting(string entityName, int settingId) Parameters entityName string settingId int Returns Setting GetSetting(string, int, string) Setting GetSetting(string entityName, int entityId, string settingName) Parameters entityName string entityId int settingName string Returns Setting GetSettings(string) IEnumerable<Setting> GetSettings(string entityName) Parameters entityName string Returns IEnumerable<Setting> GetSettings(string, int) IEnumerable<Setting> GetSettings(string entityName, int entityId) Parameters entityName string entityId int Returns IEnumerable<Setting> UpdateSetting(Setting) Setting UpdateSetting(Setting setting) Parameters setting Setting Returns Setting"
  },
  "api/Oqtane.Repository.ISiteRepository.html": {
    "href": "api/Oqtane.Repository.ISiteRepository.html",
    "title": "Interface ISiteRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ISiteRepository Methods AddSite(Site) Site AddSite(Site site) Parameters site Site Returns Site AddSiteAsync(Site) Task<Site> AddSiteAsync(Site site) Parameters site Site Returns Task<Site> CreatePages(Site, List<PageTemplate>, Alias) void CreatePages(Site site, List<PageTemplate> pageTemplates, Alias alias) Parameters site Site pageTemplates List<PageTemplate> alias Alias DeleteSite(int) void DeleteSite(int siteId) Parameters siteId int DeleteSiteAsync(int) Task DeleteSiteAsync(int siteId) Parameters siteId int Returns Task GetSite(int) Site GetSite(int siteId) Parameters siteId int Returns Site GetSite(int, bool) Site GetSite(int siteId, bool tracking) Parameters siteId int tracking bool Returns Site GetSiteAsync(int) Task<Site> GetSiteAsync(int siteId) Parameters siteId int Returns Task<Site> GetSiteAsync(int, bool) Task<Site> GetSiteAsync(int siteId, bool tracking) Parameters siteId int tracking bool Returns Task<Site> GetSites() IEnumerable<Site> GetSites() Returns IEnumerable<Site> GetSitesAsync() Task<IEnumerable<Site>> GetSitesAsync() Returns Task<IEnumerable<Site>> InitializeSite(Alias) void InitializeSite(Alias alias) Parameters alias Alias UpdateSite(Site) Site UpdateSite(Site site) Parameters site Site Returns Site UpdateSiteAsync(Site) Task<Site> UpdateSiteAsync(Site site) Parameters site Site Returns Task<Site>"
  },
  "api/Oqtane.Repository.ISiteTemplateRepository.html": {
    "href": "api/Oqtane.Repository.ISiteTemplateRepository.html",
    "title": "Interface ISiteTemplateRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteTemplateRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ISiteTemplateRepository Methods GetSiteTemplates() IEnumerable<SiteTemplate> GetSiteTemplates() Returns IEnumerable<SiteTemplate>"
  },
  "api/Oqtane.Repository.ISqlRepository.html": {
    "href": "api/Oqtane.Repository.ISqlRepository.html",
    "title": "Interface ISqlRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISqlRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ISqlRepository Methods ExecuteNonQuery(Tenant, string) int ExecuteNonQuery(Tenant tenant, string query) Parameters tenant Tenant query string Returns int ExecuteNonQuery(string, string, string) int ExecuteNonQuery(string connectionString, string databaseType, string query) Parameters connectionString string databaseType string query string Returns int ExecuteReader(Tenant, string) IDataReader ExecuteReader(Tenant tenant, string query) Parameters tenant Tenant query string Returns IDataReader ExecuteReader(string, string, string) IDataReader ExecuteReader(string DBType, string DBConnectionString, string query) Parameters DBType string DBConnectionString string query string Returns IDataReader ExecuteScript(Tenant, Assembly, string) bool ExecuteScript(Tenant tenant, Assembly assembly, string filename) Parameters tenant Tenant assembly Assembly filename string Returns bool ExecuteScript(Tenant, string) void ExecuteScript(Tenant tenant, string script) Parameters tenant Tenant script string ExecuteScript(string, string, Assembly, string) bool ExecuteScript(string connectionString, string databaseType, Assembly assembly, string filename) Parameters connectionString string databaseType string assembly Assembly filename string Returns bool GetScriptFromAssembly(Assembly, string) string GetScriptFromAssembly(Assembly assembly, string fileName) Parameters assembly Assembly fileName string Returns string"
  },
  "api/Oqtane.Repository.ITenantRepository.html": {
    "href": "api/Oqtane.Repository.ITenantRepository.html",
    "title": "Interface ITenantRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITenantRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ITenantRepository Methods AddTenant(Tenant) Tenant AddTenant(Tenant tenant) Parameters tenant Tenant Returns Tenant DeleteTenant(int) void DeleteTenant(int tenantId) Parameters tenantId int GetTenant(int) Tenant GetTenant(int tenantId) Parameters tenantId int Returns Tenant GetTenants() IEnumerable<Tenant> GetTenants() Returns IEnumerable<Tenant> UpdateTenant(Tenant) Tenant UpdateTenant(Tenant tenant) Parameters tenant Tenant Returns Tenant"
  },
  "api/Oqtane.Repository.ITenantResolver.html": {
    "href": "api/Oqtane.Repository.ITenantResolver.html",
    "title": "Interface ITenantResolver | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITenantResolver Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface ITenantResolver Methods GetAlias() Alias GetAlias() Returns Alias GetTenant() Tenant GetTenant() Returns Tenant"
  },
  "api/Oqtane.Repository.IThemeRepository.html": {
    "href": "api/Oqtane.Repository.IThemeRepository.html",
    "title": "Interface IThemeRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IThemeRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IThemeRepository Methods DeleteTheme(int) void DeleteTheme(int themeId) Parameters themeId int FilterThemes(List<Theme>) List<Theme> FilterThemes(List<Theme> themes) Parameters themes List<Theme> Returns List<Theme> GetTheme(int, int) Theme GetTheme(int themeId, int siteId) Parameters themeId int siteId int Returns Theme GetThemes() IEnumerable<Theme> GetThemes() Returns IEnumerable<Theme> UpdateTheme(Theme) void UpdateTheme(Theme theme) Parameters theme Theme"
  },
  "api/Oqtane.Repository.IUrlMappingRepository.html": {
    "href": "api/Oqtane.Repository.IUrlMappingRepository.html",
    "title": "Interface IUrlMappingRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUrlMappingRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IUrlMappingRepository Methods AddUrlMapping(UrlMapping) UrlMapping AddUrlMapping(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns UrlMapping DeleteUrlMapping(int) void DeleteUrlMapping(int urlMappingId) Parameters urlMappingId int GetUrlMapping(int) UrlMapping GetUrlMapping(int urlMappingId) Parameters urlMappingId int Returns UrlMapping GetUrlMapping(int, bool) UrlMapping GetUrlMapping(int urlMappingId, bool tracking) Parameters urlMappingId int tracking bool Returns UrlMapping GetUrlMapping(int, string) UrlMapping GetUrlMapping(int siteId, string url) Parameters siteId int url string Returns UrlMapping GetUrlMappings(int, bool) IEnumerable<UrlMapping> GetUrlMappings(int siteId, bool isMapped) Parameters siteId int isMapped bool Returns IEnumerable<UrlMapping> UpdateUrlMapping(UrlMapping) UrlMapping UpdateUrlMapping(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns UrlMapping"
  },
  "api/Oqtane.Repository.IUserRepository.html": {
    "href": "api/Oqtane.Repository.IUserRepository.html",
    "title": "Interface IUserRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IUserRepository Methods AddUser(User) User AddUser(User user) Parameters user User Returns User DeleteUser(int) void DeleteUser(int userId) Parameters userId int GetUser(int) User GetUser(int userId) Parameters userId int Returns User GetUser(int, bool) User GetUser(int userId, bool tracking) Parameters userId int tracking bool Returns User GetUser(string) User GetUser(string username) Parameters username string Returns User GetUser(string, string) User GetUser(string username, string email) Parameters username string email string Returns User GetUsers() IEnumerable<User> GetUsers() Returns IEnumerable<User> UpdateUser(User) User UpdateUser(User user) Parameters user User Returns User"
  },
  "api/Oqtane.Repository.IUserRoleRepository.html": {
    "href": "api/Oqtane.Repository.IUserRoleRepository.html",
    "title": "Interface IUserRoleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserRoleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IUserRoleRepository Methods AddUserRole(UserRole) UserRole AddUserRole(UserRole userRole) Parameters userRole UserRole Returns UserRole DeleteUserRole(int) void DeleteUserRole(int userRoleId) Parameters userRoleId int DeleteUserRoles(int) void DeleteUserRoles(int userId) Parameters userId int GetUserRole(int) UserRole GetUserRole(int userRoleId) Parameters userRoleId int Returns UserRole GetUserRole(int, bool) UserRole GetUserRole(int userRoleId, bool tracking) Parameters userRoleId int tracking bool Returns UserRole GetUserRole(int, int) UserRole GetUserRole(int userId, int roleId) Parameters userId int roleId int Returns UserRole GetUserRole(int, int, bool) UserRole GetUserRole(int userId, int roleId, bool tracking) Parameters userId int roleId int tracking bool Returns UserRole GetUserRoles(int) IEnumerable<UserRole> GetUserRoles(int siteId) Parameters siteId int Returns IEnumerable<UserRole> GetUserRoles(int, int) IEnumerable<UserRole> GetUserRoles(int userId, int siteId) Parameters userId int siteId int Returns IEnumerable<UserRole> UpdateUserRole(UserRole) UserRole UpdateUserRole(UserRole userRole) Parameters userRole UserRole Returns UserRole"
  },
  "api/Oqtane.Repository.IVisitorRepository.html": {
    "href": "api/Oqtane.Repository.IVisitorRepository.html",
    "title": "Interface IVisitorRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IVisitorRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public interface IVisitorRepository Methods AddVisitor(Visitor) Visitor AddVisitor(Visitor visitor) Parameters visitor Visitor Returns Visitor DeleteVisitor(int) void DeleteVisitor(int visitorId) Parameters visitorId int DeleteVisitors(int, int) int DeleteVisitors(int siteId, int age) Parameters siteId int age int Returns int GetVisitor(int) Visitor GetVisitor(int visitorId) Parameters visitorId int Returns Visitor GetVisitor(int, string) Visitor GetVisitor(int siteId, string IPAddress) Parameters siteId int IPAddress string Returns Visitor GetVisitors(int, DateTime) IEnumerable<Visitor> GetVisitors(int siteId, DateTime fromDate) Parameters siteId int fromDate DateTime Returns IEnumerable<Visitor> UpdateVisitor(Visitor) Visitor UpdateVisitor(Visitor visitor) Parameters visitor Visitor Returns Visitor"
  },
  "api/Oqtane.Repository.InstallationContext.html": {
    "href": "api/Oqtane.Repository.InstallationContext.html",
    "title": "Class InstallationContext | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InstallationContext Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class InstallationContext : DbContext Inheritance object DbContext InstallationContext Constructors InstallationContext(IDatabase, string) public InstallationContext(IDatabase database, string connectionString) Parameters database IDatabase connectionString string Properties Alias public virtual DbSet<Alias> Alias { get; set; } Property Value DbSet<Alias> Job public virtual DbSet<Job> Job { get; set; } Property Value DbSet<Job> JobLog public virtual DbSet<JobLog> JobLog { get; set; } Property Value DbSet<JobLog> ModuleDefinition public virtual DbSet<ModuleDefinition> ModuleDefinition { get; set; } Property Value DbSet<ModuleDefinition> Tenant public virtual DbSet<Tenant> Tenant { get; set; } Property Value DbSet<Tenant> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples."
  },
  "api/Oqtane.Repository.JobLogRepository.html": {
    "href": "api/Oqtane.Repository.JobLogRepository.html",
    "title": "Class JobLogRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JobLogRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class JobLogRepository : IJobLogRepository Inheritance object JobLogRepository Implements IJobLogRepository Constructors JobLogRepository(MasterDBContext) public JobLogRepository(MasterDBContext context) Parameters context MasterDBContext Methods AddJobLog(JobLog) public JobLog AddJobLog(JobLog jobLog) Parameters jobLog JobLog Returns JobLog DeleteJobLog(int) public void DeleteJobLog(int jobLogId) Parameters jobLogId int GetJobLog(int) public JobLog GetJobLog(int jobLogId) Parameters jobLogId int Returns JobLog GetJobLogs() public IEnumerable<JobLog> GetJobLogs() Returns IEnumerable<JobLog> UpdateJobLog(JobLog) public JobLog UpdateJobLog(JobLog jobLog) Parameters jobLog JobLog Returns JobLog"
  },
  "api/Oqtane.Repository.JobRepository.html": {
    "href": "api/Oqtane.Repository.JobRepository.html",
    "title": "Class JobRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JobRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class JobRepository : IJobRepository Inheritance object JobRepository Implements IJobRepository Constructors JobRepository(MasterDBContext, IMemoryCache) public JobRepository(MasterDBContext context, IMemoryCache cache) Parameters context MasterDBContext cache IMemoryCache Methods AddJob(Job) public Job AddJob(Job job) Parameters job Job Returns Job DeleteJob(int) public void DeleteJob(int jobId) Parameters jobId int GetJob(int) public Job GetJob(int jobId) Parameters jobId int Returns Job GetJob(int, bool) public Job GetJob(int jobId, bool tracking) Parameters jobId int tracking bool Returns Job GetJobs() public IEnumerable<Job> GetJobs() Returns IEnumerable<Job> UpdateJob(Job) public Job UpdateJob(Job job) Parameters job Job Returns Job"
  },
  "api/Oqtane.Repository.LanguageRepository.html": {
    "href": "api/Oqtane.Repository.LanguageRepository.html",
    "title": "Class LanguageRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LanguageRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class LanguageRepository : ILanguageRepository Inheritance object LanguageRepository Implements ILanguageRepository Constructors LanguageRepository(IDbContextFactory<TenantDBContext>) public LanguageRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddLanguage(Language) public Language AddLanguage(Language language) Parameters language Language Returns Language DeleteLanguage(int) public void DeleteLanguage(int languageId) Parameters languageId int GetLanguage(int) public Language GetLanguage(int languageId) Parameters languageId int Returns Language GetLanguages(int) public IEnumerable<Language> GetLanguages(int siteId) Parameters siteId int Returns IEnumerable<Language> UpdateLanguage(Language) public void UpdateLanguage(Language language) Parameters language Language"
  },
  "api/Oqtane.Repository.LogRepository.html": {
    "href": "api/Oqtane.Repository.LogRepository.html",
    "title": "Class LogRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LogRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class LogRepository : ILogRepository Inheritance object LogRepository Implements ILogRepository Constructors LogRepository(IDbContextFactory<TenantDBContext>) public LogRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddLog(Log) public void AddLog(Log log) Parameters log Log DeleteLogs(int, int) public int DeleteLogs(int siteId, int age) Parameters siteId int age int Returns int GetLog(int) public Log GetLog(int logId) Parameters logId int Returns Log GetLogs(int, string, string, int) public IEnumerable<Log> GetLogs(int siteId, string level, string function, int rows) Parameters siteId int level string function string rows int Returns IEnumerable<Log>"
  },
  "api/Oqtane.Repository.MasterDBContext.html": {
    "href": "api/Oqtane.Repository.MasterDBContext.html",
    "title": "Class MasterDBContext | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MasterDBContext Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class MasterDBContext : DbContext Inheritance object DbContext MasterDBContext Constructors MasterDBContext(DbContextOptions<MasterDBContext>, IHttpContextAccessor, IConfigManager) public MasterDBContext(DbContextOptions<MasterDBContext> options, IHttpContextAccessor accessor, IConfigManager config) Parameters options DbContextOptions<MasterDBContext> accessor IHttpContextAccessor config IConfigManager Properties ActiveDatabase public IDatabase ActiveDatabase { get; } Property Value IDatabase Alias public virtual DbSet<Alias> Alias { get; set; } Property Value DbSet<Alias> Job public virtual DbSet<Job> Job { get; set; } Property Value DbSet<Job> JobLog public virtual DbSet<JobLog> JobLog { get; set; } Property Value DbSet<JobLog> ModuleDefinition public virtual DbSet<ModuleDefinition> ModuleDefinition { get; set; } Property Value DbSet<ModuleDefinition> Setting public virtual DbSet<Setting> Setting { get; set; } Property Value DbSet<Setting> Tenant public virtual DbSet<Tenant> Tenant { get; set; } Property Value DbSet<Tenant> Theme public virtual DbSet<Theme> Theme { get; set; } Property Value DbSet<Theme> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples. SaveChanges() Saves all changes made in this context to the database. public override int SaveChanges() Returns int The number of state entries written to the database. Remarks This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads. Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute in parallel. See Avoiding DbContext threading issues for more information and examples. See Saving data in EF Core for more information and examples. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory. SaveChangesAsync(CancellationToken) Saves all changes made in this context to the database. public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A CancellationToken to observe while waiting for the task to complete. Returns Task<int> A task that represents the asynchronous save operation. The task result contains the number of state entries written to the database. Remarks This method will automatically call DetectChanges() to discover any changes to entity instances before saving to the underlying database. This can be disabled via AutoDetectChangesEnabled. Entity Framework Core does not support multiple parallel operations being run on the same DbContext instance. This includes both parallel execution of async queries and any explicit concurrent use from multiple threads. Therefore, always await async calls immediately, or use separate DbContext instances for operations that execute in parallel. See Avoiding DbContext threading issues for more information and examples. See Saving data in EF Core for more information and examples. Exceptions DbUpdateException An error is encountered while saving to the database. DbUpdateConcurrencyException A concurrency violation is encountered while saving to the database. A concurrency violation occurs when an unexpected number of rows are affected during save. This is usually because the data in the database has been modified since it was loaded into memory. OperationCanceledException If the CancellationToken is canceled."
  },
  "api/Oqtane.Repository.ModuleDefinitionRepository.html": {
    "href": "api/Oqtane.Repository.ModuleDefinitionRepository.html",
    "title": "Class ModuleDefinitionRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleDefinitionRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class ModuleDefinitionRepository : IModuleDefinitionRepository Inheritance object ModuleDefinitionRepository Implements IModuleDefinitionRepository Constructors ModuleDefinitionRepository(MasterDBContext, IMemoryCache, IPermissionRepository, ITenantManager, ISettingRepository, IServerStateManager) public ModuleDefinitionRepository(MasterDBContext context, IMemoryCache cache, IPermissionRepository permissions, ITenantManager tenants, ISettingRepository settings, IServerStateManager serverState) Parameters context MasterDBContext cache IMemoryCache permissions IPermissionRepository tenants ITenantManager settings ISettingRepository serverState IServerStateManager Methods DeleteModuleDefinition(int) public void DeleteModuleDefinition(int moduleDefinitionId) Parameters moduleDefinitionId int FilterModuleDefinition(ModuleDefinition) public ModuleDefinition FilterModuleDefinition(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition Returns ModuleDefinition GetModuleDefinition(int, int) public ModuleDefinition GetModuleDefinition(int moduleDefinitionId, int siteId) Parameters moduleDefinitionId int siteId int Returns ModuleDefinition GetModuleDefinitions() public IEnumerable<ModuleDefinition> GetModuleDefinitions() Returns IEnumerable<ModuleDefinition> GetModuleDefinitions(int) public IEnumerable<ModuleDefinition> GetModuleDefinitions(int siteId) Parameters siteId int Returns IEnumerable<ModuleDefinition> LoadModuleDefinitions(int) public List<ModuleDefinition> LoadModuleDefinitions(int siteId) Parameters siteId int Returns List<ModuleDefinition> UpdateModuleDefinition(ModuleDefinition) public void UpdateModuleDefinition(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition"
  },
  "api/Oqtane.Repository.ModuleRepository.html": {
    "href": "api/Oqtane.Repository.ModuleRepository.html",
    "title": "Class ModuleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class ModuleRepository : IModuleRepository Inheritance object ModuleRepository Implements IModuleRepository Constructors ModuleRepository(IDbContextFactory<TenantDBContext>, IPermissionRepository, ISettingRepository, IModuleDefinitionRepository, IServiceProvider) public ModuleRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IPermissionRepository permissions, ISettingRepository settings, IModuleDefinitionRepository moduleDefinitions, IServiceProvider serviceProvider) Parameters dbContextFactory IDbContextFactory<TenantDBContext> permissions IPermissionRepository settings ISettingRepository moduleDefinitions IModuleDefinitionRepository serviceProvider IServiceProvider Methods AddModule(Module) public Module AddModule(Module module) Parameters module Module Returns Module DeleteModule(int) public void DeleteModule(int moduleId) Parameters moduleId int ExportModule(int) public string ExportModule(int moduleId) Parameters moduleId int Returns string GetModule(int) public Module GetModule(int moduleId) Parameters moduleId int Returns Module GetModule(int, bool) public Module GetModule(int moduleId, bool tracking) Parameters moduleId int tracking bool Returns Module GetModules(int) public IEnumerable<Module> GetModules(int siteId) Parameters siteId int Returns IEnumerable<Module> ImportModule(int, string) public bool ImportModule(int moduleId, string content) Parameters moduleId int content string Returns bool UpdateModule(Module) public Module UpdateModule(Module module) Parameters module Module Returns Module"
  },
  "api/Oqtane.Repository.NotificationRepository.html": {
    "href": "api/Oqtane.Repository.NotificationRepository.html",
    "title": "Class NotificationRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class NotificationRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class NotificationRepository : INotificationRepository Inheritance object NotificationRepository Implements INotificationRepository Constructors NotificationRepository(IDbContextFactory<TenantDBContext>) public NotificationRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddNotification(Notification) public Notification AddNotification(Notification notification) Parameters notification Notification Returns Notification DeleteNotification(int) public void DeleteNotification(int notificationId) Parameters notificationId int DeleteNotifications(int, int) public int DeleteNotifications(int siteId, int age) Parameters siteId int age int Returns int GetNotification(int) public Notification GetNotification(int notificationId) Parameters notificationId int Returns Notification GetNotification(int, bool) public Notification GetNotification(int notificationId, bool tracking) Parameters notificationId int tracking bool Returns Notification GetNotificationCount(int, int, int, bool) public int GetNotificationCount(int siteId, int fromUserId, int toUserId, bool isRead) Parameters siteId int fromUserId int toUserId int isRead bool Returns int GetNotifications(int, int, int) public IEnumerable<Notification> GetNotifications(int siteId, int fromUserId, int toUserId) Parameters siteId int fromUserId int toUserId int Returns IEnumerable<Notification> GetNotifications(int, int, int, int, bool) public IEnumerable<Notification> GetNotifications(int siteId, int fromUserId, int toUserId, int count, bool isRead) Parameters siteId int fromUserId int toUserId int count int isRead bool Returns IEnumerable<Notification> UpdateNotification(Notification) public Notification UpdateNotification(Notification notification) Parameters notification Notification Returns Notification"
  },
  "api/Oqtane.Repository.PageModuleRepository.html": {
    "href": "api/Oqtane.Repository.PageModuleRepository.html",
    "title": "Class PageModuleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageModuleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class PageModuleRepository : IPageModuleRepository Inheritance object PageModuleRepository Implements IPageModuleRepository Constructors PageModuleRepository(IDbContextFactory<TenantDBContext>, IModuleDefinitionRepository, IModuleRepository, IPermissionRepository, ISettingRepository) public PageModuleRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IModuleDefinitionRepository moduleDefinitions, IModuleRepository modules, IPermissionRepository permissions, ISettingRepository settings) Parameters dbContextFactory IDbContextFactory<TenantDBContext> moduleDefinitions IModuleDefinitionRepository modules IModuleRepository permissions IPermissionRepository settings ISettingRepository Methods AddPageModule(PageModule) public PageModule AddPageModule(PageModule pageModule) Parameters pageModule PageModule Returns PageModule DeletePageModule(int) public void DeletePageModule(int pageModuleId) Parameters pageModuleId int GetPageModule(int) public PageModule GetPageModule(int pageModuleId) Parameters pageModuleId int Returns PageModule GetPageModule(int, bool) public PageModule GetPageModule(int pageModuleId, bool tracking) Parameters pageModuleId int tracking bool Returns PageModule GetPageModule(int, int) public PageModule GetPageModule(int pageId, int moduleId) Parameters pageId int moduleId int Returns PageModule GetPageModules(int) public IEnumerable<PageModule> GetPageModules(int siteId) Parameters siteId int Returns IEnumerable<PageModule> UpdatePageModule(PageModule) public PageModule UpdatePageModule(PageModule pageModule) Parameters pageModule PageModule Returns PageModule"
  },
  "api/Oqtane.Repository.PageRepository.html": {
    "href": "api/Oqtane.Repository.PageRepository.html",
    "title": "Class PageRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class PageRepository : IPageRepository Inheritance object PageRepository Implements IPageRepository Constructors PageRepository(IDbContextFactory<TenantDBContext>, IPageModuleRepository, IPermissionRepository, ISettingRepository) public PageRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IPageModuleRepository pageModules, IPermissionRepository permissions, ISettingRepository settings) Parameters dbContextFactory IDbContextFactory<TenantDBContext> pageModules IPageModuleRepository permissions IPermissionRepository settings ISettingRepository Methods AddPage(Page) public Page AddPage(Page page) Parameters page Page Returns Page DeletePage(int) public void DeletePage(int pageId) Parameters pageId int GetPage(int) public Page GetPage(int pageId) Parameters pageId int Returns Page GetPage(int, bool) public Page GetPage(int pageId, bool tracking) Parameters pageId int tracking bool Returns Page GetPage(string, int) public Page GetPage(string path, int siteId) Parameters path string siteId int Returns Page GetPages(int) public IEnumerable<Page> GetPages(int siteId) Parameters siteId int Returns IEnumerable<Page> UpdatePage(Page) public Page UpdatePage(Page page) Parameters page Page Returns Page"
  },
  "api/Oqtane.Repository.PermissionRepository.html": {
    "href": "api/Oqtane.Repository.PermissionRepository.html",
    "title": "Class PermissionRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class PermissionRepository : IPermissionRepository Inheritance object PermissionRepository Implements IPermissionRepository Constructors PermissionRepository(IDbContextFactory<TenantDBContext>, IRoleRepository, IMemoryCache, SiteState) public PermissionRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IRoleRepository roles, IMemoryCache cache, SiteState siteState) Parameters dbContextFactory IDbContextFactory<TenantDBContext> roles IRoleRepository cache IMemoryCache siteState SiteState Methods AddPermission(Permission) public Permission AddPermission(Permission permission) Parameters permission Permission Returns Permission DeletePermission(int) public void DeletePermission(int permissionId) Parameters permissionId int DeletePermissions(int, string, int) public void DeletePermissions(int siteId, string entityName, int entityId) Parameters siteId int entityName string entityId int GetPermission(int) public Permission GetPermission(int permissionId) Parameters permissionId int Returns Permission GetPermissions(int, string) public IEnumerable<Permission> GetPermissions(int siteId, string entityName) Parameters siteId int entityName string Returns IEnumerable<Permission> GetPermissions(int, string, int) public IEnumerable<Permission> GetPermissions(int siteId, string entityName, int entityId) Parameters siteId int entityName string entityId int Returns IEnumerable<Permission> GetPermissions(int, string, int, string) public IEnumerable<Permission> GetPermissions(int siteId, string entityName, int entityId, string permissionName) Parameters siteId int entityName string entityId int permissionName string Returns IEnumerable<Permission> GetPermissions(int, string, string) public IEnumerable<Permission> GetPermissions(int siteId, string entityName, string permissionName) Parameters siteId int entityName string permissionName string Returns IEnumerable<Permission> UpdatePermission(Permission) public Permission UpdatePermission(Permission permission) Parameters permission Permission Returns Permission UpdatePermissions(int, string, int, List<Permission>) public void UpdatePermissions(int siteId, string entityName, int entityId, List<Permission> permissions) Parameters siteId int entityName string entityId int permissions List<Permission>"
  },
  "api/Oqtane.Repository.ProfileRepository.html": {
    "href": "api/Oqtane.Repository.ProfileRepository.html",
    "title": "Class ProfileRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ProfileRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class ProfileRepository : IProfileRepository Inheritance object ProfileRepository Implements IProfileRepository Constructors ProfileRepository(IDbContextFactory<TenantDBContext>) public ProfileRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddProfile(Profile) public Profile AddProfile(Profile profile) Parameters profile Profile Returns Profile DeleteProfile(int) public void DeleteProfile(int profileId) Parameters profileId int GetProfile(int) public Profile GetProfile(int profileId) Parameters profileId int Returns Profile GetProfile(int, bool) public Profile GetProfile(int profileId, bool tracking) Parameters profileId int tracking bool Returns Profile GetProfiles(int) public IEnumerable<Profile> GetProfiles(int siteId) Parameters siteId int Returns IEnumerable<Profile> UpdateProfile(Profile) public Profile UpdateProfile(Profile profile) Parameters profile Profile Returns Profile"
  },
  "api/Oqtane.Repository.RoleRepository.html": {
    "href": "api/Oqtane.Repository.RoleRepository.html",
    "title": "Class RoleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RoleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class RoleRepository : IRoleRepository Inheritance object RoleRepository Implements IRoleRepository Constructors RoleRepository(IDbContextFactory<TenantDBContext>) public RoleRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddRole(Role) public Role AddRole(Role role) Parameters role Role Returns Role DeleteRole(int) public void DeleteRole(int roleId) Parameters roleId int GetRole(int) public Role GetRole(int roleId) Parameters roleId int Returns Role GetRole(int, bool) public Role GetRole(int roleId, bool tracking) Parameters roleId int tracking bool Returns Role GetRoles(int) public IEnumerable<Role> GetRoles(int siteId) Parameters siteId int Returns IEnumerable<Role> GetRoles(int, bool) public IEnumerable<Role> GetRoles(int siteId, bool includeGlobalRoles) Parameters siteId int includeGlobalRoles bool Returns IEnumerable<Role> UpdateRole(Role) public Role UpdateRole(Role role) Parameters role Role Returns Role"
  },
  "api/Oqtane.Repository.SettingRepository.html": {
    "href": "api/Oqtane.Repository.SettingRepository.html",
    "title": "Class SettingRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SettingRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class SettingRepository : ISettingRepository Inheritance object SettingRepository Implements ISettingRepository Constructors SettingRepository(IDbContextFactory<TenantDBContext>, MasterDBContext, ITenantManager, IMemoryCache) public SettingRepository(IDbContextFactory<TenantDBContext> tenantContextFactory, MasterDBContext master, ITenantManager tenantManager, IMemoryCache cache) Parameters tenantContextFactory IDbContextFactory<TenantDBContext> master MasterDBContext tenantManager ITenantManager cache IMemoryCache Methods AddSetting(Setting) public Setting AddSetting(Setting setting) Parameters setting Setting Returns Setting DeleteSetting(string, int) public void DeleteSetting(string entityName, int settingId) Parameters entityName string settingId int DeleteSettings(string, int) public void DeleteSettings(string entityName, int entityId) Parameters entityName string entityId int GetSetting(string, int) public Setting GetSetting(string entityName, int settingId) Parameters entityName string settingId int Returns Setting GetSetting(string, int, string) public Setting GetSetting(string entityName, int entityId, string settingName) Parameters entityName string entityId int settingName string Returns Setting GetSettings(string) public IEnumerable<Setting> GetSettings(string entityName) Parameters entityName string Returns IEnumerable<Setting> GetSettings(string, int) public IEnumerable<Setting> GetSettings(string entityName, int entityId) Parameters entityName string entityId int Returns IEnumerable<Setting> UpdateSetting(Setting) public Setting UpdateSetting(Setting setting) Parameters setting Setting Returns Setting"
  },
  "api/Oqtane.Repository.SiteRepository.html": {
    "href": "api/Oqtane.Repository.SiteRepository.html",
    "title": "Class SiteRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class SiteRepository : ISiteRepository Inheritance object SiteRepository Implements ISiteRepository Constructors SiteRepository(IDbContextFactory<TenantDBContext>, IRoleRepository, IProfileRepository, IFolderRepository, IPageRepository, IModuleRepository, IPageModuleRepository, IModuleDefinitionRepository, IThemeRepository, IServiceProvider, IConfigurationRoot, IServerStateManager, ILogManager) public SiteRepository(IDbContextFactory<TenantDBContext> factory, IRoleRepository roleRepository, IProfileRepository profileRepository, IFolderRepository folderRepository, IPageRepository pageRepository, IModuleRepository moduleRepository, IPageModuleRepository pageModuleRepository, IModuleDefinitionRepository moduleDefinitionRepository, IThemeRepository themeRepository, IServiceProvider serviceProvider, IConfigurationRoot config, IServerStateManager serverState, ILogManager logger) Parameters factory IDbContextFactory<TenantDBContext> roleRepository IRoleRepository profileRepository IProfileRepository folderRepository IFolderRepository pageRepository IPageRepository moduleRepository IModuleRepository pageModuleRepository IPageModuleRepository moduleDefinitionRepository IModuleDefinitionRepository themeRepository IThemeRepository serviceProvider IServiceProvider config IConfigurationRoot serverState IServerStateManager logger ILogManager Methods AddSite(Site) public Site AddSite(Site site) Parameters site Site Returns Site AddSiteAsync(Site) public Task<Site> AddSiteAsync(Site site) Parameters site Site Returns Task<Site> CreatePages(Site, List<PageTemplate>, Alias) public void CreatePages(Site site, List<PageTemplate> pageTemplates, Alias alias) Parameters site Site pageTemplates List<PageTemplate> alias Alias DeleteSite(int) public void DeleteSite(int siteId) Parameters siteId int DeleteSiteAsync(int) public Task DeleteSiteAsync(int siteId) Parameters siteId int Returns Task GetSite(int) public Site GetSite(int siteId) Parameters siteId int Returns Site GetSite(int, bool) public Site GetSite(int siteId, bool tracking) Parameters siteId int tracking bool Returns Site GetSiteAsync(int) public Task<Site> GetSiteAsync(int siteId) Parameters siteId int Returns Task<Site> GetSiteAsync(int, bool) public Task<Site> GetSiteAsync(int siteId, bool tracking) Parameters siteId int tracking bool Returns Task<Site> GetSites() public IEnumerable<Site> GetSites() Returns IEnumerable<Site> GetSitesAsync() public Task<IEnumerable<Site>> GetSitesAsync() Returns Task<IEnumerable<Site>> InitializeSite(Alias) public void InitializeSite(Alias alias) Parameters alias Alias UpdateSite(Site) public Site UpdateSite(Site site) Parameters site Site Returns Site UpdateSiteAsync(Site) public Task<Site> UpdateSiteAsync(Site site) Parameters site Site Returns Task<Site>"
  },
  "api/Oqtane.Repository.SiteTemplateRepository.html": {
    "href": "api/Oqtane.Repository.SiteTemplateRepository.html",
    "title": "Class SiteTemplateRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteTemplateRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class SiteTemplateRepository : ISiteTemplateRepository Inheritance object SiteTemplateRepository Implements ISiteTemplateRepository Constructors SiteTemplateRepository(IServiceProvider) public SiteTemplateRepository(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods GetSiteTemplates() public IEnumerable<SiteTemplate> GetSiteTemplates() Returns IEnumerable<SiteTemplate>"
  },
  "api/Oqtane.Repository.SqlRepository.html": {
    "href": "api/Oqtane.Repository.SqlRepository.html",
    "title": "Class SqlRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SqlRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class SqlRepository : ISqlRepository Inheritance object SqlRepository Implements ISqlRepository Constructors SqlRepository(IConfigurationRoot) public SqlRepository(IConfigurationRoot config) Parameters config IConfigurationRoot Methods ExecuteNonQuery(Tenant, string) public int ExecuteNonQuery(Tenant tenant, string query) Parameters tenant Tenant query string Returns int ExecuteNonQuery(string, string, string) public int ExecuteNonQuery(string connectionString, string databaseType, string query) Parameters connectionString string databaseType string query string Returns int ExecuteReader(Tenant, string) public IDataReader ExecuteReader(Tenant tenant, string query) Parameters tenant Tenant query string Returns IDataReader ExecuteReader(string, string, string) public IDataReader ExecuteReader(string DBType, string DBConnectionString, string query) Parameters DBType string DBConnectionString string query string Returns IDataReader ExecuteScript(Tenant, Assembly, string) public bool ExecuteScript(Tenant tenant, Assembly assembly, string fileName) Parameters tenant Tenant assembly Assembly fileName string Returns bool ExecuteScript(Tenant, string) public void ExecuteScript(Tenant tenant, string script) Parameters tenant Tenant script string ExecuteScript(string, string, Assembly, string) public bool ExecuteScript(string connectionString, string databaseType, Assembly assembly, string fileName) Parameters connectionString string databaseType string assembly Assembly fileName string Returns bool GetScriptFromAssembly(Assembly, string) public string GetScriptFromAssembly(Assembly assembly, string fileName) Parameters assembly Assembly fileName string Returns string"
  },
  "api/Oqtane.Repository.TenantDBContext.html": {
    "href": "api/Oqtane.Repository.TenantDBContext.html",
    "title": "Class TenantDBContext | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantDBContext Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class TenantDBContext : DBContextBase Inheritance object DbContext IdentityUserContext<IdentityUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityUserContext<IdentityUser, string> IdentityUserContext<IdentityUser> DBContextBase TenantDBContext Inherited Members DBContextBase.ActiveDatabase DBContextBase.OnConfiguring(DbContextOptionsBuilder) DBContextBase.OnModelCreating(ModelBuilder) DBContextBase.SaveChanges() DBContextBase.SaveChangesAsync(CancellationToken) Constructors TenantDBContext(IDBContextDependencies) public TenantDBContext(IDBContextDependencies DBContextDependencies) Parameters DBContextDependencies IDBContextDependencies Properties File public virtual DbSet<File> File { get; set; } Property Value DbSet<File> Folder public virtual DbSet<Folder> Folder { get; set; } Property Value DbSet<Folder> Language public virtual DbSet<Language> Language { get; set; } Property Value DbSet<Language> Log public virtual DbSet<Log> Log { get; set; } Property Value DbSet<Log> Module public virtual DbSet<Module> Module { get; set; } Property Value DbSet<Module> Notification public virtual DbSet<Notification> Notification { get; set; } Property Value DbSet<Notification> Page public virtual DbSet<Page> Page { get; set; } Property Value DbSet<Page> PageModule public virtual DbSet<PageModule> PageModule { get; set; } Property Value DbSet<PageModule> Permission public virtual DbSet<Permission> Permission { get; set; } Property Value DbSet<Permission> Profile public virtual DbSet<Profile> Profile { get; set; } Property Value DbSet<Profile> Role public virtual DbSet<Role> Role { get; set; } Property Value DbSet<Role> Setting public virtual DbSet<Setting> Setting { get; set; } Property Value DbSet<Setting> Site public virtual DbSet<Site> Site { get; set; } Property Value DbSet<Site> UrlMapping public virtual DbSet<UrlMapping> UrlMapping { get; set; } Property Value DbSet<UrlMapping> User public virtual DbSet<User> User { get; set; } Property Value DbSet<User> UserRole public virtual DbSet<UserRole> UserRole { get; set; } Property Value DbSet<UserRole> Visitor public virtual DbSet<Visitor> Visitor { get; set; } Property Value DbSet<Visitor>"
  },
  "api/Oqtane.Repository.TenantRepository.html": {
    "href": "api/Oqtane.Repository.TenantRepository.html",
    "title": "Class TenantRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class TenantRepository : ITenantRepository Inheritance object TenantRepository Implements ITenantRepository Constructors TenantRepository(MasterDBContext, IMemoryCache) public TenantRepository(MasterDBContext context, IMemoryCache cache) Parameters context MasterDBContext cache IMemoryCache Methods AddTenant(Tenant) public Tenant AddTenant(Tenant tenant) Parameters tenant Tenant Returns Tenant DeleteTenant(int) public void DeleteTenant(int tenantId) Parameters tenantId int GetTenant(int) public Tenant GetTenant(int tenantId) Parameters tenantId int Returns Tenant GetTenants() public IEnumerable<Tenant> GetTenants() Returns IEnumerable<Tenant> UpdateTenant(Tenant) public Tenant UpdateTenant(Tenant tenant) Parameters tenant Tenant Returns Tenant"
  },
  "api/Oqtane.Repository.TenantResolver.html": {
    "href": "api/Oqtane.Repository.TenantResolver.html",
    "title": "Class TenantResolver | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantResolver Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class TenantResolver : ITenantResolver Inheritance object TenantResolver Implements ITenantResolver Constructors TenantResolver(ITenantManager) public TenantResolver(ITenantManager tenantManager) Parameters tenantManager ITenantManager Methods GetAlias() public Alias GetAlias() Returns Alias GetTenant() public Tenant GetTenant() Returns Tenant"
  },
  "api/Oqtane.Repository.ThemeRepository.html": {
    "href": "api/Oqtane.Repository.ThemeRepository.html",
    "title": "Class ThemeRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class ThemeRepository : IThemeRepository Inheritance object ThemeRepository Implements IThemeRepository Constructors ThemeRepository(MasterDBContext, IMemoryCache, ITenantManager, ISettingRepository, IServerStateManager) public ThemeRepository(MasterDBContext context, IMemoryCache cache, ITenantManager tenants, ISettingRepository settings, IServerStateManager serverState) Parameters context MasterDBContext cache IMemoryCache tenants ITenantManager settings ISettingRepository serverState IServerStateManager Methods DeleteTheme(int) public void DeleteTheme(int themeId) Parameters themeId int FilterThemes(List<Theme>) public List<Theme> FilterThemes(List<Theme> themes) Parameters themes List<Theme> Returns List<Theme> GetTheme(int, int) public Theme GetTheme(int themeId, int siteId) Parameters themeId int siteId int Returns Theme GetThemes() public IEnumerable<Theme> GetThemes() Returns IEnumerable<Theme> UpdateTheme(Theme) public void UpdateTheme(Theme theme) Parameters theme Theme"
  },
  "api/Oqtane.Repository.UrlMappingRepository.html": {
    "href": "api/Oqtane.Repository.UrlMappingRepository.html",
    "title": "Class UrlMappingRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UrlMappingRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class UrlMappingRepository : IUrlMappingRepository Inheritance object UrlMappingRepository Implements IUrlMappingRepository Constructors UrlMappingRepository(IDbContextFactory<TenantDBContext>, ISiteRepository) public UrlMappingRepository(IDbContextFactory<TenantDBContext> dbContextFactory, ISiteRepository sites) Parameters dbContextFactory IDbContextFactory<TenantDBContext> sites ISiteRepository Methods AddUrlMapping(UrlMapping) public UrlMapping AddUrlMapping(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns UrlMapping DeleteUrlMapping(int) public void DeleteUrlMapping(int urlMappingId) Parameters urlMappingId int GetUrlMapping(int) public UrlMapping GetUrlMapping(int urlMappingId) Parameters urlMappingId int Returns UrlMapping GetUrlMapping(int, bool) public UrlMapping GetUrlMapping(int urlMappingId, bool tracking) Parameters urlMappingId int tracking bool Returns UrlMapping GetUrlMapping(int, string) public UrlMapping GetUrlMapping(int siteId, string url) Parameters siteId int url string Returns UrlMapping GetUrlMappings(int, bool) public IEnumerable<UrlMapping> GetUrlMappings(int siteId, bool isMapped) Parameters siteId int isMapped bool Returns IEnumerable<UrlMapping> UpdateUrlMapping(UrlMapping) public UrlMapping UpdateUrlMapping(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns UrlMapping"
  },
  "api/Oqtane.Repository.UserRepository.html": {
    "href": "api/Oqtane.Repository.UserRepository.html",
    "title": "Class UserRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class UserRepository : IUserRepository Inheritance object UserRepository Implements IUserRepository Constructors UserRepository(IDbContextFactory<TenantDBContext>, IFolderRepository, IRoleRepository, IUserRoleRepository) public UserRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IFolderRepository folders, IRoleRepository roles, IUserRoleRepository userroles) Parameters dbContextFactory IDbContextFactory<TenantDBContext> folders IFolderRepository roles IRoleRepository userroles IUserRoleRepository Methods AddUser(User) public User AddUser(User user) Parameters user User Returns User DeleteUser(int) public void DeleteUser(int userId) Parameters userId int GetUser(int) public User GetUser(int userId) Parameters userId int Returns User GetUser(int, bool) public User GetUser(int userId, bool tracking) Parameters userId int tracking bool Returns User GetUser(string) public User GetUser(string username) Parameters username string Returns User GetUser(string, string) public User GetUser(string username, string email) Parameters username string email string Returns User GetUsers() public IEnumerable<User> GetUsers() Returns IEnumerable<User> UpdateUser(User) public User UpdateUser(User user) Parameters user User Returns User"
  },
  "api/Oqtane.Repository.UserRoleRepository.html": {
    "href": "api/Oqtane.Repository.UserRoleRepository.html",
    "title": "Class UserRoleRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserRoleRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class UserRoleRepository : IUserRoleRepository Inheritance object UserRoleRepository Implements IUserRoleRepository Constructors UserRoleRepository(IDbContextFactory<TenantDBContext>, IRoleRepository) public UserRoleRepository(IDbContextFactory<TenantDBContext> dbContextFactory, IRoleRepository roles) Parameters dbContextFactory IDbContextFactory<TenantDBContext> roles IRoleRepository Methods AddUserRole(UserRole) public UserRole AddUserRole(UserRole userRole) Parameters userRole UserRole Returns UserRole DeleteUserRole(int) public void DeleteUserRole(int userRoleId) Parameters userRoleId int DeleteUserRoles(int) public void DeleteUserRoles(int userId) Parameters userId int GetUserRole(int) public UserRole GetUserRole(int userRoleId) Parameters userRoleId int Returns UserRole GetUserRole(int, bool) public UserRole GetUserRole(int userRoleId, bool tracking) Parameters userRoleId int tracking bool Returns UserRole GetUserRole(int, int) public UserRole GetUserRole(int userId, int roleId) Parameters userId int roleId int Returns UserRole GetUserRole(int, int, bool) public UserRole GetUserRole(int userId, int roleId, bool tracking) Parameters userId int roleId int tracking bool Returns UserRole GetUserRoles(int) public IEnumerable<UserRole> GetUserRoles(int siteId) Parameters siteId int Returns IEnumerable<UserRole> GetUserRoles(int, int) public IEnumerable<UserRole> GetUserRoles(int userId, int siteId) Parameters userId int siteId int Returns IEnumerable<UserRole> UpdateUserRole(UserRole) public UserRole UpdateUserRole(UserRole userRole) Parameters userRole UserRole Returns UserRole"
  },
  "api/Oqtane.Repository.VisitorRepository.html": {
    "href": "api/Oqtane.Repository.VisitorRepository.html",
    "title": "Class VisitorRepository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class VisitorRepository Namespace Oqtane.Repository Assembly Oqtane.Server.dll public class VisitorRepository : IVisitorRepository Inheritance object VisitorRepository Implements IVisitorRepository Constructors VisitorRepository(IDbContextFactory<TenantDBContext>) public VisitorRepository(IDbContextFactory<TenantDBContext> dbContextFactory) Parameters dbContextFactory IDbContextFactory<TenantDBContext> Methods AddVisitor(Visitor) public Visitor AddVisitor(Visitor visitor) Parameters visitor Visitor Returns Visitor DeleteVisitor(int) public void DeleteVisitor(int visitorId) Parameters visitorId int DeleteVisitors(int, int) public int DeleteVisitors(int siteId, int age) Parameters siteId int age int Returns int GetVisitor(int) public Visitor GetVisitor(int visitorId) Parameters visitorId int Returns Visitor GetVisitor(int, string) public Visitor GetVisitor(int siteId, string IPAddress) Parameters siteId int IPAddress string Returns Visitor GetVisitors(int, DateTime) public IEnumerable<Visitor> GetVisitors(int siteId, DateTime fromDate) Parameters siteId int fromDate DateTime Returns IEnumerable<Visitor> UpdateVisitor(Visitor) public Visitor UpdateVisitor(Visitor visitor) Parameters visitor Visitor Returns Visitor"
  },
  "api/Oqtane.Repository.html": {
    "href": "api/Oqtane.Repository.html",
    "title": "Namespace Oqtane.Repository | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Repository Classes AliasRepository DBContextBase DBContextDependencies DbContextUtils FileRepository FolderRepository InstallationContext JobLogRepository JobRepository LanguageRepository LogRepository MasterDBContext ModuleDefinitionRepository ModuleRepository NotificationRepository PageModuleRepository PageRepository PermissionRepository ProfileRepository RoleRepository SettingRepository SiteRepository SiteTemplateRepository SqlRepository TenantDBContext TenantRepository TenantResolver ThemeRepository UrlMappingRepository UserRepository UserRoleRepository VisitorRepository Interfaces IAliasRepository IDBContextDependencies IFileRepository IFolderRepository IJobLogRepository IJobRepository ILanguageRepository ILogRepository IModuleDefinitionRepository IModuleRepository INotificationRepository IPageModuleRepository IPageRepository IPermissionRepository IProfileRepository IRoleRepository ISettingRepository ISiteRepository ISiteTemplateRepository ISqlRepository ITenantRepository ITenantResolver IThemeRepository IUrlMappingRepository IUserRepository IUserRoleRepository IVisitorRepository"
  },
  "api/Oqtane.Security.AuthorizationPolicyProvider.html": {
    "href": "api/Oqtane.Security.AuthorizationPolicyProvider.html",
    "title": "Class AuthorizationPolicyProvider | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AuthorizationPolicyProvider Namespace Oqtane.Security Assembly Oqtane.Server.dll public class AuthorizationPolicyProvider : DefaultAuthorizationPolicyProvider Inheritance object DefaultAuthorizationPolicyProvider AuthorizationPolicyProvider Constructors AuthorizationPolicyProvider(IOptions<AuthorizationOptions>) public AuthorizationPolicyProvider(IOptions<AuthorizationOptions> options) Parameters options IOptions<AuthorizationOptions> Methods GetPolicyAsync(string) Gets a AuthorizationPolicy from the given policyName public override Task<AuthorizationPolicy> GetPolicyAsync(string policyName) Parameters policyName string The policy name to retrieve. Returns Task<AuthorizationPolicy> The named AuthorizationPolicy."
  },
  "api/Oqtane.Security.AutoValidateAntiforgeryTokenAttribute.html": {
    "href": "api/Oqtane.Security.AutoValidateAntiforgeryTokenAttribute.html",
    "title": "Class AutoValidateAntiforgeryTokenAttribute | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AutoValidateAntiforgeryTokenAttribute Namespace Oqtane.Security Assembly Oqtane.Server.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class AutoValidateAntiforgeryTokenAttribute : Attribute Inheritance object Attribute AutoValidateAntiforgeryTokenAttribute Properties IsReusable Gets a value that indicates if the result of CreateInstance(IServiceProvider) can be reused across requests. public bool IsReusable { get; } Property Value bool Order Gets the order value for determining the order of execution of filters. Filters execute in ascending numeric value of the Order property. public int Order { get; set; } Property Value int Remarks Filters are executed in an ordering determined by an ascending sort of the Order property. Asynchronous filters, such as IAsyncActionFilter, surround the execution of subsequent filters of the same filter kind. An asynchronous filter with a lower numeric Order value will have its filter method, such as OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate), executed before that of a filter with a higher value of Order. Synchronous filters, such as IActionFilter, have a before-method, such as OnActionExecuting(ActionExecutingContext), and an after-method, such as OnActionExecuted(ActionExecutedContext). A synchronous filter with a lower numeric Order value will have its before-method executed before that of a filter with a higher value of Order. During the after-stage of the filter, a synchronous filter with a lower numeric Order value will have its after-method executed after that of a filter with a higher value of Order. If two filters have the same numeric value of Order, then their relative execution order is determined by the filter scope. Methods CreateInstance(IServiceProvider) Creates an instance of the executable filter. public IFilterMetadata CreateInstance(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider The request IServiceProvider. Returns IFilterMetadata An instance of the executable filter."
  },
  "api/Oqtane.Security.AutoValidateAntiforgeryTokenFilter.html": {
    "href": "api/Oqtane.Security.AutoValidateAntiforgeryTokenFilter.html",
    "title": "Class AutoValidateAntiforgeryTokenFilter | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AutoValidateAntiforgeryTokenFilter Namespace Oqtane.Security Assembly Oqtane.Server.dll public class AutoValidateAntiforgeryTokenFilter Inheritance object AutoValidateAntiforgeryTokenFilter Constructors AutoValidateAntiforgeryTokenFilter(IAntiforgery, ILogger<AutoValidateAntiforgeryTokenFilter>) public AutoValidateAntiforgeryTokenFilter(IAntiforgery antiforgery, ILogger<AutoValidateAntiforgeryTokenFilter> filelogger) Parameters antiforgery IAntiforgery filelogger ILogger<AutoValidateAntiforgeryTokenFilter> Methods OnAuthorizationAsync(AuthorizationFilterContext) Called early in the filter pipeline to confirm request is authorized. public Task OnAuthorizationAsync(AuthorizationFilterContext context) Parameters context AuthorizationFilterContext The AuthorizationFilterContext. Returns Task A Task that on completion indicates the filter has executed. ShouldValidate(AuthorizationFilterContext) protected virtual bool ShouldValidate(AuthorizationFilterContext context) Parameters context AuthorizationFilterContext Returns bool"
  },
  "api/Oqtane.Security.ClaimsPrincipalFactory-1.html": {
    "href": "api/Oqtane.Security.ClaimsPrincipalFactory-1.html",
    "title": "Class ClaimsPrincipalFactory<TUser> | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ClaimsPrincipalFactory<TUser> Namespace Oqtane.Security Assembly Oqtane.Server.dll public class ClaimsPrincipalFactory<TUser> : UserClaimsPrincipalFactory<TUser> where TUser : IdentityUser Type Parameters TUser Inheritance object UserClaimsPrincipalFactory<TUser> ClaimsPrincipalFactory<TUser> Constructors ClaimsPrincipalFactory(UserManager<TUser>, IOptions<IdentityOptions>, ITenantManager, IUserRepository, IUserRoleRepository) public ClaimsPrincipalFactory(UserManager<TUser> userManager, IOptions<IdentityOptions> optionsAccessor, ITenantManager tenants, IUserRepository users, IUserRoleRepository userroles) Parameters userManager UserManager<TUser> optionsAccessor IOptions<IdentityOptions> tenants ITenantManager users IUserRepository userroles IUserRoleRepository Methods GenerateClaimsAsync(TUser) Generate the claims for a user. protected override Task<ClaimsIdentity> GenerateClaimsAsync(TUser identityuser) Parameters identityuser TUser Returns Task<ClaimsIdentity> The Task that represents the asynchronous creation operation, containing the created ClaimsIdentity."
  },
  "api/Oqtane.Security.IJwtManager.html": {
    "href": "api/Oqtane.Security.IJwtManager.html",
    "title": "Interface IJwtManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IJwtManager Namespace Oqtane.Security Assembly Oqtane.Server.dll public interface IJwtManager Methods GenerateToken(Alias, ClaimsIdentity, string, string, string, int) string GenerateToken(Alias alias, ClaimsIdentity identity, string secret, string issuer, string audience, int lifetime) Parameters alias Alias identity ClaimsIdentity secret string issuer string audience string lifetime int Returns string ValidateToken(string, string, string, string) ClaimsIdentity ValidateToken(string token, string secret, string issuer, string audience) Parameters token string secret string issuer string audience string Returns ClaimsIdentity"
  },
  "api/Oqtane.Security.IUserPermissions.html": {
    "href": "api/Oqtane.Security.IUserPermissions.html",
    "title": "Interface IUserPermissions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserPermissions Namespace Oqtane.Security Assembly Oqtane.Server.dll public interface IUserPermissions Methods GetUser() User GetUser() Returns User GetUser(ClaimsPrincipal) User GetUser(ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns User IsAuthorized(ClaimsPrincipal, int, string, int, string) bool IsAuthorized(ClaimsPrincipal user, int siteId, string entityName, int entityId, string permissionName) Parameters user ClaimsPrincipal siteId int entityName string entityId int permissionName string Returns bool IsAuthorized(ClaimsPrincipal, int, string, int, string, string) bool IsAuthorized(ClaimsPrincipal user, int siteId, string entityName, int entityId, string permissionName, string roles) Parameters user ClaimsPrincipal siteId int entityName string entityId int permissionName string roles string Returns bool IsAuthorized(ClaimsPrincipal, string, List<Permission>) bool IsAuthorized(ClaimsPrincipal user, string permissionName, List<Permission> permissions) Parameters user ClaimsPrincipal permissionName string permissions List<Permission> Returns bool IsAuthorized(ClaimsPrincipal, string, int, string) [Obsolete(\"IsAuthorized(ClaimsPrincipal principal, string entityName, int entityId, string permissionName) is deprecated. Use IsAuthorized(ClaimsPrincipal principal, int siteId, string entityName, int entityId, string permissionName) instead.\", false)] bool IsAuthorized(ClaimsPrincipal user, string entityName, int entityId, string permissionName) Parameters user ClaimsPrincipal entityName string entityId int permissionName string Returns bool IsAuthorized(ClaimsPrincipal, string, string) bool IsAuthorized(ClaimsPrincipal user, string permissionName, string permissions) Parameters user ClaimsPrincipal permissionName string permissions string Returns bool"
  },
  "api/Oqtane.Security.JwtManager.html": {
    "href": "api/Oqtane.Security.JwtManager.html",
    "title": "Class JwtManager | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class JwtManager Namespace Oqtane.Security Assembly Oqtane.Server.dll public class JwtManager : IJwtManager Inheritance object JwtManager Implements IJwtManager Methods GenerateToken(Alias, ClaimsIdentity, string, string, string, int) public string GenerateToken(Alias alias, ClaimsIdentity identity, string secret, string issuer, string audience, int lifetime) Parameters alias Alias identity ClaimsIdentity secret string issuer string audience string lifetime int Returns string ValidateToken(string, string, string, string) public ClaimsIdentity ValidateToken(string token, string secret, string issuer, string audience) Parameters token string secret string issuer string audience string Returns ClaimsIdentity"
  },
  "api/Oqtane.Security.PermissionHandler.html": {
    "href": "api/Oqtane.Security.PermissionHandler.html",
    "title": "Class PermissionHandler | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionHandler Namespace Oqtane.Security Assembly Oqtane.Server.dll public class PermissionHandler : AuthorizationHandler<PermissionRequirement> Inheritance object AuthorizationHandler<PermissionRequirement> PermissionHandler Constructors PermissionHandler(IHttpContextAccessor, IUserPermissions, ILogManager) public PermissionHandler(IHttpContextAccessor accessor, IUserPermissions userPermissions, ILogManager logger) Parameters accessor IHttpContextAccessor userPermissions IUserPermissions logger ILogManager Methods HandleRequirementAsync(AuthorizationHandlerContext, PermissionRequirement) Makes a decision if authorization is allowed based on a specific requirement. protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement) Parameters context AuthorizationHandlerContext The authorization context. requirement PermissionRequirement The requirement to evaluate. Returns Task"
  },
  "api/Oqtane.Security.PermissionRequirement.html": {
    "href": "api/Oqtane.Security.PermissionRequirement.html",
    "title": "Class PermissionRequirement | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionRequirement Namespace Oqtane.Security Assembly Oqtane.Server.dll public class PermissionRequirement Inheritance object PermissionRequirement Constructors PermissionRequirement(string, string, string) public PermissionRequirement(string entityName, string permissionName, string roles) Parameters entityName string permissionName string roles string Properties EntityName public string EntityName { get; } Property Value string PermissionName public string PermissionName { get; } Property Value string Roles public string Roles { get; } Property Value string"
  },
  "api/Oqtane.Security.PrincipalValidator.html": {
    "href": "api/Oqtane.Security.PrincipalValidator.html",
    "title": "Class PrincipalValidator | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PrincipalValidator Namespace Oqtane.Security Assembly Oqtane.Server.dll public static class PrincipalValidator Inheritance object PrincipalValidator Methods ValidateAsync(CookieValidatePrincipalContext) public static Task ValidateAsync(CookieValidatePrincipalContext context) Parameters context CookieValidatePrincipalContext Returns Task"
  },
  "api/Oqtane.Security.UserPermissions.html": {
    "href": "api/Oqtane.Security.UserPermissions.html",
    "title": "Class UserPermissions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserPermissions Namespace Oqtane.Security Assembly Oqtane.Server.dll public class UserPermissions : IUserPermissions Inheritance object UserPermissions Implements IUserPermissions Constructors UserPermissions(IPermissionRepository, IHttpContextAccessor) public UserPermissions(IPermissionRepository permissions, IHttpContextAccessor accessor) Parameters permissions IPermissionRepository accessor IHttpContextAccessor Methods GetUser() public User GetUser() Returns User GetUser(ClaimsPrincipal) public User GetUser(ClaimsPrincipal principal) Parameters principal ClaimsPrincipal Returns User IsAuthorized(ClaimsPrincipal, int, string, int, string) public bool IsAuthorized(ClaimsPrincipal principal, int siteId, string entityName, int entityId, string permissionName) Parameters principal ClaimsPrincipal siteId int entityName string entityId int permissionName string Returns bool IsAuthorized(ClaimsPrincipal, int, string, int, string, string) public bool IsAuthorized(ClaimsPrincipal principal, int siteId, string entityName, int entityId, string permissionName, string roles) Parameters principal ClaimsPrincipal siteId int entityName string entityId int permissionName string roles string Returns bool IsAuthorized(ClaimsPrincipal, string, List<Permission>) public bool IsAuthorized(ClaimsPrincipal principal, string permissionName, List<Permission> permissionList) Parameters principal ClaimsPrincipal permissionName string permissionList List<Permission> Returns bool IsAuthorized(ClaimsPrincipal, string, int, string) public bool IsAuthorized(ClaimsPrincipal principal, string entityName, int entityId, string permissionName) Parameters principal ClaimsPrincipal entityName string entityId int permissionName string Returns bool IsAuthorized(ClaimsPrincipal, string, string) [Obsolete(\"IsAuthorized(ClaimsPrincipal principal, string permissionName, string permissions) is deprecated. Use IsAuthorized(ClaimsPrincipal principal, string permissionName, List<Permission> permissionList) instead\", false)] public bool IsAuthorized(ClaimsPrincipal principal, string permissionName, string permissions) Parameters principal ClaimsPrincipal permissionName string permissions string Returns bool"
  },
  "api/Oqtane.Security.UserSecurity.html": {
    "href": "api/Oqtane.Security.UserSecurity.html",
    "title": "Class UserSecurity | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserSecurity Namespace Oqtane.Security Assembly Oqtane.Shared.dll public class UserSecurity Inheritance object UserSecurity Methods ContainsRole(List<Permission>, string, string) public static bool ContainsRole(List<Permission> permissions, string permissionName, string roleName) Parameters permissions List<Permission> permissionName string roleName string Returns bool ContainsUser(List<Permission>, string, int) public static bool ContainsUser(List<Permission> permissions, string permissionName, int userId) Parameters permissions List<Permission> permissionName string userId int Returns bool CreateClaimsIdentity(Alias, User) public static ClaimsIdentity CreateClaimsIdentity(Alias alias, User user) Parameters alias Alias user User Returns ClaimsIdentity CreateClaimsIdentity(Alias, User, List<UserRole>) public static ClaimsIdentity CreateClaimsIdentity(Alias alias, User user, List<UserRole> userroles) Parameters alias Alias user User userroles List<UserRole> Returns ClaimsIdentity IsAuthorized(User, List<Permission>) public static bool IsAuthorized(User user, List<Permission> permissionList) Parameters user User permissionList List<Permission> Returns bool IsAuthorized(User, string) public static bool IsAuthorized(User user, string roles) Parameters user User roles string Returns bool IsAuthorized(User, string, List<Permission>) public static bool IsAuthorized(User user, string permissionName, List<Permission> permissionList) Parameters user User permissionName string permissionList List<Permission> Returns bool IsAuthorized(User, string, string) [Obsolete(\"IsAuthorized(User user, string permissionName, string permissions) is deprecated. Use IsAuthorized(User user, string permissionName, List<Permission> permissionList) instead\", false)] public static bool IsAuthorized(User user, string permissionName, string permissions) Parameters user User permissionName string permissions string Returns bool"
  },
  "api/Oqtane.Security.html": {
    "href": "api/Oqtane.Security.html",
    "title": "Namespace Oqtane.Security | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Security Classes AuthorizationPolicyProvider AutoValidateAntiforgeryTokenAttribute AutoValidateAntiforgeryTokenFilter ClaimsPrincipalFactory<TUser> JwtManager PermissionHandler PermissionRequirement PrincipalValidator UserPermissions UserSecurity Interfaces IJwtManager IUserPermissions"
  },
  "api/Oqtane.Services.IAliasService.html": {
    "href": "api/Oqtane.Services.IAliasService.html",
    "title": "Interface IAliasService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IAliasService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve and store Alias information. public interface IAliasService Methods AddAliasAsync(Alias) Save another Alias in the DB. It must already contain all the information incl. Tenant it belongs to. Task<Alias> AddAliasAsync(Alias alias) Parameters alias Alias An Alias to add. Returns Task<Alias> DeleteAliasAsync(int) Remove an Alias from the DB. Task DeleteAliasAsync(int aliasId) Parameters aliasId int The Alias ID, not to be confused with a Site ID. Returns Task GetAliasAsync(int) Get a single alias Task<Alias> GetAliasAsync(int aliasId) Parameters aliasId int The Alias ID, not to be confused with a Site ID Returns Task<Alias> GetAliasesAsync() Get all aliases in the system Task<List<Alias>> GetAliasesAsync() Returns Task<List<Alias>> UpdateAliasAsync(Alias) Update an Alias in the DB. Make sure the object is correctly filled, as it must update an existing record. Task<Alias> UpdateAliasAsync(Alias alias) Parameters alias Alias The Alias to update. Returns Task<Alias>"
  },
  "api/Oqtane.Services.IClientStartup.html": {
    "href": "api/Oqtane.Services.IClientStartup.html",
    "title": "Interface IClientStartup | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IClientStartup Namespace Oqtane.Services Assembly Oqtane.Shared.dll public interface IClientStartup Methods ConfigureServices(IServiceCollection) void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/Oqtane.Services.IDatabaseService.html": {
    "href": "api/Oqtane.Services.IDatabaseService.html",
    "title": "Interface IDatabaseService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IDatabaseService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve Database information. public interface IDatabaseService Methods GetDatabasesAsync() Returns a list of databases Task<List<Database>> GetDatabasesAsync() Returns Task<List<Database>>"
  },
  "api/Oqtane.Services.IFileService.html": {
    "href": "api/Oqtane.Services.IFileService.html",
    "title": "Interface IFileService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IFileService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to get / create / upload / download files. public interface IFileService Methods AddFileAsync(File) Add / store a File record. This does not contain the file contents. Task<File> AddFileAsync(File file) Parameters file File Returns Task<File> DeleteFileAsync(int) Delete a File Task DeleteFileAsync(int fileId) Parameters fileId int Returns Task DownloadFileAsync(int) Get / download a file (the body). Task<byte[]> DownloadFileAsync(int fileId) Parameters fileId int Reference to a File Returns Task<byte[]> The bytes of the file GetFileAsync(int) Get one File Task<File> GetFileAsync(int fileId) Parameters fileId int Returns Task<File> GetFileAsync(int, string) Get a File based on the Folder and file name. Task<File> GetFileAsync(int folderId, string name) Parameters folderId int Reference to the Folder name string name of the file Returns Task<File> GetFilesAsync(int) Get all Files in the specified Folder Task<List<File>> GetFilesAsync(int folderId) Parameters folderId int The folder ID Returns Task<List<File>> GetFilesAsync(int, string) Retrieve a list of files from a Site and Folder Task<List<File>> GetFilesAsync(int siteId, string folderPath) Parameters siteId int Reference to the Site folderPath string Path of the folder TODO: todoc verify exactly from where the folder path must start Returns Task<List<File>> GetFilesAsync(string) Get all Files in the specified folder. Task<List<File>> GetFilesAsync(string folder) Parameters folder string The folder path relative to where the files are stored. TODO: todoc verify exactly from where the folder path must start Returns Task<List<File>> UpdateFileAsync(File) Update a File record. Use this for rename a file or change some attributes. This does not contain the file contents. Task<File> UpdateFileAsync(File file) Parameters file File Returns Task<File> UploadFileAsync(string, int, string) Upload a file from a URL to a Folder Task<File> UploadFileAsync(string url, int folderId, string name) Parameters url string folderId int name string Returns Task<File>"
  },
  "api/Oqtane.Services.IFolderService.html": {
    "href": "api/Oqtane.Services.IFolderService.html",
    "title": "Interface IFolderService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IFolderService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to get / create / modify Folder objects. public interface IFolderService Methods AddFolderAsync(Folder) Create one Folder using a Folder object. Task<Folder> AddFolderAsync(Folder folder) Parameters folder Folder Returns Task<Folder> DeleteFolderAsync(int) Delete a Folder Task DeleteFolderAsync(int folderId) Parameters folderId int Reference to a Folder Returns Task GetFolderAsync(int) Retrieve the information of one Folder Task<Folder> GetFolderAsync(int folderId) Parameters folderId int Returns Task<Folder> GetFolderAsync(int, string) Get a Folder of a Site based on the path. Task<Folder> GetFolderAsync(int siteId, string folderPath) Parameters siteId int Reference to the Site folderPath string Path of the folder TODO: todoc verify exactly from where the folder path must start Returns Task<Folder> GetFoldersAsync(int) Retrieve root folders of a Site Task<List<Folder>> GetFoldersAsync(int siteId) Parameters siteId int Returns Task<List<Folder>> UpdateFolderAsync(Folder) Update the information about a Folder Use this to rename the folder etc. Task<Folder> UpdateFolderAsync(Folder folder) Parameters folder Folder Returns Task<Folder> UpdateFolderOrderAsync(int, int, int?) Update the internal Folder-Order within the list of Folders. Task UpdateFolderOrderAsync(int siteId, int folderId, int? parentId) Parameters siteId int Reference to the Site folderId int Reference to a Folder for the security check parentId int? Reference to the Parent Folder or null - this Folders children will be re-sorted. Returns Task"
  },
  "api/Oqtane.Services.IInstallationService.html": {
    "href": "api/Oqtane.Services.IInstallationService.html",
    "title": "Interface IInstallationService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IInstallationService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage (install master database / upgrade version / etc.) the installation public interface IInstallationService Methods Install(InstallConfig) Starts the installation process Task<Installation> Install(InstallConfig config) Parameters config InstallConfig connectionString, database type, alias etc. Returns Task<Installation> internal status/message object IsInstalled() Returns a status/message object with the current installation state Task<Installation> IsInstalled() Returns Task<Installation> RegisterAsync(string) Registers a new User Task RegisterAsync(string email) Parameters email string Email of the user to be registered Returns Task RestartAsync() Restarts the installation Task RestartAsync() Returns Task internal status/message object Upgrade() Starts the upgrade process Task<Installation> Upgrade() Returns Task<Installation> internal status/message object"
  },
  "api/Oqtane.Services.IJobLogService.html": {
    "href": "api/Oqtane.Services.IJobLogService.html",
    "title": "Interface IJobLogService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IJobLogService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to read the job schedule log public interface IJobLogService Methods GetJobLogAsync(int) Return a JobLog entry for the given Id Task<JobLog> GetJobLogAsync(int jobLogId) Parameters jobLogId int Returns Task<JobLog> GetJobLogsAsync() Return a list of all JobLog entries Task<List<JobLog>> GetJobLogsAsync() Returns Task<List<JobLog>>"
  },
  "api/Oqtane.Services.IJobService.html": {
    "href": "api/Oqtane.Services.IJobService.html",
    "title": "Interface IJobService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IJobService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage jobs (Job) public interface IJobService Methods AddJobAsync(Job) Adds a new job Task<Job> AddJobAsync(Job job) Parameters job Job Returns Task<Job> DeleteJobAsync(int) Delete an existing job Task DeleteJobAsync(int jobId) Parameters jobId int Returns Task GetJobAsync(int) Return a specific job Task<Job> GetJobAsync(int jobId) Parameters jobId int Returns Task<Job> GetJobsAsync() Returns a list of all jobs Task<List<Job>> GetJobsAsync() Returns Task<List<Job>> StartJobAsync(int) Starts the given job Task StartJobAsync(int jobId) Parameters jobId int Returns Task StopJobAsync(int) Stops the given job Task StopJobAsync(int jobId) Parameters jobId int Returns Task UpdateJobAsync(Job) Updates an existing job Task<Job> UpdateJobAsync(Job job) Parameters job Job Returns Task<Job>"
  },
  "api/Oqtane.Services.ILanguageService.html": {
    "href": "api/Oqtane.Services.ILanguageService.html",
    "title": "Interface ILanguageService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILanguageService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Language entries public interface ILanguageService Methods AddLanguageAsync(Language) Adds the given language Task<Language> AddLanguageAsync(Language language) Parameters language Language Returns Task<Language> DeleteLanguageAsync(int) Deletes the given language Task DeleteLanguageAsync(int languageId) Parameters languageId int Returns Task EditLanguageAsync(Language) Edits the given language Task EditLanguageAsync(Language language) Parameters language Language Returns Task GetLanguageAsync(int) Returns the given language Task<Language> GetLanguageAsync(int languageId) Parameters languageId int Returns Task<Language> GetLanguagesAsync(int) Returns a list of all available languages for the given Site Task<List<Language>> GetLanguagesAsync(int siteId) Parameters siteId int Returns Task<List<Language>> GetLanguagesAsync(int, string) Returns a list of all available languages for the given Site and package Task<List<Language>> GetLanguagesAsync(int siteId, string packageName) Parameters siteId int packageName string Returns Task<List<Language>>"
  },
  "api/Oqtane.Services.ILocalizationService.html": {
    "href": "api/Oqtane.Services.ILocalizationService.html",
    "title": "Interface ILocalizationService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILocalizationService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve localizations (Culture) public interface ILocalizationService Methods GetCulturesAsync(bool) Returns a collection of supported cultures Task<IEnumerable<Culture>> GetCulturesAsync(bool installed) Parameters installed bool Returns Task<IEnumerable<Culture>>"
  },
  "api/Oqtane.Services.ILogService.html": {
    "href": "api/Oqtane.Services.ILogService.html",
    "title": "Interface ILogService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILogService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve and store Log(int?, int?, int?, string, string, LogFunction, LogLevel, Exception, string, params object[]) entries public interface ILogService Methods DeleteLogsAsync(int) Clear the entire logs of the given site. Task DeleteLogsAsync(int siteId) Parameters siteId int Returns Task GetLogAsync(int) Returns a specific log entry for the given id Task<Log> GetLogAsync(int logId) Parameters logId int Returns Task<Log> GetLogsAsync(int, string, string, int) Returns a list of log entires for the given params Task<List<Log>> GetLogsAsync(int siteId, string level, string function, int rows) Parameters siteId int level string function string rows int Returns Task<List<Log>> Log(Alias, int?, int?, int?, string, string, LogFunction, LogLevel, Exception, string, params object[]) Creates a new log entry Task Log(Alias alias, int? pageId, int? moduleId, int? userId, string category, string feature, LogFunction function, LogLevel level, Exception exception, string message, params object[] args) Parameters alias Alias pageId int? moduleId int? userId int? category string feature string function LogFunction level LogLevel exception Exception message string args object[] Returns Task Log(int?, int?, int?, string, string, LogFunction, LogLevel, Exception, string, params object[]) Creates a new log entry Task Log(int? pageId, int? moduleId, int? userId, string category, string feature, LogFunction function, LogLevel level, Exception exception, string message, params object[] args) Parameters pageId int? moduleId int? userId int? category string feature string function LogFunction level LogLevel exception Exception message string args object[] Returns Task"
  },
  "api/Oqtane.Services.IModuleDefinitionService.html": {
    "href": "api/Oqtane.Services.IModuleDefinitionService.html",
    "title": "Interface IModuleDefinitionService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModuleDefinitionService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage a ModuleDefinition public interface IModuleDefinitionService Methods CreateModuleDefinitionAsync(ModuleDefinition) Creates a new module definition Task<ModuleDefinition> CreateModuleDefinitionAsync(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition Returns Task<ModuleDefinition> DeleteModuleDefinitionAsync(int, int) Deletes a module definition Task DeleteModuleDefinitionAsync(int moduleDefinitionId, int siteId) Parameters moduleDefinitionId int siteId int Returns Task GetModuleDefinitionAsync(int, int) Returns a specific module definition Task<ModuleDefinition> GetModuleDefinitionAsync(int moduleDefinitionId, int siteId) Parameters moduleDefinitionId int siteId int Returns Task<ModuleDefinition> GetModuleDefinitionTemplatesAsync() Returns a list of module definition templates Task<List<Template>> GetModuleDefinitionTemplatesAsync() Returns Task<List<Template>> GetModuleDefinitionsAsync(int) Returns a list of module definitions for the given site Task<List<ModuleDefinition>> GetModuleDefinitionsAsync(int siteId) Parameters siteId int Returns Task<List<ModuleDefinition>> UpdateModuleDefinitionAsync(ModuleDefinition) Updates a existing module definition Task UpdateModuleDefinitionAsync(ModuleDefinition moduleDefinition) Parameters moduleDefinition ModuleDefinition Returns Task"
  },
  "api/Oqtane.Services.IModuleService.html": {
    "href": "api/Oqtane.Services.IModuleService.html",
    "title": "Interface IModuleService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IModuleService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve and store modules (Module) public interface IModuleService Methods AddModuleAsync(Module) Adds a new module Task<Module> AddModuleAsync(Module module) Parameters module Module Returns Task<Module> DeleteModuleAsync(int) Deletes a module Task DeleteModuleAsync(int moduleId) Parameters moduleId int Returns Task ExportModuleAsync(int, int) Exports a given module Task<string> ExportModuleAsync(int moduleId, int pageId) Parameters moduleId int pageId int Returns Task<string> module in JSON GetModuleAsync(int) Returns a specific module Task<Module> GetModuleAsync(int moduleId) Parameters moduleId int Returns Task<Module> GetModulesAsync(int) Returns a list of modules for the given site Task<List<Module>> GetModulesAsync(int siteId) Parameters siteId int Returns Task<List<Module>> ImportModuleAsync(int, int, string) Imports a module Task<bool> ImportModuleAsync(int moduleId, int pageId, string content) Parameters moduleId int pageId int content string module in JSON format Returns Task<bool> UpdateModuleAsync(Module) Updates an existing module Task<Module> UpdateModuleAsync(Module module) Parameters module Module Returns Task<Module>"
  },
  "api/Oqtane.Services.INotificationService.html": {
    "href": "api/Oqtane.Services.INotificationService.html",
    "title": "Interface INotificationService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface INotificationService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to store and retrieve notifications (Notification) public interface INotificationService Methods AddNotificationAsync(Notification) Creates a new notification Task<Notification> AddNotificationAsync(Notification notification) Parameters notification Notification Returns Task<Notification> DeleteNotificationAsync(int) Deletes a notification Task DeleteNotificationAsync(int notificationId) Parameters notificationId int Returns Task GetNotificationAsync(int) Returns a specific notifications Task<Notification> GetNotificationAsync(int notificationId) Parameters notificationId int Returns Task<Notification> GetNotificationCountAsync(int, string, int, bool) Task<int> GetNotificationCountAsync(int siteId, string direction, int userId, bool isRead) Parameters siteId int direction string userId int isRead bool Returns Task<int> GetNotificationsAsync(int, string, int) Return a list of notifications Task<List<Notification>> GetNotificationsAsync(int siteId, string direction, int userId) Parameters siteId int direction string userId int Returns Task<List<Notification>> GetNotificationsAsync(int, string, int, int, bool) Task<List<Notification>> GetNotificationsAsync(int siteId, string direction, int userId, int count, bool isRead) Parameters siteId int direction string userId int count int isRead bool Returns Task<List<Notification>> UpdateNotificationAsync(Notification) Updates a existing notification Task<Notification> UpdateNotificationAsync(Notification notification) Parameters notification Notification Returns Task<Notification>"
  },
  "api/Oqtane.Services.IPackageService.html": {
    "href": "api/Oqtane.Services.IPackageService.html",
    "title": "Interface IPackageService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPackageService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage packages (Package) public interface IPackageService Methods DownloadPackageAsync(string, string) Downloads a specific package as .nupkg file Task DownloadPackageAsync(string packageId, string version) Parameters packageId string version string Returns Task GetPackageAsync(string, string, bool) Returns a specific package Task<Package> GetPackageAsync(string packageId, string version, bool download) Parameters packageId string version string download bool Returns Task<Package> GetPackageUpdatesAsync(string) Returns a list of packages based on installationid Task<List<Package>> GetPackageUpdatesAsync(string type) Parameters type string Returns Task<List<Package>> GetPackagesAsync(string) Returns a list of packages matching the given parameters Task<List<Package>> GetPackagesAsync(string type) Parameters type string Returns Task<List<Package>> GetPackagesAsync(string, string, string, string) Returns a list of packages matching the given parameters Task<List<Package>> GetPackagesAsync(string type, string search, string price, string package) Parameters type string search string price string package string Returns Task<List<Package>> GetPackagesAsync(string, string, string, string, string) Returns a list of packages matching the given parameters Task<List<Package>> GetPackagesAsync(string type, string search, string price, string package, string sort) Parameters type string search string price string package string sort string Returns Task<List<Package>> InstallPackagesAsync() Installs all packages located in //TODO: 2dm where? Task InstallPackagesAsync() Returns Task"
  },
  "api/Oqtane.Services.IPageModuleService.html": {
    "href": "api/Oqtane.Services.IPageModuleService.html",
    "title": "Interface IPageModuleService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPageModuleService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to store and retrieve a PageModule public interface IPageModuleService Methods AddPageModuleAsync(PageModule) Creates a new page module Task<PageModule> AddPageModuleAsync(PageModule pageModule) Parameters pageModule PageModule Returns Task<PageModule> DeletePageModuleAsync(int) Deletes a page module Task DeletePageModuleAsync(int pageModuleId) Parameters pageModuleId int Returns Task GetPageModuleAsync(int) Returns a specific page module Task<PageModule> GetPageModuleAsync(int pageModuleId) Parameters pageModuleId int Returns Task<PageModule> GetPageModuleAsync(int, int) Return a specific page module Task<PageModule> GetPageModuleAsync(int pageId, int moduleId) Parameters pageId int moduleId int Returns Task<PageModule> UpdatePageModuleAsync(PageModule) Updates a existing page module Task<PageModule> UpdatePageModuleAsync(PageModule pageModule) Parameters pageModule PageModule Returns Task<PageModule> UpdatePageModuleOrderAsync(int, string) Updates order of all page modules in the given pane Task UpdatePageModuleOrderAsync(int pageId, string pane) Parameters pageId int pane string Returns Task"
  },
  "api/Oqtane.Services.IPageService.html": {
    "href": "api/Oqtane.Services.IPageService.html",
    "title": "Interface IPageService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IPageService Namespace Oqtane.Services Assembly Oqtane.Client.dll Services to store and retrieve a Page public interface IPageService Methods AddPageAsync(Page) Adds a new page Task<Page> AddPageAsync(Page page) Parameters page Page Returns Task<Page> AddPageAsync(int, int) Adds a new page Task<Page> AddPageAsync(int pageId, int userId) Parameters pageId int userId int Returns Task<Page> DeletePageAsync(int) Deletes a page Task DeletePageAsync(int pageId) Parameters pageId int Returns Task GetPageAsync(int) Returns a specific page Task<Page> GetPageAsync(int pageId) Parameters pageId int Returns Task<Page> GetPageAsync(string, int) Returns a specific page by its defined path Task<Page> GetPageAsync(string path, int siteId) Parameters path string siteId int Returns Task<Page> GetPagesAsync(int) Returns a list of pages Task<List<Page>> GetPagesAsync(int siteId) Parameters siteId int Returns Task<List<Page>> UpdatePageAsync(Page) Updates a existing page Task<Page> UpdatePageAsync(Page page) Parameters page Page Returns Task<Page> UpdatePageOrderAsync(int, int, int?) Updates order of all page modules in the given parent Task UpdatePageOrderAsync(int siteId, int pageId, int? parentId) Parameters siteId int pageId int parentId int? Returns Task"
  },
  "api/Oqtane.Services.IProfileService.html": {
    "href": "api/Oqtane.Services.IProfileService.html",
    "title": "Interface IProfileService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IProfileService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to store and retrieve Profile entries public interface IProfileService Methods AddProfileAsync(Profile) Creates a new profile entry Task<Profile> AddProfileAsync(Profile profile) Parameters profile Profile Returns Task<Profile> DeleteProfileAsync(int) Deletes a profile entry Task DeleteProfileAsync(int profileId) Parameters profileId int Returns Task GetProfileAsync(int) Returns a specific profile entry Task<Profile> GetProfileAsync(int profileId) Parameters profileId int Returns Task<Profile> GetProfilesAsync(int) Returns a list of profile entries Task<List<Profile>> GetProfilesAsync(int siteId) Parameters siteId int Returns Task<List<Profile>> UpdateProfileAsync(Profile) Updates an existing profile entry Task<Profile> UpdateProfileAsync(Profile profile) Parameters profile Profile Returns Task<Profile>"
  },
  "api/Oqtane.Services.IRoleService.html": {
    "href": "api/Oqtane.Services.IRoleService.html",
    "title": "Interface IRoleService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IRoleService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Roles on a Site public interface IRoleService Methods AddRoleAsync(Role) Add / save a new Role to the database. Task<Role> AddRoleAsync(Role role) Parameters role Role Returns Task<Role> DeleteRoleAsync(int) Delete / mark-as-deleted a Role in the database. Task DeleteRoleAsync(int roleId) Parameters roleId int ID-reference of a Role Returns Task GetRoleAsync(int) Get one specific Role Task<Role> GetRoleAsync(int roleId) Parameters roleId int ID-reference of a Role Returns Task<Role> GetRolesAsync(int) Get all Roles of this Site. Will exclude global roles which are for all sites. To get those as well, use the overload GetRolesAsync(int, bool) Task<List<Role>> GetRolesAsync(int siteId) Parameters siteId int ID-reference of a Site Returns Task<List<Role>> GetRolesAsync(int, bool) Get roles of the Site and optionally include global Roles. Task<List<Role>> GetRolesAsync(int siteId, bool includeGlobalRoles) Parameters siteId int ID-reference to a Site includeGlobalRoles bool True if it should also include global roles. False will return the same data as just calling GetRolesAsync(int) Returns Task<List<Role>> UpdateRoleAsync(Role) Update a Role in the database. Task<Role> UpdateRoleAsync(Role role) Parameters role Role Returns Task<Role>"
  },
  "api/Oqtane.Services.ISettingService.html": {
    "href": "api/Oqtane.Services.ISettingService.html",
    "title": "Interface ISettingService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISettingService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Settings public interface ISettingService Methods AddSettingAsync(Setting) Creates a new setting Task<Setting> AddSettingAsync(Setting setting) Parameters setting Setting Returns Task<Setting> ClearSiteSettingsCacheAsync() Clears site option cache Task ClearSiteSettingsCacheAsync() Returns Task DeleteSettingAsync(int) [Obsolete(\"DeleteSettingAsync(int settingId) is deprecated. Use DeleteSettingAsync(string entityName, int settingId) instead.\", false)] Task DeleteSettingAsync(int settingId) Parameters settingId int Returns Task DeleteSettingAsync(string, int) Deletes a setting Task DeleteSettingAsync(string entityName, int settingId) Parameters entityName string settingId int Returns Task DeleteSettingAsync(string, int, string) Returns a specific setting Task DeleteSettingAsync(string entityName, int entityId, string settingName) Parameters entityName string entityId int settingName string Returns Task GetFolderSettingsAsync(int) Returns a key-value dictionary of all folder settings for the given folder Task<Dictionary<string, string>> GetFolderSettingsAsync(int folderId) Parameters folderId int Returns Task<Dictionary<string, string>> GetHostSettingsAsync() Returns a key-value dictionary of all tenant settings Task<Dictionary<string, string>> GetHostSettingsAsync() Returns Task<Dictionary<string, string>> GetModuleDefinitionSettingsAsync(int) Returns a key-value dictionary of all module settings for the given module Task<Dictionary<string, string>> GetModuleDefinitionSettingsAsync(int moduleDefinitionId) Parameters moduleDefinitionId int Returns Task<Dictionary<string, string>> GetModuleSettingsAsync(int) Returns a key-value dictionary of all module settings for the given module Task<Dictionary<string, string>> GetModuleSettingsAsync(int moduleId) Parameters moduleId int Returns Task<Dictionary<string, string>> GetPageModuleSettingsAsync(int) Returns a key-value dictionary of all page module settings for the given page module Task<Dictionary<string, string>> GetPageModuleSettingsAsync(int pageModuleId) Parameters pageModuleId int Returns Task<Dictionary<string, string>> GetPageSettingsAsync(int) Returns a key-value dictionary of all page settings for the given page Task<Dictionary<string, string>> GetPageSettingsAsync(int pageId) Parameters pageId int Returns Task<Dictionary<string, string>> GetSetting(Dictionary<string, string>, string, string) Gets the value of the given settingName (key) from the given key-value dictionary string GetSetting(Dictionary<string, string> settings, string settingName, string defaultValue) Parameters settings Dictionary<string, string> settingName string defaultValue string Returns string GetSettingAsync(int) [Obsolete(\"GetSettingAsync(int settingId) is deprecated. Use GetSettingAsync(string entityName, int settingId) instead.\", false)] Task<Setting> GetSettingAsync(int settingId) Parameters settingId int Returns Task<Setting> GetSettingAsync(string, int) Returns a specific setting Task<Setting> GetSettingAsync(string entityName, int settingId) Parameters entityName string settingId int Returns Task<Setting> GetSettingsAsync(string, int) Returns a key-value dictionary of all settings for the given entityName Task<Dictionary<string, string>> GetSettingsAsync(string entityName, int entityId) Parameters entityName string entityId int Returns Task<Dictionary<string, string>> GetSettingsAsync(string, int, string) Returns a specific setting Task<List<Setting>> GetSettingsAsync(string entityName, int entityId, string settingName) Parameters entityName string entityId int settingName string Returns Task<List<Setting>> GetSiteSettingsAsync(int) Returns a key-value dictionary of all site settings for the given site Task<Dictionary<string, string>> GetSiteSettingsAsync(int siteId) Parameters siteId int Returns Task<Dictionary<string, string>> GetTenantSettingsAsync() Returns a key-value dictionary of all tenant settings Task<Dictionary<string, string>> GetTenantSettingsAsync() Returns Task<Dictionary<string, string>> GetUserSettingsAsync(int) Returns a key-value dictionary of all user settings for the given user Task<Dictionary<string, string>> GetUserSettingsAsync(int userId) Parameters userId int Returns Task<Dictionary<string, string>> GetVisitorSettingsAsync(int) Returns a key-value dictionary of all settings for the given visitor Task<Dictionary<string, string>> GetVisitorSettingsAsync(int visitorId) Parameters visitorId int Returns Task<Dictionary<string, string>> MergeSettings(Dictionary<string, string>, Dictionary<string, string>) Dictionary<string, string> MergeSettings(Dictionary<string, string> settings1, Dictionary<string, string> settings2) Parameters settings1 Dictionary<string, string> settings2 Dictionary<string, string> Returns Dictionary<string, string> SetSetting(Dictionary<string, string>, string, string) Sets the value of the given settingName (key) in the given key-value dictionary Dictionary<string, string> SetSetting(Dictionary<string, string> settings, string settingName, string settingValue) Parameters settings Dictionary<string, string> settingName string settingValue string Returns Dictionary<string, string> SetSetting(Dictionary<string, string>, string, string, bool) Dictionary<string, string> SetSetting(Dictionary<string, string> settings, string settingName, string settingValue, bool isPrivate) Parameters settings Dictionary<string, string> settingName string settingValue string isPrivate bool Returns Dictionary<string, string> UpdateFolderSettingsAsync(Dictionary<string, string>, int) Updates a folder setting Task UpdateFolderSettingsAsync(Dictionary<string, string> folderSettings, int folderId) Parameters folderSettings Dictionary<string, string> folderId int Returns Task UpdateHostSettingsAsync(Dictionary<string, string>) Updates a host setting Task UpdateHostSettingsAsync(Dictionary<string, string> hostSettings) Parameters hostSettings Dictionary<string, string> Returns Task UpdateModuleDefinitionSettingsAsync(Dictionary<string, string>, int) Updates a module setting Task UpdateModuleDefinitionSettingsAsync(Dictionary<string, string> moduleDefinitionSettings, int moduleDefinitionId) Parameters moduleDefinitionSettings Dictionary<string, string> moduleDefinitionId int Returns Task UpdateModuleSettingsAsync(Dictionary<string, string>, int) Updates a module setting Task UpdateModuleSettingsAsync(Dictionary<string, string> moduleSettings, int moduleId) Parameters moduleSettings Dictionary<string, string> moduleId int Returns Task UpdatePageModuleSettingsAsync(Dictionary<string, string>, int) Updates a page module setting Task UpdatePageModuleSettingsAsync(Dictionary<string, string> pageModuleSettings, int pageModuleId) Parameters pageModuleSettings Dictionary<string, string> pageModuleId int Returns Task UpdatePageSettingsAsync(Dictionary<string, string>, int) Updates a page setting Task UpdatePageSettingsAsync(Dictionary<string, string> pageSettings, int pageId) Parameters pageSettings Dictionary<string, string> pageId int Returns Task UpdateSettingAsync(Setting) Updates a existing setting Task<Setting> UpdateSettingAsync(Setting setting) Parameters setting Setting Returns Task<Setting> UpdateSettingsAsync(Dictionary<string, string>, string, int) Updates settings for a given entityName and Id Task UpdateSettingsAsync(Dictionary<string, string> settings, string entityName, int entityId) Parameters settings Dictionary<string, string> entityName string entityId int Returns Task UpdateSiteSettingsAsync(Dictionary<string, string>, int) Updates a site setting Task UpdateSiteSettingsAsync(Dictionary<string, string> siteSettings, int siteId) Parameters siteSettings Dictionary<string, string> siteId int Returns Task UpdateTenantSettingsAsync(Dictionary<string, string>) Updates a tenant setting Task UpdateTenantSettingsAsync(Dictionary<string, string> tenantSettings) Parameters tenantSettings Dictionary<string, string> Returns Task UpdateUserSettingsAsync(Dictionary<string, string>, int) Updates a user setting Task UpdateUserSettingsAsync(Dictionary<string, string> userSettings, int userId) Parameters userSettings Dictionary<string, string> userId int Returns Task UpdateVisitorSettingsAsync(Dictionary<string, string>, int) Updates a visitor setting Task UpdateVisitorSettingsAsync(Dictionary<string, string> visitorSettings, int visitorId) Parameters visitorSettings Dictionary<string, string> visitorId int Returns Task"
  },
  "api/Oqtane.Services.ISiteService.html": {
    "href": "api/Oqtane.Services.ISiteService.html",
    "title": "Interface ISiteService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to store and retrieve Site entries public interface ISiteService Methods AddSiteAsync(Site) Creates a new site Task<Site> AddSiteAsync(Site site) Parameters site Site Returns Task<Site> DeleteSiteAsync(int) Deletes a site Task DeleteSiteAsync(int siteId) Parameters siteId int Returns Task GetSiteAsync(int) Returns a specific site Task<Site> GetSiteAsync(int siteId) Parameters siteId int Returns Task<Site> GetSitesAsync() Returns a list of sites Task<List<Site>> GetSitesAsync() Returns Task<List<Site>> UpdateSiteAsync(Site) Updates an existing site Task<Site> UpdateSiteAsync(Site site) Parameters site Site Returns Task<Site>"
  },
  "api/Oqtane.Services.ISiteTemplateService.html": {
    "href": "api/Oqtane.Services.ISiteTemplateService.html",
    "title": "Interface ISiteTemplateService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISiteTemplateService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve SiteTemplate entries public interface ISiteTemplateService Methods GetSiteTemplatesAsync() Returns a list of site templates Task<List<SiteTemplate>> GetSiteTemplatesAsync() Returns Task<List<SiteTemplate>>"
  },
  "api/Oqtane.Services.ISqlService.html": {
    "href": "api/Oqtane.Services.ISqlService.html",
    "title": "Interface ISqlService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISqlService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to execute a SqlQuery against the backend database public interface ISqlService Methods ExecuteQueryAsync(SqlQuery) Executes a sql query and returns its result Task<SqlQuery> ExecuteQueryAsync(SqlQuery sqlquery) Parameters sqlquery SqlQuery Returns Task<SqlQuery>"
  },
  "api/Oqtane.Services.ISyncService.html": {
    "href": "api/Oqtane.Services.ISyncService.html",
    "title": "Interface ISyncService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISyncService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve Sync information. public interface ISyncService Methods GetSyncEventsAsync(DateTime) Get sync events Task<Sync> GetSyncEventsAsync(DateTime lastSyncDate) Parameters lastSyncDate DateTime Returns Task<Sync>"
  },
  "api/Oqtane.Services.ISystemService.html": {
    "href": "api/Oqtane.Services.ISystemService.html",
    "title": "Interface ISystemService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ISystemService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to retrieve and update system information. public interface ISystemService Methods GetIconsAsync() returns a key-value dictionary with default system icons Task<Dictionary<string, string>> GetIconsAsync() Returns Task<Dictionary<string, string>> GetSystemInfoAsync() returns a key-value dictionary with the current system configuration information Task<Dictionary<string, object>> GetSystemInfoAsync() Returns Task<Dictionary<string, object>> GetSystemInfoAsync(string) returns a key-value dictionary with the current system information - \"environment\" or \"configuration\" Task<Dictionary<string, object>> GetSystemInfoAsync(string type) Parameters type string Returns Task<Dictionary<string, object>> GetSystemInfoAsync(string, object) returns a config value Task<object> GetSystemInfoAsync(string settingKey, object defaultValue) Parameters settingKey string defaultValue object Returns Task<object> UpdateSystemInfoAsync(Dictionary<string, object>) Updates system information Task UpdateSystemInfoAsync(Dictionary<string, object> settings) Parameters settings Dictionary<string, object> Returns Task"
  },
  "api/Oqtane.Services.ITenantService.html": {
    "href": "api/Oqtane.Services.ITenantService.html",
    "title": "Interface ITenantService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITenantService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Tenants on the Oqtane installation. public interface ITenantService Methods GetTenantAsync(int) Get one specific Tenant Task<Tenant> GetTenantAsync(int tenantId) Parameters tenantId int ID-reference of the Tenant Returns Task<Tenant> GetTenantsAsync() Get all Tenants Task<List<Tenant>> GetTenantsAsync() Returns Task<List<Tenant>>"
  },
  "api/Oqtane.Services.IThemeService.html": {
    "href": "api/Oqtane.Services.IThemeService.html",
    "title": "Interface IThemeService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IThemeService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Theme entries public interface IThemeService Methods CreateThemeAsync(Theme) Creates a new theme Task<Theme> CreateThemeAsync(Theme theme) Parameters theme Theme Returns Task<Theme> DeleteThemeAsync(string) Deletes a theme Task DeleteThemeAsync(string themeName) Parameters themeName string Returns Task GetContainerControls(List<Theme>, string) Returns a list of containers (ThemeControl) for a theme containing a specific theme control type List<ThemeControl> GetContainerControls(List<Theme> themes, string themeControlType) Parameters themes List<Theme> themeControlType string Returns List<ThemeControl> GetLayoutControls(List<Theme>, string) Returns a list of layouts (ThemeControl) from the given themes with a matching theme name List<ThemeControl> GetLayoutControls(List<Theme> themes, string themeName) Parameters themes List<Theme> themeName string Returns List<ThemeControl> GetTheme(List<Theme>, string) Returns a theme ThemeControls containing a specific theme control type Theme GetTheme(List<Theme> themes, string themeControlType) Parameters themes List<Theme> themeControlType string Returns Theme GetThemeAsync(int, int) Returns a specific theme Task<Theme> GetThemeAsync(int themeId, int siteId) Parameters themeId int siteId int Returns Task<Theme> GetThemeControls(List<Theme>) Returns a list of ThemeControls from the given themes List<ThemeControl> GetThemeControls(List<Theme> themes) Parameters themes List<Theme> Returns List<ThemeControl> GetThemeControls(List<Theme>, string) Returns a list of ThemeControls for a theme containing a specific theme control type List<ThemeControl> GetThemeControls(List<Theme> themes, string themeControlType) Parameters themes List<Theme> themeControlType string Returns List<ThemeControl> GetThemeTemplatesAsync() Returns a list of theme templates (Template) Task<List<Template>> GetThemeTemplatesAsync() Returns Task<List<Template>> GetThemesAsync() Returns a list of available themes Task<List<Theme>> GetThemesAsync() Returns Task<List<Theme>> UpdateThemeAsync(Theme) Updates a existing theme Task UpdateThemeAsync(Theme theme) Parameters theme Theme Returns Task"
  },
  "api/Oqtane.Services.IUrlMappingService.html": {
    "href": "api/Oqtane.Services.IUrlMappingService.html",
    "title": "Interface IUrlMappingService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUrlMappingService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage UrlMappings on a Site public interface IUrlMappingService Methods AddUrlMappingAsync(UrlMapping) Add / save a new UrlMapping to the database. Task<UrlMapping> AddUrlMappingAsync(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns Task<UrlMapping> DeleteUrlMappingAsync(int) Delete a UrlMapping in the database. Task DeleteUrlMappingAsync(int urlMappingId) Parameters urlMappingId int ID-reference of a UrlMapping Returns Task GetUrlMappingAsync(int) Get one specific UrlMapping Task<UrlMapping> GetUrlMappingAsync(int urlMappingId) Parameters urlMappingId int ID-reference of a UrlMapping Returns Task<UrlMapping> GetUrlMappingAsync(int, string) Get one specific UrlMapping Task<UrlMapping> GetUrlMappingAsync(int siteId, string url) Parameters siteId int ID-reference of a Site url string A url Returns Task<UrlMapping> GetUrlMappingsAsync(int, bool) Get all UrlMappings of this Site. Task<List<UrlMapping>> GetUrlMappingsAsync(int siteId, bool isMapped) Parameters siteId int ID-reference of a Site isMapped bool Returns Task<List<UrlMapping>> UpdateUrlMappingAsync(UrlMapping) Update a UrlMapping in the database. Task<UrlMapping> UpdateUrlMappingAsync(UrlMapping urlMapping) Parameters urlMapping UrlMapping Returns Task<UrlMapping>"
  },
  "api/Oqtane.Services.IUserRoleService.html": {
    "href": "api/Oqtane.Services.IUserRoleService.html",
    "title": "Interface IUserRoleService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserRoleService Namespace Oqtane.Services Assembly Oqtane.Client.dll Manage Roles assigned to a specific User public interface IUserRoleService Methods AddUserRoleAsync(UserRole) Save a new UserRole Task<UserRole> AddUserRoleAsync(UserRole userRole) Parameters userRole UserRole Returns Task<UserRole> DeleteUserRoleAsync(int) Delete a UserRole in the database Task DeleteUserRoleAsync(int userRoleId) Parameters userRoleId int Returns Task GetUserRoleAsync(int) Get one specific UserRole Task<UserRole> GetUserRoleAsync(int userRoleId) Parameters userRoleId int ID-reference to a UserRole Returns Task<UserRole> GetUserRolesAsync(int) Get all UserRoles on a Site Task<List<UserRole>> GetUserRolesAsync(int siteId) Parameters siteId int ID-reference to a Site Returns Task<List<UserRole>> GetUserRolesAsync(int, int) Get all UserRoles on a Site Task<List<UserRole>> GetUserRolesAsync(int siteId, int userId) Parameters siteId int ID-reference to a Site userId int ID-reference to a User Returns Task<List<UserRole>> GetUserRolesAsync(int, int, string) Get all UserRoles on a Site Task<List<UserRole>> GetUserRolesAsync(int siteId, int userId, string roleName) Parameters siteId int ID-reference to a Site userId int ID-reference to a User roleName string Name reference a Role Returns Task<List<UserRole>> GetUserRolesAsync(int, string) Get all UserRoles on a Site Task<List<UserRole>> GetUserRolesAsync(int siteId, string roleName) Parameters siteId int ID-reference to a Site roleName string Name reference a Role Returns Task<List<UserRole>> UpdateUserRoleAsync(UserRole) Update a UserRole in the database Task<UserRole> UpdateUserRoleAsync(UserRole userRole) Parameters userRole UserRole Returns Task<UserRole>"
  },
  "api/Oqtane.Services.IUserService.html": {
    "href": "api/Oqtane.Services.IUserService.html",
    "title": "Interface IUserService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IUserService Namespace Oqtane.Services Assembly Oqtane.Client.dll Manage (get / update) user information public interface IUserService Methods AddUserAsync(User) Save a user to the Database. The User object contains all the information incl. what Site it belongs to. Task<User> AddUserAsync(User user) Parameters user User Returns Task<User> DeleteUserAsync(int, int) Delete / remove a user in the database Task DeleteUserAsync(int userId, int siteId) Parameters userId int ID-reference to the User siteId int ID-reference to the Site Returns Task ForgotPasswordAsync(User) Trigger a forgot-password e-mail for this User. Task ForgotPasswordAsync(User user) Parameters user User Returns Task GetPasswordRequirementsAsync(int) Get password requirements for site Task<string> GetPasswordRequirementsAsync(int siteId) Parameters siteId int ID of a Site Returns Task<string> GetPersonalAccessTokenAsync() Get personal access token for current user (administrators only) Task<string> GetPersonalAccessTokenAsync() Returns Task<string> GetTokenAsync() Get token for current user Task<string> GetTokenAsync() Returns Task<string> GetUserAsync(int, int) Get a User of a specific site Task<User> GetUserAsync(int userId, int siteId) Parameters userId int ID of a User siteId int ID of a Site Returns Task<User> GetUserAsync(string, int) Get a User of a specific site Task<User> GetUserAsync(string username, int siteId) Parameters username string Username / login of a User siteId int ID of a Site Returns Task<User> GetUserAsync(string, string, int) Get a User of a specific site Task<User> GetUserAsync(string username, string email, int siteId) Parameters username string Username / login of a User email string email address of a User siteId int ID of a Site Returns Task<User> ImportUsersAsync(int, int, bool) Bulk import of users Task<Dictionary<string, string>> ImportUsersAsync(int siteId, int fileId, bool notify) Parameters siteId int ID of a Site fileId int ID of a File notify bool Indicates if new users should be notified by email Returns Task<Dictionary<string, string>> LinkUserAsync(User, string, string, string, string) Link an external login with a local user account Task<User> LinkUserAsync(User user, string token, string type, string key, string name) Parameters user User The User we're verifying token string A Hash value in the URL which verifies this user got the e-mail (containing this token) type string External Login provider type key string External Login provider key name string External Login provider display name Returns Task<User> LoginUserAsync(User, bool, bool) Will login the specified User. Note that this will probably not be a real User, but a user object where the Username and Password have been filled. Task<User> LoginUserAsync(User user, bool setCookie, bool isPersistent) Parameters user User A User object which should have at least the Username and Password set. setCookie bool Determines if the login cookie should be set (only relevant for Hybrid scenarios) isPersistent bool Determines if the login cookie should be persisted for a long time. Returns Task<User> LogoutUserAsync(User) Logout a User Task LogoutUserAsync(User user) Parameters user User Returns Task ResetPasswordAsync(User, string) Reset the password of this User Task<User> ResetPasswordAsync(User user, string token) Parameters user User token string Returns Task<User> UpdateUserAsync(User) Update an existing user in the database. Task<User> UpdateUserAsync(User user) Parameters user User Returns Task<User> ValidatePasswordAsync(string) Validate a users password against the password policy Task<bool> ValidatePasswordAsync(string password) Parameters password string Returns Task<bool> VerifyEmailAsync(User, string) Update e-mail verification status of a user. Task<User> VerifyEmailAsync(User user, string token) Parameters user User The User we're verifying token string A Hash value in the URL which verifies this user got the e-mail (containing this token) Returns Task<User> VerifyTwoFactorAsync(User, string) Verify the two factor verification code User Task<User> VerifyTwoFactorAsync(User user, string token) Parameters user User token string Returns Task<User>"
  },
  "api/Oqtane.Services.IVisitorService.html": {
    "href": "api/Oqtane.Services.IVisitorService.html",
    "title": "Interface IVisitorService | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IVisitorService Namespace Oqtane.Services Assembly Oqtane.Client.dll Service to manage Visitors on a Site public interface IVisitorService Methods GetVisitorAsync(int) Get a specific Visitor of this Site. Task<Visitor> GetVisitorAsync(int visitorId) Parameters visitorId int ID-reference of a Visitor Returns Task<Visitor> GetVisitorsAsync(int, DateTime) Get all Visitors of this Site. Task<List<Visitor>> GetVisitorsAsync(int siteId, DateTime fromDate) Parameters siteId int ID-reference of a Site fromDate DateTime Returns Task<List<Visitor>>"
  },
  "api/Oqtane.Services.RemoteServiceBase.html": {
    "href": "api/Oqtane.Services.RemoteServiceBase.html",
    "title": "Class RemoteServiceBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RemoteServiceBase Namespace Oqtane.Services Assembly Oqtane.Client.dll public class RemoteServiceBase Inheritance object RemoteServiceBase Constructors RemoteServiceBase(IHttpClientFactory, SiteState) protected RemoteServiceBase(IHttpClientFactory httpClientFactory, SiteState siteState) Parameters httpClientFactory IHttpClientFactory siteState SiteState Methods DeleteAsync(string) protected Task DeleteAsync(string uri) Parameters uri string Returns Task GetAsync(string) protected Task GetAsync(string uri) Parameters uri string Returns Task GetByteArrayAsync(string) protected Task<byte[]> GetByteArrayAsync(string uri) Parameters uri string Returns Task<byte[]> GetJsonAsync<T>(string) protected Task<T> GetJsonAsync<T>(string uri) Parameters uri string Returns Task<T> Type Parameters T GetStringAsync(string) protected Task<string> GetStringAsync(string uri) Parameters uri string Returns Task<string> PostAsync(string) protected Task PostAsync(string uri) Parameters uri string Returns Task PostJsonAsync<T>(string, T) protected Task<T> PostJsonAsync<T>(string uri, T value) Parameters uri string value T Returns Task<T> Type Parameters T PostJsonAsync<TValue, TResult>(string, TValue) protected Task<TResult> PostJsonAsync<TValue, TResult>(string uri, TValue value) Parameters uri string value TValue Returns Task<TResult> Type Parameters TValue TResult PutAsync(string) protected Task PutAsync(string uri) Parameters uri string Returns Task PutJsonAsync<T>(string, T) protected Task<T> PutJsonAsync<T>(string uri, T value) Parameters uri string value T Returns Task<T> Type Parameters T PutJsonAsync<TValue, TResult>(string, TValue) protected Task<TResult> PutJsonAsync<TValue, TResult>(string uri, TValue value) Parameters uri string value TValue Returns Task<TResult> Type Parameters TValue TResult"
  },
  "api/Oqtane.Services.ServiceBase.html": {
    "href": "api/Oqtane.Services.ServiceBase.html",
    "title": "Class ServiceBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ServiceBase Namespace Oqtane.Services Assembly Oqtane.Client.dll public class ServiceBase Inheritance object ServiceBase Constructors ServiceBase(HttpClient) protected ServiceBase(HttpClient client) Parameters client HttpClient ServiceBase(HttpClient, SiteState) protected ServiceBase(HttpClient httpClient, SiteState siteState) Parameters httpClient HttpClient siteState SiteState ServiceBase(IHttpClientFactory, SiteState) protected ServiceBase(IHttpClientFactory factory, SiteState siteState) Parameters factory IHttpClientFactory siteState SiteState Properties Alias [Obsolete(\"This property of ServiceBase is deprecated. Cross tenant service calls are not supported.\", false)] public Alias Alias { get; set; } Property Value Alias Methods CreateApiUrl(Alias, string) [Obsolete(\"This method is obsolete. Use CreateApiUrl(string serviceName, Alias alias) in conjunction with ControllerRoutes.ApiRoute in Controllers instead.\", false)] public string CreateApiUrl(Alias alias, string serviceName) Parameters alias Alias serviceName string Returns string CreateApiUrl(string) public string CreateApiUrl(string serviceName) Parameters serviceName string Returns string CreateApiUrl(string, Alias) public string CreateApiUrl(string serviceName, Alias alias) Parameters serviceName string alias Alias Returns string CreateApiUrl(string, Alias, string) public string CreateApiUrl(string serviceName, Alias alias, string routeTemplate) Parameters serviceName string alias Alias routeTemplate string Returns string CreateAuthorizationPolicyUrl(string, Dictionary<string, int>) public string CreateAuthorizationPolicyUrl(string url, Dictionary<string, int> authEntityId) Parameters url string authEntityId Dictionary<string, int> Returns string CreateAuthorizationPolicyUrl(string, int) [Obsolete(\"This method is obsolete. Use CreateAuthorizationPolicyUrl(string url, string entityName, int entityId) where entityName = EntityNames.Module instead.\", false)] public string CreateAuthorizationPolicyUrl(string url, int entityId) Parameters url string entityId int Returns string CreateAuthorizationPolicyUrl(string, string, int) public string CreateAuthorizationPolicyUrl(string url, string entityName, int entityId) Parameters url string entityName string entityId int Returns string DeleteAsync(string) protected Task DeleteAsync(string uri) Parameters uri string Returns Task GetAsync(string) protected Task GetAsync(string uri) Parameters uri string Returns Task GetByteArrayAsync(string) protected Task<byte[]> GetByteArrayAsync(string uri) Parameters uri string Returns Task<byte[]> GetHttpClient() public HttpClient GetHttpClient() Returns HttpClient GetJsonAsync<T>(string) protected Task<T> GetJsonAsync<T>(string uri) Parameters uri string Returns Task<T> Type Parameters T GetJsonAsync<T>(string, T) protected Task<T> GetJsonAsync<T>(string uri, T defaultResult) Parameters uri string defaultResult T Returns Task<T> Type Parameters T GetStringAsync(string) protected Task<string> GetStringAsync(string uri) Parameters uri string Returns Task<string> PostAsync(string) protected Task PostAsync(string uri) Parameters uri string Returns Task PostJsonAsync<T>(string, T) protected Task<T> PostJsonAsync<T>(string uri, T value) Parameters uri string value T Returns Task<T> Type Parameters T PostJsonAsync<TValue, TResult>(string, TValue) protected Task<TResult> PostJsonAsync<TValue, TResult>(string uri, TValue value) Parameters uri string value TValue Returns Task<TResult> Type Parameters TValue TResult PutAsync(string) protected Task PutAsync(string uri) Parameters uri string Returns Task PutJsonAsync<T>(string, T) protected Task<T> PutJsonAsync<T>(string uri, T value) Parameters uri string value T Returns Task<T> Type Parameters T PutJsonAsync<TValue, TResult>(string, TValue) protected Task<TResult> PutJsonAsync<TValue, TResult>(string uri, TValue value) Parameters uri string value TValue Returns Task<TResult> Type Parameters TValue TResult"
  },
  "api/Oqtane.Services.html": {
    "href": "api/Oqtane.Services.html",
    "title": "Namespace Oqtane.Services | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Services Use the Oqtane Services to retrieve or change information about the system or context. You will use this a lot. Classes RemoteServiceBase ServiceBase Interfaces IAliasService Service to retrieve and store Alias information. IClientStartup IDatabaseService Service to retrieve Database information. IFileService Service to get / create / upload / download files. IFolderService Service to get / create / modify Folder objects. IInstallationService Service to manage (install master database / upgrade version / etc.) the installation IJobLogService Service to read the job schedule log IJobService Service to manage jobs (Job) ILanguageService Service to manage Language entries ILocalizationService Service to retrieve localizations (Culture) ILogService Service to retrieve and store Log(int?, int?, int?, string, string, LogFunction, LogLevel, Exception, string, params object[]) entries IModuleDefinitionService Service to manage a ModuleDefinition IModuleService Service to retrieve and store modules (Module) INotificationService Service to store and retrieve notifications (Notification) IPackageService Service to manage packages (Package) IPageModuleService Service to store and retrieve a PageModule IPageService Services to store and retrieve a Page IProfileService Service to store and retrieve Profile entries IRoleService Service to manage Roles on a Site ISettingService Service to manage Settings ISiteService Service to store and retrieve Site entries ISiteTemplateService Service to retrieve SiteTemplate entries ISqlService Service to execute a SqlQuery against the backend database ISyncService Service to retrieve Sync information. ISystemService Service to retrieve and update system information. ITenantService Service to manage Tenants on the Oqtane installation. IThemeService Service to manage Theme entries IUrlMappingService Service to manage UrlMappings on a Site IUserRoleService Manage Roles assigned to a specific User IUserService Manage (get / update) user information IVisitorService Service to manage Visitors on a Site"
  },
  "api/Oqtane.Shared.AuthenticationProviderTypes.html": {
    "href": "api/Oqtane.Shared.AuthenticationProviderTypes.html",
    "title": "Class AuthenticationProviderTypes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AuthenticationProviderTypes Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class AuthenticationProviderTypes Inheritance object AuthenticationProviderTypes Fields OAuth2 public const string OAuth2 = \"oauth2\" Field Value string OpenIDConnect public const string OpenIDConnect = \"oidc\" Field Value string"
  },
  "api/Oqtane.Shared.Constants.html": {
    "href": "api/Oqtane.Shared.Constants.html",
    "title": "Class Constants | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Constants Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class Constants Inheritance object Constants Fields ActionToken public const string ActionToken = \"{Action}\" Field Value string AdminDashboardModule public const string AdminDashboardModule = \"Oqtane.Modules.Admin.Dashboard, Oqtane.Client\" Field Value string AdminPane [Obsolete(\"Use PaneNames.Admin\")] public const string AdminPane = \"Admin\" Field Value string AdminRole [Obsolete(\"Use the corresponding member from Oqtane.Shared.RoleNames\")] public const string AdminRole = \"Administrators\" Field Value string AllUsersRole [Obsolete(\"Use the corresponding member from Oqtane.Shared.RoleNames\")] public const string AllUsersRole = \"All Users\" Field Value string AntiForgeryTokenCookieName public static readonly string AntiForgeryTokenCookieName Field Value string AntiForgeryTokenHeaderName public static readonly string AntiForgeryTokenHeaderName Field Value string AuthenticationScheme public static readonly string AuthenticationScheme Field Value string ClientId public const string ClientId = \"Oqtane.Client\" Field Value string ContentUrl public const string ContentUrl = \"/api/file/download/\" Field Value string DataDirectory public const string DataDirectory = \"DataDirectory\" Field Value string DefaultAction public const string DefaultAction = \"Index\" Field Value string DefaultAdminContainer public const string DefaultAdminContainer = \"Oqtane.Themes.AdminContainer, Oqtane.Client\" Field Value string DefaultContainer public const string DefaultContainer = \"Oqtane.Themes.OqtaneTheme.Container, Oqtane.Client\" Field Value string DefaultCulture public static readonly string DefaultCulture Field Value string DefaultDBType public const string DefaultDBType = \"Oqtane.Database.SqlServer.SqlServerDatabase, Oqtane.Database.SqlServer\" Field Value string DefaultHostModuleTypes public static readonly string[] DefaultHostModuleTypes Field Value string[] DefaultLayout [Obsolete(\"DefaultLayout is deprecated\")] public const string DefaultLayout = \"\" Field Value string DefaultModuleActions public static readonly string[] DefaultModuleActions Field Value string[] DefaultModuleActionsTemplate public static readonly string DefaultModuleActionsTemplate Field Value string DefaultSite public const string DefaultSite = \"Default Site\" Field Value string DefaultSiteTemplate public const string DefaultSiteTemplate = \"Oqtane.SiteTemplates.DefaultSiteTemplate, Oqtane.Server\" Field Value string DefaultTheme public const string DefaultTheme = \"Oqtane.Themes.OqtaneTheme.Default, Oqtane.Client\" Field Value string DefaultVisitorFilter public static readonly string DefaultVisitorFilter Field Value string ErrorModule public const string ErrorModule = \"Oqtane.Modules.Admin.Error.{Action}, Oqtane.Client\" Field Value string FileUrl public const string FileUrl = \"/files/\" Field Value string HostRole [Obsolete(\"Use the corresponding member from Oqtane.Shared.RoleNames\")] public const string HostRole = \"Host Users\" Field Value string HostUser [Obsolete(\"Use UserNames.Host instead.\")] public const string HostUser = \"host\" Field Value string HttpContextAliasKey public static readonly string HttpContextAliasKey Field Value string HttpContextSiteSettingsKey public static readonly string HttpContextSiteSettingsKey Field Value string ImageFiles public const string ImageFiles = \"jpg,jpeg,jpe,gif,bmp,png,ico,webp\" Field Value string ImageUrl public const string ImageUrl = \"/api/file/image/\" Field Value string InvalidFileNameChars public static readonly char[] InvalidFileNameChars Field Value char[] InvalidFileNameEndingChars public static readonly string[] InvalidFileNameEndingChars Field Value string[] MasterTenant [Obsolete(\"Use TenantNames.Master instead\")] public const string MasterTenant = \"Master\" Field Value string MauiAliasPath public static readonly string MauiAliasPath Field Value string MauiCorsPolicy public const string MauiCorsPolicy = \"MauiCorsPolicy\" Field Value string MauiUserAgent public static readonly string MauiUserAgent Field Value string ModuleDelimiter public const string ModuleDelimiter = \"*\" Field Value string PackageId public const string PackageId = \"Oqtane.Framework\" Field Value string PackageRegistryUrl public const string PackageRegistryUrl = \"https://www.oqtane.net\" Field Value string PackagesFolder public const string PackagesFolder = \"Packages\" Field Value string PageManagementModule public const string PageManagementModule = \"Oqtane.Modules.Admin.Pages, Oqtane.Client\" Field Value string RegisteredRole [Obsolete(\"Use the corresponding member from Oqtane.Shared.RoleNames\")] public const string RegisteredRole = \"Registered Users\" Field Value string ReleaseVersions public const string ReleaseVersions = \"1.0.0,1.0.1,1.0.2,1.0.3,1.0.4,2.0.0,2.0.1,2.0.2,2.1.0,2.2.0,2.3.0,2.3.1,3.0.0,3.0.1,3.0.2,3.0.3,3.1.0,3.1.1,3.1.2,3.1.3,3.1.4,3.2.0,3.2.1,3.3.0,3.3.1,3.4.0,3.4.1,3.4.2,3.4.3,4.0.0,4.0.1,4.0.2,4.0.3,4.0.4,4.0.5,4.0.6,5.0.0,5.0.1,5.0.2,5.0.3,5.1.0,5.1.1,5.1.2\" Field Value string RequestVerificationToken public static readonly string RequestVerificationToken Field Value string ReservedDevices public const string ReservedDevices = \"CON,NUL,PRN,COM0,COM1,COM2,COM3,COM4,COM5,COM6,COM7,COM8,COM9,LPT0,LPT1,LPT2,LPT3,LPT4,LPT5,LPT6,LPT7,LPT8,LPT9,CONIN$,CONOUT$\" Field Value string ReservedRoutes public static readonly string[] ReservedRoutes Field Value string[] SatelliteAssemblyExtension public static readonly string SatelliteAssemblyExtension Field Value string UpdaterPackageId public const string UpdaterPackageId = \"Oqtane.Updater\" Field Value string UploadableFiles public const string UploadableFiles = \"jpg,jpeg,jpe,gif,bmp,png,ico,webp,mov,wmv,avi,mp4,mp3,doc,docx,xls,xlsx,ppt,pptx,pdf,txt,zip,nupkg,csv,json,xml,rss,css\" Field Value string UrlParametersDelimiter public const string UrlParametersDelimiter = \"!\" Field Value string UserFolderCapacity public const int UserFolderCapacity = 20 Field Value int Version public static readonly string Version Field Value string VisitorCookiePrefix public static readonly string VisitorCookiePrefix Field Value string"
  },
  "api/Oqtane.Shared.ControllerRoutes.html": {
    "href": "api/Oqtane.Shared.ControllerRoutes.html",
    "title": "Class ControllerRoutes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ControllerRoutes Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class ControllerRoutes Inheritance object ControllerRoutes Fields ApiRoute public const string ApiRoute = \"api/[controller]\" Field Value string Default public const string Default = \"{alias}/api/[controller]\" Field Value string"
  },
  "api/Oqtane.Shared.EntityNames.html": {
    "href": "api/Oqtane.Shared.EntityNames.html",
    "title": "Class EntityNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class EntityNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class EntityNames Inheritance object EntityNames Fields Alias public const string Alias = \"Alias\" Field Value string File public const string File = \"File\" Field Value string Folder public const string Folder = \"Folder\" Field Value string Host public const string Host = \"Host\" Field Value string Job public const string Job = \"Job\" Field Value string Language public const string Language = \"Language\" Field Value string Module public const string Module = \"Module\" Field Value string ModuleDefinition public const string ModuleDefinition = \"ModuleDefinition\" Field Value string Notification public const string Notification = \"Notification\" Field Value string Page public const string Page = \"Page\" Field Value string PageModule public const string PageModule = \"PageModule\" Field Value string Profile public const string Profile = \"Profile\" Field Value string Role public const string Role = \"Role\" Field Value string Setting public const string Setting = \"Setting\" Field Value string Site public const string Site = \"Site\" Field Value string Tenant public const string Tenant = \"Tenant\" Field Value string Theme public const string Theme = \"Theme\" Field Value string UrlMapping public const string UrlMapping = \"UrlMapping\" Field Value string User public const string User = \"User\" Field Value string UserRole public const string UserRole = \"UserRole\" Field Value string Visitor public const string Visitor = \"Visitor\" Field Value string"
  },
  "api/Oqtane.Shared.ExternalLoginStatus.html": {
    "href": "api/Oqtane.Shared.ExternalLoginStatus.html",
    "title": "Class ExternalLoginStatus | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ExternalLoginStatus Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class ExternalLoginStatus Inheritance object ExternalLoginStatus Fields AccessDenied public const string AccessDenied = \"AccessDenied\" Field Value string DuplicateEmail public const string DuplicateEmail = \"DuplicateEmail\" Field Value string MissingClaims public const string MissingClaims = \"MissingClaims\" Field Value string ProviderKeyMismatch public const string ProviderKeyMismatch = \"ProviderKeyMismatch\" Field Value string RemoteFailure public const string RemoteFailure = \"RemoteFailure\" Field Value string ReviewClaims public const string ReviewClaims = \"ReviewClaims\" Field Value string Success public const string Success = \"Success\" Field Value string UserDoesNotExist public const string UserDoesNotExist = \"UserDoesNotExist\" Field Value string UserNotCreated public const string UserNotCreated = \"UserNotCreated\" Field Value string VerificationRequired public const string VerificationRequired = \"VerificationRequired\" Field Value string"
  },
  "api/Oqtane.Shared.FolderTypes.html": {
    "href": "api/Oqtane.Shared.FolderTypes.html",
    "title": "Class FolderTypes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class FolderTypes Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class FolderTypes Inheritance object FolderTypes Fields Private public const string Private = \"Private\" Field Value string Public public const string Public = \"Public\" Field Value string"
  },
  "api/Oqtane.Shared.Icons.html": {
    "href": "api/Oqtane.Shared.Icons.html",
    "title": "Class Icons | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Icons Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public static class Icons Inheritance object Icons Fields AccountLogin public const string AccountLogin = \"oi oi-account-login\" Field Value string AccountLogout public const string AccountLogout = \"oi oi-account-logout\" Field Value string ActionRedo public const string ActionRedo = \"oi oi-action-redo\" Field Value string ActionUndo public const string ActionUndo = \"oi oi-action-undo\" Field Value string AlignCenter public const string AlignCenter = \"oi oi-align-center\" Field Value string AlignLeft public const string AlignLeft = \"oi oi-align-left\" Field Value string AlignRight public const string AlignRight = \"oi oi-align-right\" Field Value string Aperture public const string Aperture = \"oi oi-aperture\" Field Value string ArrowBottom public const string ArrowBottom = \"oi oi-arrow-bottom\" Field Value string ArrowCircleBottom public const string ArrowCircleBottom = \"oi oi-arrow-circle-bottom\" Field Value string ArrowCircleLeft public const string ArrowCircleLeft = \"oi oi-arrow-circle-left\" Field Value string ArrowCircleRight public const string ArrowCircleRight = \"oi oi-arrow-circle-right\" Field Value string ArrowCircleTop public const string ArrowCircleTop = \"oi oi-arrow-circle-top\" Field Value string ArrowLeft public const string ArrowLeft = \"oi oi-arrow-left\" Field Value string ArrowRight public const string ArrowRight = \"oi oi-arrow-right\" Field Value string ArrowThickBottom public const string ArrowThickBottom = \"oi oi-arrow-thick-bottom\" Field Value string ArrowThickLeft public const string ArrowThickLeft = \"oi oi-arrow-thick-left\" Field Value string ArrowThickRight public const string ArrowThickRight = \"oi oi-arrow-thick-right\" Field Value string ArrowThickTop public const string ArrowThickTop = \"oi oi-arrow-thick-top\" Field Value string ArrowTop public const string ArrowTop = \"oi oi-arrow-top\" Field Value string Audio public const string Audio = \"oi oi-audio\" Field Value string AudioSpectrum public const string AudioSpectrum = \"oi oi-audio-spectrum\" Field Value string Badge public const string Badge = \"oi oi-badge\" Field Value string Ban public const string Ban = \"oi oi-ban\" Field Value string BarChart public const string BarChart = \"oi oi-bar-chart\" Field Value string Basket public const string Basket = \"oi oi-basket\" Field Value string BatteryEmpty public const string BatteryEmpty = \"oi oi-battery-empty\" Field Value string BatteryFull public const string BatteryFull = \"oi oi-battery-full\" Field Value string Beaker public const string Beaker = \"oi oi-beaker\" Field Value string Bell public const string Bell = \"oi oi-bell\" Field Value string Bluetooth public const string Bluetooth = \"oi oi-bluetooth\" Field Value string Bold public const string Bold = \"oi oi-bold\" Field Value string Bolt public const string Bolt = \"oi oi-bolt\" Field Value string Book public const string Book = \"oi oi-book\" Field Value string Bookmark public const string Bookmark = \"oi oi-bookmark\" Field Value string Box public const string Box = \"oi oi-box\" Field Value string Briefcase public const string Briefcase = \"oi oi-briefcase\" Field Value string BritishPound public const string BritishPound = \"oi oi-british-pound\" Field Value string Browser public const string Browser = \"oi oi-browser\" Field Value string Brush public const string Brush = \"oi oi-brush\" Field Value string Bug public const string Bug = \"oi oi-bug\" Field Value string Bullhorn public const string Bullhorn = \"oi oi-bullhorn\" Field Value string Calculator public const string Calculator = \"oi oi-calculator\" Field Value string Calendar public const string Calendar = \"oi oi-calendar\" Field Value string CameraSlr public const string CameraSlr = \"oi oi-camera-slr\" Field Value string CaretBottom public const string CaretBottom = \"oi oi-caret-bottom\" Field Value string CaretLeft public const string CaretLeft = \"oi oi-caret-left\" Field Value string CaretRight public const string CaretRight = \"oi oi-caret-right\" Field Value string CaretTop public const string CaretTop = \"oi oi-caret-top\" Field Value string Cart public const string Cart = \"oi oi-cart\" Field Value string Chat public const string Chat = \"oi oi-chat\" Field Value string Check public const string Check = \"oi oi-check\" Field Value string ChevronBottom public const string ChevronBottom = \"oi oi-chevron-bottom\" Field Value string ChevronLeft public const string ChevronLeft = \"oi oi-chevron-left\" Field Value string ChevronRight public const string ChevronRight = \"oi oi-chevron-right\" Field Value string ChevronTop public const string ChevronTop = \"oi oi-chevron-top\" Field Value string CircleCheck public const string CircleCheck = \"oi oi-circle-check\" Field Value string CircleX public const string CircleX = \"oi oi-circle-x\" Field Value string Clipboard public const string Clipboard = \"oi oi-clipboard\" Field Value string Clock public const string Clock = \"oi oi-clock\" Field Value string Cloud public const string Cloud = \"oi oi-cloud\" Field Value string CloudDownload public const string CloudDownload = \"oi oi-cloud-download\" Field Value string CloudUpload public const string CloudUpload = \"oi oi-cloud-upload\" Field Value string Cloudy public const string Cloudy = \"oi oi-cloudy\" Field Value string Code public const string Code = \"oi oi-code\" Field Value string Cog public const string Cog = \"oi oi-cog\" Field Value string CollapseDown public const string CollapseDown = \"oi oi-collapse-down\" Field Value string CollapseLeft public const string CollapseLeft = \"oi oi-collapse-left\" Field Value string CollapseRight public const string CollapseRight = \"oi oi-collapse-right\" Field Value string CollapseUp public const string CollapseUp = \"oi oi-collapse-up\" Field Value string Command public const string Command = \"oi oi-command\" Field Value string CommentSquare public const string CommentSquare = \"oi oi-comment-square\" Field Value string Compass public const string Compass = \"oi oi-compass\" Field Value string Contrast public const string Contrast = \"oi oi-contrast\" Field Value string Copywriting public const string Copywriting = \"oi oi-copywriting\" Field Value string CreditCard public const string CreditCard = \"oi oi-credit-card\" Field Value string Crop public const string Crop = \"oi oi-crop\" Field Value string Dashboard public const string Dashboard = \"oi oi-dashboard\" Field Value string DataTransferDownload public const string DataTransferDownload = \"oi oi-data-transfer-download\" Field Value string DataTransferUpload public const string DataTransferUpload = \"oi oi-data-transfer-upload\" Field Value string Delete public const string Delete = \"oi oi-delete\" Field Value string Dial public const string Dial = \"oi oi-dial\" Field Value string Document public const string Document = \"oi oi-document\" Field Value string Dollar public const string Dollar = \"oi oi-dollar\" Field Value string DoubleQuoteSansLeft public const string DoubleQuoteSansLeft = \"oi oi-double-quote-sans-left\" Field Value string DoubleQuoteSansRight public const string DoubleQuoteSansRight = \"oi oi-double-quote-sans-right\" Field Value string DoubleQuoteSerifLeft public const string DoubleQuoteSerifLeft = \"oi oi-double-quote-serif-left\" Field Value string DoubleQuoteSerifRight public const string DoubleQuoteSerifRight = \"oi oi-double-quote-serif-right\" Field Value string Droplet public const string Droplet = \"oi oi-droplet\" Field Value string Eject public const string Eject = \"oi oi-eject\" Field Value string Elevator public const string Elevator = \"oi oi-elevator\" Field Value string Ellipses public const string Ellipses = \"oi oi-ellipses\" Field Value string EnvelopeClosed public const string EnvelopeClosed = \"oi oi-envelope-closed\" Field Value string EnvelopeOpen public const string EnvelopeOpen = \"oi oi-envelope-open\" Field Value string Euro public const string Euro = \"oi oi-euro\" Field Value string Excerpt public const string Excerpt = \"oi oi-excerpt\" Field Value string ExpandDown public const string ExpandDown = \"oi oi-expand-down\" Field Value string ExpandLeft public const string ExpandLeft = \"oi oi-expand-left\" Field Value string ExpandRight public const string ExpandRight = \"oi oi-expand-right\" Field Value string ExpandUp public const string ExpandUp = \"oi oi-expand-up\" Field Value string ExternalLink public const string ExternalLink = \"oi oi-external-link\" Field Value string Eye public const string Eye = \"oi oi-eye\" Field Value string Eyedropper public const string Eyedropper = \"oi oi-eyedropper\" Field Value string File public const string File = \"oi oi-file\" Field Value string Fire public const string Fire = \"oi oi-fire\" Field Value string Flag public const string Flag = \"oi oi-flag\" Field Value string Flash public const string Flash = \"oi oi-flash\" Field Value string Folder public const string Folder = \"oi oi-folder\" Field Value string Fork public const string Fork = \"oi oi-fork\" Field Value string FullscreenEnter public const string FullscreenEnter = \"oi oi-fullscreen-enter\" Field Value string FullscreenExit public const string FullscreenExit = \"oi oi-fullscreen-exit\" Field Value string Globe public const string Globe = \"oi oi-globe\" Field Value string Graph public const string Graph = \"oi oi-graph\" Field Value string GridFourUp public const string GridFourUp = \"oi oi-grid-four-up\" Field Value string GridThreeUp public const string GridThreeUp = \"oi oi-grid-three-up\" Field Value string GridTwoUp public const string GridTwoUp = \"oi oi-grid-two-up\" Field Value string HardDrive public const string HardDrive = \"oi oi-hard-drive\" Field Value string Header public const string Header = \"oi oi-header\" Field Value string Headphones public const string Headphones = \"oi oi-headphones\" Field Value string Heart public const string Heart = \"oi oi-heart\" Field Value string Home public const string Home = \"oi oi-home\" Field Value string Image public const string Image = \"oi oi-image\" Field Value string Inbox public const string Inbox = \"oi oi-inbox\" Field Value string Infinity public const string Infinity = \"oi oi-infinity\" Field Value string Info public const string Info = \"oi oi-info\" Field Value string Italic public const string Italic = \"oi oi-italic\" Field Value string JustifyCenter public const string JustifyCenter = \"oi oi-justify-center\" Field Value string JustifyLeft public const string JustifyLeft = \"oi oi-justify-left\" Field Value string JustifyRight public const string JustifyRight = \"oi oi-justify-right\" Field Value string Key public const string Key = \"oi oi-key\" Field Value string Laptop public const string Laptop = \"oi oi-laptop\" Field Value string Layers public const string Layers = \"oi oi-layers\" Field Value string Lightbulb public const string Lightbulb = \"oi oi-lightbulb\" Field Value string LinkBroken public const string LinkBroken = \"oi oi-link-broken\" Field Value string LinkIntact public const string LinkIntact = \"oi oi-link-intact\" Field Value string List public const string List = \"oi oi-list\" Field Value string ListRich public const string ListRich = \"oi oi-list-rich\" Field Value string Location public const string Location = \"oi oi-location\" Field Value string LockLocked public const string LockLocked = \"oi oi-lock-locked\" Field Value string LockUnlocked public const string LockUnlocked = \"oi oi-lock-unlocked\" Field Value string Loop public const string Loop = \"oi oi-loop\" Field Value string LoopCircular public const string LoopCircular = \"oi oi-loop-circular\" Field Value string LoopSquare public const string LoopSquare = \"oi oi-loop-square\" Field Value string MagnifyingGlass public const string MagnifyingGlass = \"oi oi-magnifying-glass\" Field Value string Map public const string Map = \"oi oi-map\" Field Value string MapMarker public const string MapMarker = \"oi oi-map-marker\" Field Value string MediaPause public const string MediaPause = \"oi oi-media-pause\" Field Value string MediaPlay public const string MediaPlay = \"oi oi-media-play\" Field Value string MediaRecord public const string MediaRecord = \"oi oi-media-record\" Field Value string MediaSkipBackward public const string MediaSkipBackward = \"oi oi-media-skip-backward\" Field Value string MediaSkipForward public const string MediaSkipForward = \"oi oi-media-skip-forward\" Field Value string MediaStepBackward public const string MediaStepBackward = \"oi oi-media-step-backward\" Field Value string MediaStepForward public const string MediaStepForward = \"oi oi-media-step-forward\" Field Value string MediaStop public const string MediaStop = \"oi oi-media-stop\" Field Value string MedicalCross public const string MedicalCross = \"oi oi-medical-cross\" Field Value string Menu public const string Menu = \"oi oi-menu\" Field Value string Microphone public const string Microphone = \"oi oi-microphone\" Field Value string Minus public const string Minus = \"oi oi-minus\" Field Value string Monitor public const string Monitor = \"oi oi-monitor\" Field Value string Moon public const string Moon = \"oi oi-moon\" Field Value string Move public const string Move = \"oi oi-move\" Field Value string MusicalNote public const string MusicalNote = \"oi oi-musical-note\" Field Value string Paperclip public const string Paperclip = \"oi oi-paperclip\" Field Value string Pencil public const string Pencil = \"oi oi-pencil\" Field Value string People public const string People = \"oi oi-people\" Field Value string Person public const string Person = \"oi oi-person\" Field Value string Phone public const string Phone = \"oi oi-phone\" Field Value string PieChart public const string PieChart = \"oi oi-pie-chart\" Field Value string Pin public const string Pin = \"oi oi-pin\" Field Value string PlayCircle public const string PlayCircle = \"oi oi-play-circle\" Field Value string Plus public const string Plus = \"oi oi-plus\" Field Value string PowerStandby public const string PowerStandby = \"oi oi-power-standby\" Field Value string Print public const string Print = \"oi oi-print\" Field Value string Project public const string Project = \"oi oi-project\" Field Value string Pulse public const string Pulse = \"oi oi-pulse\" Field Value string PuzzlePiece public const string PuzzlePiece = \"oi oi-puzzle-piece\" Field Value string QuestionMark public const string QuestionMark = \"oi oi-question-mark\" Field Value string Rain public const string Rain = \"oi oi-rain\" Field Value string Random public const string Random = \"oi oi-random\" Field Value string Reload public const string Reload = \"oi oi-reload\" Field Value string ResizeBoth public const string ResizeBoth = \"oi oi-resize-both\" Field Value string ResizeHeight public const string ResizeHeight = \"oi oi-resize-height\" Field Value string ResizeWidth public const string ResizeWidth = \"oi oi-resize-width\" Field Value string Rss public const string Rss = \"oi oi-rss\" Field Value string RssAlt public const string RssAlt = \"oi oi-rss-alt\" Field Value string Script public const string Script = \"oi oi-script\" Field Value string Share public const string Share = \"oi oi-share\" Field Value string ShareBoxed public const string ShareBoxed = \"oi oi-share-boxed\" Field Value string Shield public const string Shield = \"oi oi-shield\" Field Value string Signal public const string Signal = \"oi oi-signal\" Field Value string Signpost public const string Signpost = \"oi oi-signpost\" Field Value string SortAscending public const string SortAscending = \"oi oi-sort-ascending\" Field Value string SortDescending public const string SortDescending = \"oi oi-sort-descending\" Field Value string Spreadsheet public const string Spreadsheet = \"oi oi-spreadsheet\" Field Value string Star public const string Star = \"oi oi-star\" Field Value string Sun public const string Sun = \"oi oi-sun\" Field Value string Tablet public const string Tablet = \"oi oi-tablet\" Field Value string Tag public const string Tag = \"oi oi-tag\" Field Value string Tags public const string Tags = \"oi oi-tags\" Field Value string Target public const string Target = \"oi oi-target\" Field Value string Task public const string Task = \"oi oi-task\" Field Value string Terminal public const string Terminal = \"oi oi-terminal\" Field Value string Text public const string Text = \"oi oi-text\" Field Value string ThumbDown public const string ThumbDown = \"oi oi-thumb-down\" Field Value string ThumbUp public const string ThumbUp = \"oi oi-thumb-up\" Field Value string Timer public const string Timer = \"oi oi-timer\" Field Value string Transfer public const string Transfer = \"oi oi-transfer\" Field Value string Trash public const string Trash = \"oi oi-trash\" Field Value string Underline public const string Underline = \"oi oi-underline\" Field Value string VerticalAlignBottom public const string VerticalAlignBottom = \"oi oi-vertical-align-bottom\" Field Value string VerticalAlignCenter public const string VerticalAlignCenter = \"oi oi-vertical-align-center\" Field Value string VerticalAlignTop public const string VerticalAlignTop = \"oi oi-vertical-align-top\" Field Value string Video public const string Video = \"oi oi-video\" Field Value string VolumeHigh public const string VolumeHigh = \"oi oi-volume-high\" Field Value string VolumeLow public const string VolumeLow = \"oi oi-volume-low\" Field Value string VolumeOff public const string VolumeOff = \"oi oi-volume-off\" Field Value string Warning public const string Warning = \"oi oi-warning\" Field Value string Wifi public const string Wifi = \"oi oi-wifi\" Field Value string Wrench public const string Wrench = \"oi oi-wrench\" Field Value string X public const string X = \"oi oi-x\" Field Value string Yen public const string Yen = \"oi oi-yen\" Field Value string ZoomIn public const string ZoomIn = \"oi oi-zoom-in\" Field Value string ZoomOut public const string ZoomOut = \"oi oi-zoom-out\" Field Value string"
  },
  "api/Oqtane.Shared.InstallConfig.html": {
    "href": "api/Oqtane.Shared.InstallConfig.html",
    "title": "Class InstallConfig | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InstallConfig Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class InstallConfig Inheritance object InstallConfig Properties Aliases public string Aliases { get; set; } Property Value string ConnectionString public string ConnectionString { get; set; } Property Value string DatabaseType public string DatabaseType { get; set; } Property Value string DefaultAdminContainer public string DefaultAdminContainer { get; set; } Property Value string DefaultContainer public string DefaultContainer { get; set; } Property Value string DefaultTheme public string DefaultTheme { get; set; } Property Value string HostEmail public string HostEmail { get; set; } Property Value string HostName public string HostName { get; set; } Property Value string HostPassword public string HostPassword { get; set; } Property Value string HostUsername public string HostUsername { get; set; } Property Value string IsNewTenant public bool IsNewTenant { get; set; } Property Value bool Register public bool Register { get; set; } Property Value bool RenderMode public string RenderMode { get; set; } Property Value string Runtime public string Runtime { get; set; } Property Value string SiteName public string SiteName { get; set; } Property Value string SiteTemplate public string SiteTemplate { get; set; } Property Value string TenantName public string TenantName { get; set; } Property Value string"
  },
  "api/Oqtane.Shared.LogLevel.html": {
    "href": "api/Oqtane.Shared.LogLevel.html",
    "title": "Enum LogLevel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum LogLevel Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum LogLevel Fields Critical = 5 Debug = 1 Error = 4 Information = 2 None = 6 Trace = 0 Warning = 3"
  },
  "api/Oqtane.Shared.OqtaneIgnoreAttribute.html": {
    "href": "api/Oqtane.Shared.OqtaneIgnoreAttribute.html",
    "title": "Class OqtaneIgnoreAttribute | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class OqtaneIgnoreAttribute Namespace Oqtane.Shared Assembly Oqtane.Shared.dll [AttributeUsage(AttributeTargets.Class)] public class OqtaneIgnoreAttribute : Attribute Inheritance object Attribute OqtaneIgnoreAttribute"
  },
  "api/Oqtane.Shared.PaneNames.html": {
    "href": "api/Oqtane.Shared.PaneNames.html",
    "title": "Class PaneNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PaneNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class PaneNames Inheritance object PaneNames Fields Admin public const string Admin = \"Admin\" Field Value string Default public const string Default = \"Default\" Field Value string"
  },
  "api/Oqtane.Shared.PermissionNames.html": {
    "href": "api/Oqtane.Shared.PermissionNames.html",
    "title": "Class PermissionNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PermissionNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class PermissionNames Inheritance object PermissionNames Fields Browse public const string Browse = \"Browse\" Field Value string Edit public const string Edit = \"Edit\" Field Value string Read public const string Read = \"Read\" Field Value string Utilize public const string Utilize = \"Utilize\" Field Value string View public const string View = \"View\" Field Value string Write public const string Write = \"Write\" Field Value string"
  },
  "api/Oqtane.Shared.PolicyNames.html": {
    "href": "api/Oqtane.Shared.PolicyNames.html",
    "title": "Class PolicyNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PolicyNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class PolicyNames Inheritance object PolicyNames Fields EditModule public const string EditModule = \"EditModule\" Field Value string ViewModule public const string ViewModule = \"ViewModule\" Field Value string"
  },
  "api/Oqtane.Shared.PropertyDictionary.html": {
    "href": "api/Oqtane.Shared.PropertyDictionary.html",
    "title": "Class PropertyDictionary | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PropertyDictionary Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class PropertyDictionary : DynamicObject Inheritance object DynamicObject PropertyDictionary Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[string] Gets or sets the element with the specified key. public object this[string key] { get; set; } Parameters key string The key of the element to get or set. Property Value object The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<string> Keys { get; } Property Value ICollection<string> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<object> Values { get; } Property Value ICollection<object> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<string, object>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<string, object> item) Parameters item KeyValuePair<string, object> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(string, object) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(string key, object value) Parameters key string The object to use as the key of the element to add. value object The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<string, object>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<string, object> item) Parameters item KeyValuePair<string, object> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(string) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(string key) Parameters key string The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<string, object>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex) Parameters array KeyValuePair<string, object>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<string, object>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, object>> An enumerator that can be used to iterate through the collection. OnPropertyChanged(string) protected virtual void OnPropertyChanged(string propertyName = null) Parameters propertyName string Remove(KeyValuePair<string, object>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<string, object> item) Parameters item KeyValuePair<string, object> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(string) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(string key) Parameters key string The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetMember(GetMemberBinder, out object) Provides the implementation for operations that get member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property. public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters binder GetMemberBinder Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns \"SampleProperty\". The binder.IgnoreCase property specifies whether the member name is case-sensitive. result object The result of the get operation. For example, if the method is called for a property, you can assign the property value to result. Returns bool true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.) TryGetValue(string, out object) Gets the value associated with the specified key. public bool TryGetValue(string key, out object value) Parameters key string The key whose value to get. value object When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null. TrySetMember(SetMemberBinder, object) Provides the implementation for operations that set member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as setting a value for a property. public override bool TrySetMember(SetMemberBinder binder, object value) Parameters binder SetMemberBinder Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = \"Test\", where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns \"SampleProperty\". The binder.IgnoreCase property specifies whether the member name is case-sensitive. value object The value to set to the member. For example, for sampleObject.SampleProperty = \"Test\", where sampleObject is an instance of the class derived from the DynamicObject class, the value is \"Test\". Returns bool true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.) Events PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/Oqtane.Shared.RenderModes.html": {
    "href": "api/Oqtane.Shared.RenderModes.html",
    "title": "Class RenderModes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RenderModes Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class RenderModes Inheritance object RenderModes Fields Headless public const string Headless = \"Headless\" Field Value string Interactive public const string Interactive = \"Interactive\" Field Value string Static public const string Static = \"Static\" Field Value string"
  },
  "api/Oqtane.Shared.ResourceDeclaration.html": {
    "href": "api/Oqtane.Shared.ResourceDeclaration.html",
    "title": "Enum ResourceDeclaration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum ResourceDeclaration Namespace Oqtane.Shared Assembly Oqtane.Shared.dll [Obsolete(\"ResourceDeclaration is deprecated\", false)] public enum ResourceDeclaration Fields Global = 1 Local = 0"
  },
  "api/Oqtane.Shared.ResourceLevel.html": {
    "href": "api/Oqtane.Shared.ResourceLevel.html",
    "title": "Enum ResourceLevel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum ResourceLevel Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum ResourceLevel Fields Module = 3 Page = 2 Site = 1 Undefined = 0"
  },
  "api/Oqtane.Shared.ResourceLocation.html": {
    "href": "api/Oqtane.Shared.ResourceLocation.html",
    "title": "Enum ResourceLocation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum ResourceLocation Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum ResourceLocation Fields Body = 1 Head = 0"
  },
  "api/Oqtane.Shared.ResourceType.html": {
    "href": "api/Oqtane.Shared.ResourceType.html",
    "title": "Enum ResourceType | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum ResourceType Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum ResourceType Fields Script = 1 Stylesheet = 0"
  },
  "api/Oqtane.Shared.RoleNames.html": {
    "href": "api/Oqtane.Shared.RoleNames.html",
    "title": "Class RoleNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RoleNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class RoleNames Inheritance object RoleNames Fields Admin public const string Admin = \"Administrators\" Field Value string Everyone public const string Everyone = \"All Users\" Field Value string Host public const string Host = \"Host Users\" Field Value string Registered public const string Registered = \"Registered Users\" Field Value string Unauthenticated public const string Unauthenticated = \"Unauthenticated Users\" Field Value string"
  },
  "api/Oqtane.Shared.Runtime.html": {
    "href": "api/Oqtane.Shared.Runtime.html",
    "title": "Enum Runtime | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum Runtime Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum Runtime Fields Auto = 2 Hybrid = 3 Server = 0 WebAssembly = 1"
  },
  "api/Oqtane.Shared.Runtimes.html": {
    "href": "api/Oqtane.Shared.Runtimes.html",
    "title": "Class Runtimes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Runtimes Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class Runtimes Inheritance object Runtimes Fields Auto public const string Auto = \"Auto\" Field Value string Hybrid public const string Hybrid = \"Hybrid\" Field Value string Server public const string Server = \"Server\" Field Value string WebAssembly public const string WebAssembly = \"WebAssembly\" Field Value string"
  },
  "api/Oqtane.Shared.SecurityAccessLevel.html": {
    "href": "api/Oqtane.Shared.SecurityAccessLevel.html",
    "title": "Enum SecurityAccessLevel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum SecurityAccessLevel Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public enum SecurityAccessLevel Fields Admin = 3 Anonymous = 0 Edit = 2 Host = 4 View = 1"
  },
  "api/Oqtane.Shared.ServiceActivator.html": {
    "href": "api/Oqtane.Shared.ServiceActivator.html",
    "title": "Class ServiceActivator | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ServiceActivator Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public static class ServiceActivator Inheritance object ServiceActivator Methods Configure(IServiceProvider) public static void Configure(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider GetScope(IServiceProvider) public static IServiceScope GetScope(IServiceProvider serviceProvider = null) Parameters serviceProvider IServiceProvider Returns IServiceScope"
  },
  "api/Oqtane.Shared.SettingKeys.html": {
    "href": "api/Oqtane.Shared.SettingKeys.html",
    "title": "Class SettingKeys | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SettingKeys Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public static class SettingKeys Inheritance object SettingKeys Fields AvailableDatabasesSection public const string AvailableDatabasesSection = \"AvailableDatabases\" Field Value string ConnectionStringKey public const string ConnectionStringKey = \"DefaultConnection\" Field Value string ConnectionStringsSection public const string ConnectionStringsSection = \"ConnectionStrings\" Field Value string DatabaseSection public const string DatabaseSection = \"Database\" Field Value string DatabaseTypeKey public const string DatabaseTypeKey = \"DefaultDBType\" Field Value string DefaultAliasKey public const string DefaultAliasKey = \"DefaultAlias\" Field Value string DefaultContainerKey public const string DefaultContainerKey = \"DefaultContainer\" Field Value string DefaultThemeKey public const string DefaultThemeKey = \"DefaultTheme\" Field Value string HostEmailKey public const string HostEmailKey = \"HostEmail\" Field Value string HostNameKey public const string HostNameKey = \"HostName\" Field Value string HostPasswordKey public const string HostPasswordKey = \"HostPassword\" Field Value string HostUsernameKey public const string HostUsernameKey = \"HostUsername\" Field Value string InstallationSection public const string InstallationSection = \"Installation\" Field Value string SiteTemplateKey public const string SiteTemplateKey = \"SiteTemplate\" Field Value string TestModeKey public const string TestModeKey = \"TestMode\" Field Value string"
  },
  "api/Oqtane.Shared.SiteState.html": {
    "href": "api/Oqtane.Shared.SiteState.html",
    "title": "Class SiteState | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteState Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class SiteState Inheritance object SiteState Properties Alias public Alias Alias { get; set; } Property Value Alias AntiForgeryToken public string AntiForgeryToken { get; set; } Property Value string AuthorizationToken public string AuthorizationToken { get; set; } Property Value string IsPrerendering public bool IsPrerendering { get; set; } Property Value bool Platform public string Platform { get; set; } Property Value string Properties public dynamic Properties { get; } Property Value dynamic RemoteIPAddress public string RemoteIPAddress { get; set; } Property Value string Methods AppendHeadContent(string) public void AppendHeadContent(string content) Parameters content string Hydrate(SiteState) public void Hydrate(SiteState siteState) Parameters siteState SiteState"
  },
  "api/Oqtane.Shared.SyncEventActions.html": {
    "href": "api/Oqtane.Shared.SyncEventActions.html",
    "title": "Class SyncEventActions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SyncEventActions Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class SyncEventActions Inheritance object SyncEventActions Fields Create public const string Create = \"Create\" Field Value string Delete public const string Delete = \"Delete\" Field Value string Refresh public const string Refresh = \"Refresh\" Field Value string Reload public const string Reload = \"Reload\" Field Value string Update public const string Update = \"Update\" Field Value string"
  },
  "api/Oqtane.Shared.TenantNames.html": {
    "href": "api/Oqtane.Shared.TenantNames.html",
    "title": "Class TenantNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class TenantNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class TenantNames Inheritance object TenantNames Fields Master public const string Master = \"Master\" Field Value string"
  },
  "api/Oqtane.Shared.UserNames.html": {
    "href": "api/Oqtane.Shared.UserNames.html",
    "title": "Class UserNames | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserNames Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public class UserNames Inheritance object UserNames Fields Host public const string Host = \"host\" Field Value string"
  },
  "api/Oqtane.Shared.Utilities.html": {
    "href": "api/Oqtane.Shared.Utilities.html",
    "title": "Class Utilities | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Utilities Namespace Oqtane.Shared Assembly Oqtane.Shared.dll public static class Utilities Inheritance object Utilities Methods AddUrlParameters(params object[]) public static string AddUrlParameters(params object[] parameters) Parameters parameters object[] Returns string ContentUrl(Alias, int) [Obsolete(\"ContentUrl(Alias alias, int fileId) is deprecated. Use FileUrl(Alias alias, int fileId) instead.\", false)] public static string ContentUrl(Alias alias, int fileId) Parameters alias Alias fileId int Returns string ContentUrl(Alias, int, bool) [Obsolete(\"ContentUrl(Alias alias, int fileId, bool asAttachment) is deprecated. Use FileUrl(Alias alias, int fileId, bool download) instead.\", false)] public static string ContentUrl(Alias alias, int fileId, bool asAttachment) Parameters alias Alias fileId int asAttachment bool Returns string CreateQueryString(Dictionary<string, string>) public static string CreateQueryString(Dictionary<string, string> parameters) Parameters parameters Dictionary<string, string> Returns string EditUrl(string, string, int, string, string) public static string EditUrl(string alias, string path, int moduleid, string action, string parameters) Parameters alias string path string moduleid int action string parameters string Returns string FileUrl(Alias, int) public static string FileUrl(Alias alias, int fileid) Parameters alias Alias fileid int Returns string FileUrl(Alias, int, bool) public static string FileUrl(Alias alias, int fileid, bool download) Parameters alias Alias fileid int download bool Returns string FileUrl(Alias, string, string) public static string FileUrl(Alias alias, string folderpath, string filename) Parameters alias Alias folderpath string filename string Returns string FileUrl(Alias, string, string, bool) public static string FileUrl(Alias alias, string folderpath, string filename, bool download) Parameters alias Alias folderpath string filename string download bool Returns string FormatContent(string, Alias, string) public static string FormatContent(string content, Alias alias, string operation) Parameters content string alias Alias operation string Returns string GetAssemblyName(string) public static string GetAssemblyName(string fullyqualifiedtypename) Parameters fullyqualifiedtypename string Returns string GetFriendlyUrl(string) public static string GetFriendlyUrl(string url) Parameters url string Returns string GetFullTypeName(string) public static string GetFullTypeName(string fullyqualifiedtypename) Parameters fullyqualifiedtypename string Returns string GetTypeName(string) public static string GetTypeName(string fullyqualifiedtypename) Parameters fullyqualifiedtypename string Returns string GetTypeNameLastSegment(string, int) public static string GetTypeNameLastSegment(string typename, int segment) Parameters typename string segment int Returns string ImageUrl(Alias, int, int, int, string) public static string ImageUrl(Alias alias, int fileId, int width, int height, string mode) Parameters alias Alias fileId int width int height int mode string Returns string ImageUrl(Alias, int, int, int, string, string, string, int, bool) public static string ImageUrl(Alias alias, int fileId, int width, int height, string mode, string position, string background, int rotate, bool recreate) Parameters alias Alias fileId int width int height int mode string position string background string rotate int recreate bool Returns string IsFileValid(File) public static bool IsFileValid(this File file) Parameters file File Returns bool IsPageModuleVisible(DateTime?, DateTime?) public static bool IsPageModuleVisible(DateTime? effectiveDate, DateTime? expiryDate) Parameters effectiveDate DateTime? expiryDate DateTime? Returns bool IsPathOrFileValid(string) public static bool IsPathOrFileValid(this string name) Parameters name string Returns bool IsPathValid(Folder) public static bool IsPathValid(this Folder folder) Parameters folder Folder Returns bool IsValidEmail(string) public static bool IsValidEmail(string email) Parameters email string Returns bool LocalDateAndTimeAsUtc(DateTime?, DateTime?, TimeZoneInfo) public static DateTime? LocalDateAndTimeAsUtc(DateTime? date, DateTime? time, TimeZoneInfo localTimeZone = null) Parameters date DateTime? time DateTime? localTimeZone TimeZoneInfo Returns DateTime? LocalDateAndTimeAsUtc(DateTime?, string, TimeZoneInfo) public static DateTime? LocalDateAndTimeAsUtc(DateTime? date, string time, TimeZoneInfo localTimeZone = null) Parameters date DateTime? time string localTimeZone TimeZoneInfo Returns DateTime? LocalDateAndTimeAsUtc(DateTime?, TimeZoneInfo) public static DateTime? LocalDateAndTimeAsUtc(DateTime? date, TimeZoneInfo localTimeZone = null) Parameters date DateTime? localTimeZone TimeZoneInfo Returns DateTime? LogMessage(object, string) public static string LogMessage(object @class, string message) Parameters class object message string Returns string NavigateUrl(string, string, string) public static string NavigateUrl(string alias, string path, string parameters) Parameters alias string path string parameters string Returns string ParseParameters(string) public static (string UrlParameters, string Querystring, string Fragment) ParseParameters(string parameters) Parameters parameters string Returns (string UrlParameters, string Querystring, string Fragment) ParseQueryString(string) public static Dictionary<string, string> ParseQueryString(string query) Parameters query string Returns Dictionary<string, string> PathCombine(params string[]) public static string PathCombine(params string[] segments) Parameters segments string[] Returns string TenantUrl(Alias, string) public static string TenantUrl(Alias alias, string url) Parameters alias Alias url string Returns string ToModuleDefinitionName(Type) public static string ToModuleDefinitionName(this Type type) Parameters type Type Returns string TryGetQueryValue(Uri, string, out string, string) public static bool TryGetQueryValue(this Uri uri, string key, out string value, string defaultValue = null) Parameters uri Uri key string value string defaultValue string Returns bool TryGetQueryValueInt(Uri, string, out int, int) public static bool TryGetQueryValueInt(this Uri uri, string key, out int value, int defaultValue = 0) Parameters uri Uri key string value int defaultValue int Returns bool UrlCombine(params string[]) public static string UrlCombine(params string[] segments) Parameters segments string[] Returns string UtcAsLocalDate(DateTime?, TimeZoneInfo) public static DateTime? UtcAsLocalDate(DateTime? dateTime, TimeZoneInfo timeZone = null) Parameters dateTime DateTime? timeZone TimeZoneInfo Returns DateTime? UtcAsLocalDateAndTime(DateTime?, TimeZoneInfo) public static (DateTime? date, string time) UtcAsLocalDateAndTime(DateTime? dateTime, TimeZoneInfo timeZone = null) Parameters dateTime DateTime? timeZone TimeZoneInfo Returns (DateTime? date, string time) UtcAsLocalDateTime(DateTime?, TimeZoneInfo) public static DateTime? UtcAsLocalDateTime(DateTime? dateTime, TimeZoneInfo timeZone = null) Parameters dateTime DateTime? timeZone TimeZoneInfo Returns DateTime? ValidateEffectiveExpiryDates(DateTime?, DateTime?) public static bool ValidateEffectiveExpiryDates(DateTime? effectiveDate, DateTime? expiryDate) Parameters effectiveDate DateTime? expiryDate DateTime? Returns bool"
  },
  "api/Oqtane.Shared.html": {
    "href": "api/Oqtane.Shared.html",
    "title": "Namespace Oqtane.Shared | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Shared Classes AuthenticationProviderTypes Constants ControllerRoutes EntityNames ExternalLoginStatus FolderTypes Icons InstallConfig OqtaneIgnoreAttribute PaneNames PermissionNames PolicyNames PropertyDictionary RenderModes RoleNames Runtimes ServiceActivator SettingKeys SiteState SyncEventActions TenantNames UserNames Utilities Enums LogLevel ResourceDeclaration ResourceLevel ResourceLocation ResourceType Runtime SecurityAccessLevel"
  },
  "api/Oqtane.SharedResources.html": {
    "href": "api/Oqtane.SharedResources.html",
    "title": "Class SharedResources | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SharedResources Namespace Oqtane Assembly Oqtane.Client.dll Dummy class used to collect shared resource strings for this application public class SharedResources Inheritance object SharedResources Remarks This class is mostly used with IStringLocalizer and IHtmlLocalizer interfaces. The class must reside at the project root."
  },
  "api/Oqtane.Startup.html": {
    "href": "api/Oqtane.Startup.html",
    "title": "Class Startup | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Startup Namespace Oqtane Assembly Oqtane.Server.dll public class Startup Inheritance object Startup Constructors Startup(IWebHostEnvironment, ILocalizationManager) public Startup(IWebHostEnvironment env, ILocalizationManager localizationManager) Parameters env IWebHostEnvironment localizationManager ILocalizationManager Properties Configuration public IConfigurationRoot Configuration { get; } Property Value IConfigurationRoot Methods Configure(IApplicationBuilder, IWebHostEnvironment, ISyncManager, ICorsService, ICorsPolicyProvider, ILogger<Startup>) public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ISyncManager sync, ICorsService corsService, ICorsPolicyProvider corsPolicyProvider, ILogger<Startup> logger) Parameters app IApplicationBuilder env IWebHostEnvironment sync ISyncManager corsService ICorsService corsPolicyProvider ICorsPolicyProvider logger ILogger<Startup> ConfigureServices(IServiceCollection) public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/Oqtane.Themes.AdminContainer.html": {
    "href": "api/Oqtane.Themes.AdminContainer.html",
    "title": "Class AdminContainer | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class AdminContainer Namespace Oqtane.Themes Assembly Oqtane.Client.dll public class AdminContainer : ContainerBase, IThemeControl, IContainerControl Inheritance object ComponentBase ThemeBase ContainerBase AdminContainer Implements IThemeControl IContainerControl Inherited Members ContainerBase.ModuleState ContainerBase.ShouldRender() ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.ContainerBase.html": {
    "href": "api/Oqtane.Themes.ContainerBase.html",
    "title": "Class ContainerBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ContainerBase Namespace Oqtane.Themes Assembly Oqtane.Client.dll public abstract class ContainerBase : ThemeBase, IThemeControl, IContainerControl Inheritance object ComponentBase ThemeBase ContainerBase Implements IThemeControl IContainerControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties ModuleState [CascadingParameter] protected Module ModuleState { get; set; } Property Value Module Methods ShouldRender() Returns a flag to indicate whether the component should render. protected override bool ShouldRender() Returns bool"
  },
  "api/Oqtane.Themes.Controls.Breadcrumbs.html": {
    "href": "api/Oqtane.Themes.Controls.Breadcrumbs.html",
    "title": "Class Breadcrumbs | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Breadcrumbs Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class Breadcrumbs : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase Breadcrumbs Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties BreadCrumbPages protected IEnumerable<Page> BreadCrumbPages { get; } Property Value IEnumerable<Page> Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.ControlPanel.html": {
    "href": "api/Oqtane.Themes.Controls.ControlPanel.html",
    "title": "Class ControlPanel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ControlPanel Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ControlPanel : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase ControlPanel Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties BodyClass [Parameter] public string BodyClass { get; set; } Property Value string ButtonClass [Parameter] public string ButtonClass { get; set; } Property Value string ContainerClass [Parameter] public string ContainerClass { get; set; } Property Value string HeaderClass [Parameter] public string HeaderClass { get; set; } Property Value string LanguageDropdownAlignment [Parameter] public string LanguageDropdownAlignment { get; set; } Property Value string ShowLanguageSwitcher [Parameter] public bool ShowLanguageSwitcher { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.ControlPanelInteractive.html": {
    "href": "api/Oqtane.Themes.Controls.ControlPanelInteractive.html",
    "title": "Class ControlPanelInteractive | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ControlPanelInteractive Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ControlPanelInteractive : ComponentBase Inheritance object ComponentBase ControlPanelInteractive Properties BodyClass [Parameter] public string BodyClass { get; set; } Property Value string ButtonClass [Parameter] public string ButtonClass { get; set; } Property Value string ContainerClass [Parameter] public string ContainerClass { get; set; } Property Value string HeaderClass [Parameter] public string HeaderClass { get; set; } Property Value string LanguageDropdownAlignment [Parameter] public string LanguageDropdownAlignment { get; set; } Property Value string PageState [Parameter] public PageState PageState { get; set; } Property Value PageState ShowLanguageSwitcher [Parameter] public bool ShowLanguageSwitcher { get; set; } Property Value bool SiteState [Parameter] public SiteState SiteState { get; set; } Property Value SiteState _containerType protected string _containerType { get; } Property Value string _location protected int _location { get; } Property Value int _message protected string _message { get; } Property Value string _moduleDefinitionName protected string _moduleDefinitionName { get; } Property Value string _moduleId protected string _moduleId { get; } Property Value string _moduleType protected string _moduleType { get; } Property Value string _pageId protected string _pageId { get; } Property Value string _title protected string _title { get; } Property Value string _visibility protected string _visibility { get; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.Themes.Controls.LanguageSwitcher.html": {
    "href": "api/Oqtane.Themes.Controls.LanguageSwitcher.html",
    "title": "Class LanguageSwitcher | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LanguageSwitcher Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class LanguageSwitcher : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase LanguageSwitcher Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties ButtonClass [Parameter] public string ButtonClass { get; set; } Property Value string DropdownAlignment [Parameter] public string DropdownAlignment { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.Login.html": {
    "href": "api/Oqtane.Themes.Controls.Login.html",
    "title": "Class Login | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Login Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class Login : LoginBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase LoginBase Login Implements IThemeControl Inherited Members LoginBase.NavigationManager LoginBase.UserService LoginBase.SettingService LoginBase.jsRuntime LoginBase.ServiceProvider LoginBase.loginurl LoginBase.logouturl LoginBase.returnurl LoginBase.OnParametersSet() LoginBase.LoginUser() LoginBase.LogoutUser() ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties ShowLogin [Parameter] public bool ShowLogin { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.LoginBase.html": {
    "href": "api/Oqtane.Themes.Controls.LoginBase.html",
    "title": "Class LoginBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LoginBase Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class LoginBase : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase LoginBase Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Fields loginurl protected string loginurl Field Value string logouturl protected string logouturl Field Value string returnurl protected string returnurl Field Value string Properties NavigationManager [Inject] public NavigationManager NavigationManager { get; set; } Property Value NavigationManager ServiceProvider [Inject] public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider SettingService [Inject] public ISettingService SettingService { get; set; } Property Value ISettingService UserService [Inject] public IUserService UserService { get; set; } Property Value IUserService jsRuntime [Inject] public IJSRuntime jsRuntime { get; set; } Property Value IJSRuntime Methods LoginUser() protected void LoginUser() LogoutUser() protected Task LogoutUser() Returns Task OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.Logo.html": {
    "href": "api/Oqtane.Themes.Controls.Logo.html",
    "title": "Class Logo | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Logo Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class Logo : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase Logo Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.Menu.html": {
    "href": "api/Oqtane.Themes.Controls.Menu.html",
    "title": "Class Menu | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Menu Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class Menu : ComponentBase Inheritance object ComponentBase Menu Properties Orientation [Parameter] public string Orientation { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.MenuBase.html": {
    "href": "api/Oqtane.Themes.Controls.MenuBase.html",
    "title": "Class MenuBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuBase Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class MenuBase : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase Implements IThemeControl Derived MenuItemsBase Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties MenuPages protected IEnumerable<Page> MenuPages { get; } Property Value IEnumerable<Page> Methods GetTarget(Page) protected string GetTarget(Page page) Parameters page Page Returns string GetUrl(Page) protected string GetUrl(Page page) Parameters page Page Returns string"
  },
  "api/Oqtane.Themes.Controls.MenuHorizontal.html": {
    "href": "api/Oqtane.Themes.Controls.MenuHorizontal.html",
    "title": "Class MenuHorizontal | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuHorizontal Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class MenuHorizontal : MenuBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MenuHorizontal Implements IThemeControl Inherited Members MenuBase.MenuPages MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.MenuItemsBase.html": {
    "href": "api/Oqtane.Themes.Controls.MenuItemsBase.html",
    "title": "Class MenuItemsBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuItemsBase Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public abstract class MenuItemsBase : MenuBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MenuItemsBase Implements IThemeControl Inherited Members MenuBase.MenuPages MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties Pages [Parameter] public IEnumerable<Page> Pages { get; set; } Property Value IEnumerable<Page> ParentPage [Parameter] public Page ParentPage { get; set; } Property Value Page Methods GetChildPages() protected IEnumerable<Page> GetChildPages() Returns IEnumerable<Page>"
  },
  "api/Oqtane.Themes.Controls.MenuItemsHorizontal.html": {
    "href": "api/Oqtane.Themes.Controls.MenuItemsHorizontal.html",
    "title": "Class MenuItemsHorizontal | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuItemsHorizontal Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class MenuItemsHorizontal : MenuItemsBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MenuItemsBase MenuItemsHorizontal Implements IThemeControl Inherited Members MenuItemsBase.ParentPage MenuItemsBase.Pages MenuItemsBase.GetChildPages() MenuBase.MenuPages MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.MenuItemsVertical.html": {
    "href": "api/Oqtane.Themes.Controls.MenuItemsVertical.html",
    "title": "Class MenuItemsVertical | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuItemsVertical Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class MenuItemsVertical : MenuItemsBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MenuItemsBase MenuItemsVertical Implements IThemeControl Inherited Members MenuItemsBase.ParentPage MenuItemsBase.Pages MenuItemsBase.GetChildPages() MenuBase.MenuPages MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.MenuVertical.html": {
    "href": "api/Oqtane.Themes.Controls.MenuVertical.html",
    "title": "Class MenuVertical | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class MenuVertical Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class MenuVertical : MenuBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase MenuBase MenuVertical Implements IThemeControl Inherited Members MenuBase.MenuPages MenuBase.GetTarget(Page) MenuBase.GetUrl(Page) ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.ModuleActions.html": {
    "href": "api/Oqtane.Themes.Controls.ModuleActions.html",
    "title": "Class ModuleActions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleActions Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ModuleActions : ContainerBase, IThemeControl, IContainerControl Inheritance object ComponentBase ThemeBase ContainerBase ModuleActions Implements IThemeControl IContainerControl Inherited Members ContainerBase.ModuleState ContainerBase.ShouldRender() ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.ModuleActionsBase.ActionViewModel.html": {
    "href": "api/Oqtane.Themes.Controls.ModuleActionsBase.ActionViewModel.html",
    "title": "Class ModuleActionsBase.ActionViewModel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleActionsBase.ActionViewModel Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ModuleActionsBase.ActionViewModel Inheritance object ModuleActionsBase.ActionViewModel Properties Action public Func<string, PageModule, Task<string>> Action { get; set; } Property Value Func<string, PageModule, Task<string>> Icon public string Icon { get; set; } Property Value string Name public string Name { get; set; } Property Value string"
  },
  "api/Oqtane.Themes.Controls.ModuleActionsBase.html": {
    "href": "api/Oqtane.Themes.Controls.ModuleActionsBase.html",
    "title": "Class ModuleActionsBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleActionsBase Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ModuleActionsBase : ComponentBase Inheritance object ComponentBase ModuleActionsBase Fields Actions public List<ModuleActionsBase.ActionViewModel> Actions Field Value List<ModuleActionsBase.ActionViewModel> Properties Localizer [Inject] public IStringLocalizer<ModuleActionsBase> Localizer { get; set; } Property Value IStringLocalizer<ModuleActionsBase> ModuleService [Inject] public IModuleService ModuleService { get; set; } Property Value IModuleService ModuleState [Parameter] public Module ModuleState { get; set; } Property Value Module NavigationManager [Inject] public NavigationManager NavigationManager { get; set; } Property Value NavigationManager PageModuleService [Inject] public IPageModuleService PageModuleService { get; set; } Property Value IPageModuleService PageState [Parameter] public PageState PageState { get; set; } Property Value PageState Methods GetActions() protected virtual List<ModuleActionsBase.ActionViewModel> GetActions() Returns List<ModuleActionsBase.ActionViewModel> ModuleAction(ActionViewModel) protected Task ModuleAction(ModuleActionsBase.ActionViewModel action) Parameters action ModuleActionsBase.ActionViewModel Returns Task OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.ModuleActionsInteractive.html": {
    "href": "api/Oqtane.Themes.Controls.ModuleActionsInteractive.html",
    "title": "Class ModuleActionsInteractive | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleActionsInteractive Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ModuleActionsInteractive : ModuleActionsBase Inheritance object ComponentBase ModuleActionsBase ModuleActionsInteractive Inherited Members ModuleActionsBase.NavigationManager ModuleActionsBase.PageModuleService ModuleActionsBase.ModuleService ModuleActionsBase.PageState ModuleActionsBase.ModuleState ModuleActionsBase.Actions ModuleActionsBase.OnParametersSet() ModuleActionsBase.GetActions() ModuleActionsBase.ModuleAction(ModuleActionsBase.ActionViewModel) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.Controls.ModuleTitle.html": {
    "href": "api/Oqtane.Themes.Controls.ModuleTitle.html",
    "title": "Class ModuleTitle | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleTitle Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class ModuleTitle : ContainerBase, IThemeControl, IContainerControl Inheritance object ComponentBase ThemeBase ContainerBase ModuleTitle Implements IThemeControl IContainerControl Inherited Members ContainerBase.ModuleState ContainerBase.ShouldRender() ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.UserProfile.html": {
    "href": "api/Oqtane.Themes.Controls.UserProfile.html",
    "title": "Class UserProfile | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class UserProfile Namespace Oqtane.Themes.Controls Assembly Oqtane.Client.dll public class UserProfile : ThemeControlBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase UserProfile Implements IThemeControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Properties ShowRegister [Parameter] public bool ShowRegister { get; set; } Property Value bool Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.Themes.Controls.html": {
    "href": "api/Oqtane.Themes.Controls.html",
    "title": "Namespace Oqtane.Themes.Controls | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Themes.Controls Classes LoginBase MenuBase MenuItemsBase ModuleActionsBase ModuleActionsBase.ActionViewModel"
  },
  "api/Oqtane.Themes.DefaultContainer.html": {
    "href": "api/Oqtane.Themes.DefaultContainer.html",
    "title": "Class DefaultContainer | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class DefaultContainer Namespace Oqtane.Themes Assembly Oqtane.Client.dll public class DefaultContainer : ContainerBase, IThemeControl, IContainerControl Inheritance object ComponentBase ThemeBase ContainerBase DefaultContainer Implements IThemeControl IContainerControl Inherited Members ContainerBase.ModuleState ContainerBase.ShouldRender() ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool) Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.Themes.IContainerControl.html": {
    "href": "api/Oqtane.Themes.IContainerControl.html",
    "title": "Interface IContainerControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IContainerControl Namespace Oqtane.Themes Assembly Oqtane.Client.dll public interface IContainerControl"
  },
  "api/Oqtane.Themes.ILayoutControl.html": {
    "href": "api/Oqtane.Themes.ILayoutControl.html",
    "title": "Interface ILayoutControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ILayoutControl Namespace Oqtane.Themes Assembly Oqtane.Client.dll public interface ILayoutControl"
  },
  "api/Oqtane.Themes.ITheme.html": {
    "href": "api/Oqtane.Themes.ITheme.html",
    "title": "Interface ITheme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface ITheme Namespace Oqtane.Themes Assembly Oqtane.Client.dll public interface ITheme Properties Theme Theme Theme { get; } Property Value Theme"
  },
  "api/Oqtane.Themes.IThemeControl.html": {
    "href": "api/Oqtane.Themes.IThemeControl.html",
    "title": "Interface IThemeControl | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Interface IThemeControl Namespace Oqtane.Themes Assembly Oqtane.Shared.dll public interface IThemeControl Properties Name Friendly name for a theme string Name { get; } Property Value string Panes Identifies all panes in a theme ( delimited by \",\" or \";\") - assumed to be a layout if no panes specified string Panes { get; } Property Value string Resources Identifies all resources in a theme List<Resource> Resources { get; } Property Value List<Resource> Thumbnail Screen shot of a theme - assumed to be in the ThemePath() folder string Thumbnail { get; } Property Value string"
  },
  "api/Oqtane.Themes.LayoutBase.html": {
    "href": "api/Oqtane.Themes.LayoutBase.html",
    "title": "Class LayoutBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class LayoutBase Namespace Oqtane.Themes Assembly Oqtane.Client.dll [Obsolete(\"This class is deprecated\", false)] public abstract class LayoutBase : ThemeBase, IThemeControl, ILayoutControl Inheritance object ComponentBase ThemeBase LayoutBase Implements IThemeControl ILayoutControl Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool)"
  },
  "api/Oqtane.Themes.ThemeBase.Logger.html": {
    "href": "api/Oqtane.Themes.ThemeBase.Logger.html",
    "title": "Class ThemeBase.Logger | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeBase.Logger Namespace Oqtane.Themes Assembly Oqtane.Client.dll public class ThemeBase.Logger Inheritance object ThemeBase.Logger Constructors Logger(ModuleBase) public Logger(ModuleBase moduleBase) Parameters moduleBase ModuleBase Methods LogCritical(LogFunction, string, params object[]) public Task LogCritical(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogCritical(Exception, string, params object[]) public Task LogCritical(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogCritical(string, params object[]) public Task LogCritical(string message, params object[] args) Parameters message string args object[] Returns Task LogDebug(LogFunction, string, params object[]) public Task LogDebug(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogDebug(Exception, string, params object[]) public Task LogDebug(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogDebug(string, params object[]) public Task LogDebug(string message, params object[] args) Parameters message string args object[] Returns Task LogError(LogFunction, string, params object[]) public Task LogError(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogError(Exception, string, params object[]) public Task LogError(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogError(string, params object[]) public Task LogError(string message, params object[] args) Parameters message string args object[] Returns Task LogInformation(LogFunction, string, params object[]) public Task LogInformation(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogInformation(Exception, string, params object[]) public Task LogInformation(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogInformation(string, params object[]) public Task LogInformation(string message, params object[] args) Parameters message string args object[] Returns Task LogTrace(LogFunction, string, params object[]) public Task LogTrace(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogTrace(Exception, string, params object[]) public Task LogTrace(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogTrace(string, params object[]) public Task LogTrace(string message, params object[] args) Parameters message string args object[] Returns Task LogWarning(LogFunction, string, params object[]) public Task LogWarning(LogFunction function, string message, params object[] args) Parameters function LogFunction message string args object[] Returns Task LogWarning(Exception, string, params object[]) public Task LogWarning(Exception exception, string message, params object[] args) Parameters exception Exception message string args object[] Returns Task LogWarning(string, params object[]) public Task LogWarning(string message, params object[] args) Parameters message string args object[] Returns Task"
  },
  "api/Oqtane.Themes.ThemeBase.html": {
    "href": "api/Oqtane.Themes.ThemeBase.html",
    "title": "Class ThemeBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeBase Namespace Oqtane.Themes Assembly Oqtane.Client.dll public abstract class ThemeBase : ComponentBase, IThemeControl Inheritance object ComponentBase ThemeBase Implements IThemeControl Derived ContainerBase LayoutBase ThemeControlBase Properties JSRuntime [Inject] protected IJSRuntime JSRuntime { get; set; } Property Value IJSRuntime LoggingService [Inject] protected ILogService LoggingService { get; set; } Property Value ILogService Name Friendly name for a theme public virtual string Name { get; set; } Property Value string PageState [CascadingParameter] protected PageState PageState { get; set; } Property Value PageState Panes Identifies all panes in a theme ( delimited by \",\" or \";\") - assumed to be a layout if no panes specified public virtual string Panes { get; set; } Property Value string Resources Identifies all resources in a theme public virtual List<Resource> Resources { get; set; } Property Value List<Resource> SiteState [Inject] protected SiteState SiteState { get; set; } Property Value SiteState Thumbnail Screen shot of a theme - assumed to be in the ThemePath() folder public virtual string Thumbnail { get; set; } Property Value string Methods AddHeadContent(string) public void AddHeadContent(string content) Parameters content string AddScript(Resource) public void AddScript(Resource resource) Parameters resource Resource ContentUrl(int) [Obsolete(\"ContentUrl(int fileId) is deprecated. Use FileUrl(int fileId) instead.\", false)] public string ContentUrl(int fileid) Parameters fileid int Returns string ContentUrl(int, bool) [Obsolete(\"ContentUrl(int fileId, bool asAttachment) is deprecated. Use FileUrl(int fileId, bool download) instead.\", false)] public string ContentUrl(int fileid, bool asAttachment) Parameters fileid int asAttachment bool Returns string EditUrl(int, string) public string EditUrl(int moduleid, string action) Parameters moduleid int action string Returns string EditUrl(int, string, string) public string EditUrl(int moduleid, string action, string parameters) Parameters moduleid int action string parameters string Returns string EditUrl(string, int, string, string) public string EditUrl(string path, int moduleid, string action, string parameters) Parameters path string moduleid int action string parameters string Returns string FileUrl(int) public string FileUrl(int fileid) Parameters fileid int Returns string FileUrl(int, bool) public string FileUrl(int fileid, bool download) Parameters fileid int download bool Returns string FileUrl(string, string) public string FileUrl(string folderpath, string filename) Parameters folderpath string filename string Returns string FileUrl(string, string, bool) public string FileUrl(string folderpath, string filename, bool download) Parameters folderpath string filename string download bool Returns string ImageUrl(int, int, int) public string ImageUrl(int fileid, int width, int height) Parameters fileid int width int height int Returns string ImageUrl(int, int, int, string) public string ImageUrl(int fileid, int width, int height, string mode) Parameters fileid int width int height int mode string Returns string ImageUrl(int, int, int, string, string, string, int, bool) public string ImageUrl(int fileid, int width, int height, string mode, string position, string background, int rotate, bool recreate) Parameters fileid int width int height int mode string position string background string rotate int recreate bool Returns string Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) public Task Log(Alias alias, LogLevel level, LogFunction function, Exception exception, string message, params object[] args) Parameters alias Alias level LogLevel function LogFunction exception Exception message string args object[] Returns Task Log(Alias, LogLevel, string, Exception, string, params object[]) public Task Log(Alias alias, LogLevel level, string function, Exception exception, string message, params object[] args) Parameters alias Alias level LogLevel function string exception Exception message string args object[] Returns Task NavigateUrl() public string NavigateUrl() Returns string NavigateUrl(bool) public string NavigateUrl(bool refresh) Parameters refresh bool Returns string NavigateUrl(string) public string NavigateUrl(string path) Parameters path string Returns string NavigateUrl(string, bool) public string NavigateUrl(string path, bool refresh) Parameters path string refresh bool Returns string NavigateUrl(string, string) public string NavigateUrl(string path, string parameters) Parameters path string parameters string Returns string OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. ScrollToPageTop() public Task ScrollToPageTop() Returns Task SetPageTitle(string) public void SetPageTitle(string title) Parameters title string ThemePath() public string ThemePath() Returns string"
  },
  "api/Oqtane.Themes.ThemeControlBase.html": {
    "href": "api/Oqtane.Themes.ThemeControlBase.html",
    "title": "Class ThemeControlBase | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeControlBase Namespace Oqtane.Themes Assembly Oqtane.Client.dll public abstract class ThemeControlBase : ThemeBase, IThemeControl Inheritance object ComponentBase ThemeBase ThemeControlBase Implements IThemeControl Derived LoginBase MenuBase Inherited Members ThemeBase.LoggingService ThemeBase.JSRuntime ThemeBase.SiteState ThemeBase.PageState ThemeBase.Name ThemeBase.Thumbnail ThemeBase.Panes ThemeBase.Resources ThemeBase.OnAfterRenderAsync(bool) ThemeBase.ThemePath() ThemeBase.NavigateUrl() ThemeBase.NavigateUrl(string) ThemeBase.NavigateUrl(bool) ThemeBase.NavigateUrl(string, bool) ThemeBase.NavigateUrl(string, string) ThemeBase.EditUrl(int, string) ThemeBase.EditUrl(int, string, string) ThemeBase.EditUrl(string, int, string, string) ThemeBase.FileUrl(string, string) ThemeBase.FileUrl(string, string, bool) ThemeBase.FileUrl(int) ThemeBase.FileUrl(int, bool) ThemeBase.ImageUrl(int, int, int) ThemeBase.ImageUrl(int, int, int, string) ThemeBase.ImageUrl(int, int, int, string, string, string, int, bool) ThemeBase.SetPageTitle(string) ThemeBase.AddHeadContent(string) ThemeBase.AddScript(Resource) ThemeBase.ScrollToPageTop() ThemeBase.Log(Alias, LogLevel, string, Exception, string, params object[]) ThemeBase.Log(Alias, LogLevel, LogFunction, Exception, string, params object[]) ThemeBase.ContentUrl(int) ThemeBase.ContentUrl(int, bool)"
  },
  "api/Oqtane.Themes.html": {
    "href": "api/Oqtane.Themes.html",
    "title": "Namespace Oqtane.Themes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.Themes Namespaces Oqtane.Themes.Controls Classes ContainerBase LayoutBase ThemeBase ThemeBase.Logger ThemeControlBase Interfaces IContainerControl ILayoutControl ITheme IThemeControl"
  },
  "api/Oqtane.UI.ContainerBuilder.html": {
    "href": "api/Oqtane.UI.ContainerBuilder.html",
    "title": "Class ContainerBuilder | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ContainerBuilder Namespace Oqtane.UI Assembly Oqtane.Client.dll public class ContainerBuilder : ComponentBase Inheritance object ComponentBase ContainerBuilder Properties ComponentType public Type ComponentType { get; set; } Property Value Type ModuleState [Parameter] public Module ModuleState { get; set; } Property Value Module PageState [CascadingParameter] protected PageState PageState { get; set; } Property Value PageState Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet() ShouldRender() Returns a flag to indicate whether the component should render. protected override bool ShouldRender() Returns bool"
  },
  "api/Oqtane.UI.Head.html": {
    "href": "api/Oqtane.UI.Head.html",
    "title": "Class Head | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Head Namespace Oqtane.UI Assembly Oqtane.Client.dll public class Head : ComponentBase Inheritance object ComponentBase Head Properties RenderMode [Parameter] public string RenderMode { get; set; } Property Value string Runtime [Parameter] public string Runtime { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized()"
  },
  "api/Oqtane.UI.InteractiveRenderMode.html": {
    "href": "api/Oqtane.UI.InteractiveRenderMode.html",
    "title": "Class InteractiveRenderMode | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class InteractiveRenderMode Namespace Oqtane.UI Assembly Oqtane.Client.dll public static class InteractiveRenderMode Inheritance object InteractiveRenderMode Methods GetInteractiveRenderMode(string, bool) public static IComponentRenderMode GetInteractiveRenderMode(string runtime, bool prerender) Parameters runtime string prerender bool Returns IComponentRenderMode"
  },
  "api/Oqtane.UI.Interop.html": {
    "href": "api/Oqtane.UI.Interop.html",
    "title": "Class Interop | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Interop Namespace Oqtane.UI Assembly Oqtane.Client.dll public class Interop Inheritance object Interop Constructors Interop(IJSRuntime) public Interop(IJSRuntime jsRuntime) Parameters jsRuntime IJSRuntime Methods FormValid(ElementReference) public ValueTask<bool> FormValid(ElementReference form) Parameters form ElementReference Returns ValueTask<bool> GetCaretPosition(string) public ValueTask<int> GetCaretPosition(string id) Parameters id string Returns ValueTask<int> GetCookie(string) public ValueTask<string> GetCookie(string name) Parameters name string Returns ValueTask<string> GetElementByName(string) public ValueTask<string> GetElementByName(string name) Parameters name string Returns ValueTask<string> GetFiles(string) public ValueTask<string[]> GetFiles(string id) Parameters id string Returns ValueTask<string[]> GetIndexedDBItem<T>(string) public Task<T> GetIndexedDBItem<T>(string key) Parameters key string Returns Task<T> Type Parameters T GetIndexedDBKeys() public Task<List<string>> GetIndexedDBKeys() Returns Task<List<string>> GetIndexedDBKeys(string) public Task<List<string>> GetIndexedDBKeys(string contains) Parameters contains string Returns Task<List<string>> IncludeLink(string, string, string, string, string, string, string) public Task IncludeLink(string id, string rel, string href, string type, string integrity, string crossorigin, string includebefore) Parameters id string rel string href string type string integrity string crossorigin string includebefore string Returns Task IncludeLinks(object[]) public Task IncludeLinks(object[] links) Parameters links object[] Returns Task IncludeMeta(string, string, string, string) public Task IncludeMeta(string id, string attribute, string name, string content) Parameters id string attribute string name string content string Returns Task IncludeScript(string, string, string, string, string, string) public Task IncludeScript(string id, string src, string integrity, string crossorigin, string content, string location) Parameters id string src string integrity string crossorigin string content string location string Returns Task IncludeScript(string, string, string, string, string, string, string) public Task IncludeScript(string id, string src, string integrity, string crossorigin, string type, string content, string location) Parameters id string src string integrity string crossorigin string type string content string location string Returns Task IncludeScripts(object[]) public Task IncludeScripts(object[] scripts) Parameters scripts object[] Returns Task RedirectBrowser(string, int) public Task RedirectBrowser(string url, int wait) Parameters url string wait int Returns Task RefreshBrowser(bool, int) public Task RefreshBrowser(bool force, int wait) Parameters force bool wait int Returns Task RemoveElementsById(string, string, string) public Task RemoveElementsById(string prefix, string first, string last) Parameters prefix string first string last string Returns Task RemoveIndexedDBItem(string) public Task RemoveIndexedDBItem(string key) Parameters key string Returns Task ScrollTo(int, int, string) public Task ScrollTo(int top, int left, string behavior) Parameters top int left int behavior string Returns Task ScrollToId(string) public Task ScrollToId(string id) Parameters id string Returns Task SetCookie(string, string, int) public Task SetCookie(string name, string value, int days) Parameters name string value string days int Returns Task SetElementAttribute(string, string, string) public Task SetElementAttribute(string id, string attribute, string value) Parameters id string attribute string value string Returns Task SetIndexedDBItem(string, object) public Task SetIndexedDBItem(string key, object value) Parameters key string value object Returns Task SubmitForm(string, object) public Task SubmitForm(string path, object fields) Parameters path string fields object Returns Task UpdateTitle(string) public Task UpdateTitle(string title) Parameters title string Returns Task UploadFiles(string, string, string, string, string) public Task UploadFiles(string posturl, string folder, string id, string antiforgerytoken, string jwt) Parameters posturl string folder string id string antiforgerytoken string jwt string Returns Task"
  },
  "api/Oqtane.UI.ModuleInstance.html": {
    "href": "api/Oqtane.UI.ModuleInstance.html",
    "title": "Class ModuleInstance | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ModuleInstance Namespace Oqtane.UI Assembly Oqtane.Client.dll public class ModuleInstance Inheritance object ModuleInstance"
  },
  "api/Oqtane.UI.PageState.html": {
    "href": "api/Oqtane.UI.PageState.html",
    "title": "Class PageState | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PageState Namespace Oqtane.UI Assembly Oqtane.Client.dll public class PageState Inheritance object PageState Properties Action public string Action { get; set; } Property Value string Alias public Alias Alias { get; set; } Property Value Alias EditMode public bool EditMode { get; set; } Property Value bool IsInternalNavigation public bool IsInternalNavigation { get; set; } Property Value bool Languages public List<Language> Languages { get; } Property Value List<Language> LastSyncDate public DateTime LastSyncDate { get; set; } Property Value DateTime ModuleId public int ModuleId { get; set; } Property Value int Modules public List<Module> Modules { get; } Property Value List<Module> Page public Page Page { get; set; } Property Value Page Pages public List<Page> Pages { get; } Property Value List<Page> QueryString public Dictionary<string, string> QueryString { get; set; } Property Value Dictionary<string, string> Refresh public bool Refresh { get; set; } Property Value bool RemoteIPAddress public string RemoteIPAddress { get; set; } Property Value string RenderId public Guid RenderId { get; set; } Property Value Guid RenderMode public string RenderMode { get; set; } Property Value string ReturnUrl public string ReturnUrl { get; set; } Property Value string Route public Route Route { get; set; } Property Value Route Runtime public Runtime Runtime { get; set; } Property Value Runtime Site public Site Site { get; set; } Property Value Site Uri public Uri Uri { get; set; } Property Value Uri UrlParameters public string UrlParameters { get; set; } Property Value string User public User User { get; set; } Property Value User VisitorId public int VisitorId { get; set; } Property Value int"
  },
  "api/Oqtane.UI.Pane.html": {
    "href": "api/Oqtane.UI.Pane.html",
    "title": "Class Pane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Pane Namespace Oqtane.UI Assembly Oqtane.Client.dll public class Pane : ComponentBase Inheritance object ComponentBase Pane Properties Name [Parameter] public string Name { get; set; } Property Value string PageState [CascadingParameter] protected PageState PageState { get; set; } Property Value PageState Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.UI.PaneLayout.html": {
    "href": "api/Oqtane.UI.PaneLayout.html",
    "title": "Class PaneLayout | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class PaneLayout Namespace Oqtane.UI Assembly Oqtane.Client.dll public class PaneLayout : ComponentBase Inheritance object ComponentBase PaneLayout Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder"
  },
  "api/Oqtane.UI.RenderModeBoundary.html": {
    "href": "api/Oqtane.UI.RenderModeBoundary.html",
    "title": "Class RenderModeBoundary | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class RenderModeBoundary Namespace Oqtane.UI Assembly Oqtane.Client.dll public class RenderModeBoundary Inheritance object RenderModeBoundary"
  },
  "api/Oqtane.UI.Routes.html": {
    "href": "api/Oqtane.UI.Routes.html",
    "title": "Class Routes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class Routes Namespace Oqtane.UI Assembly Oqtane.Client.dll public class Routes : ComponentBase Inheritance object ComponentBase Routes Properties AntiForgeryToken [Parameter] public string AntiForgeryToken { get; set; } Property Value string AuthorizationToken [Parameter] public string AuthorizationToken { get; set; } Property Value string PageState [Parameter] public PageState PageState { get; set; } Property Value PageState Platform [Parameter] public string Platform { get; set; } Property Value string RenderMode [Parameter] public string RenderMode { get; set; } Property Value string Runtime [Parameter] public string Runtime { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnAfterRender(bool) Method invoked after each time the component has rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. protected override void OnAfterRender(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.UI.Runtime.html": {
    "href": "api/Oqtane.UI.Runtime.html",
    "title": "Enum Runtime | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Enum Runtime Namespace Oqtane.UI Assembly Oqtane.Client.dll [Obsolete(\"This enum is deprecated and will be removed in the upcoming major release, please use Oqtane.Shared.Runtime instead.\")] public enum Runtime Fields Server = 0 WebAssembly = 1"
  },
  "api/Oqtane.UI.SiteRouter.html": {
    "href": "api/Oqtane.UI.SiteRouter.html",
    "title": "Class SiteRouter | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class SiteRouter Namespace Oqtane.UI Assembly Oqtane.Client.dll public class SiteRouter : ComponentBase Inheritance object ComponentBase SiteRouter Properties OnStateChange [Parameter] public Action<PageState> OnStateChange { get; set; } Property Value Action<PageState> RenderMode [Parameter] public string RenderMode { get; set; } Property Value string Runtime [Parameter] public string Runtime { get; set; } Property Value string Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnInitialized() Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree. protected override void OnInitialized() OnParametersSetAsync() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override Task OnParametersSetAsync() Returns Task A Task representing any asynchronous operation."
  },
  "api/Oqtane.UI.ThemeBuilder.html": {
    "href": "api/Oqtane.UI.ThemeBuilder.html",
    "title": "Class ThemeBuilder | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ThemeBuilder Namespace Oqtane.UI Assembly Oqtane.Client.dll public class ThemeBuilder : ComponentBase Inheritance object ComponentBase ThemeBuilder Methods BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied RenderTreeBuilder. protected override void BuildRenderTree(RenderTreeBuilder __builder) Parameters __builder RenderTreeBuilder OnAfterRenderAsync(bool) Method invoked after each time the component has been rendered interactively and the UI has finished updating (for example, after elements have been added to the browser DOM). Any ElementReference fields will be populated by the time this runs. This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated. Note that the component does not automatically re-render after the completion of any returned Task, because that would cause an infinite render loop. protected override Task OnAfterRenderAsync(bool firstRender) Parameters firstRender bool Set to true if this is the first time OnAfterRender(bool) has been invoked on this component instance; otherwise false. Returns Task A Task representing any asynchronous operation. Remarks The OnAfterRender(bool) and OnAfterRenderAsync(bool) lifecycle methods are useful for performing interop, or interacting with values received from @ref. Use the firstRender parameter to ensure that initialization work is only performed once. OnParametersSet() Method invoked when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties. protected override void OnParametersSet()"
  },
  "api/Oqtane.UI.html": {
    "href": "api/Oqtane.UI.html",
    "title": "Namespace Oqtane.UI | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane.UI Classes InteractiveRenderMode Interop ModuleInstance PageState RenderModeBoundary"
  },
  "api/Oqtane.html": {
    "href": "api/Oqtane.html",
    "title": "Namespace Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace Oqtane TODO: Please document what this namespace is for. Namespaces Oqtane.Controllers Oqtane.Documentation Oqtane.Enums Oqtane.Extensions Oqtane.Infrastructure Oqtane.Interfaces Oqtane.Managers Oqtane.Models Oqtane.Modules Oqtane.Pages Oqtane.Providers Oqtane.Repository Oqtane.Security Oqtane.Services Oqtane.Shared Oqtane.Themes Oqtane.UI Classes IconResources Dummy class used to collect shared resource strings for this application SharedResources Dummy class used to collect shared resource strings for this application Startup"
  },
  "api/OqtaneSSR.Extensions.ComponentEndpointRouteBuilderExtensions.html": {
    "href": "api/OqtaneSSR.Extensions.ComponentEndpointRouteBuilderExtensions.html",
    "title": "Class ComponentEndpointRouteBuilderExtensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Class ComponentEndpointRouteBuilderExtensions Namespace OqtaneSSR.Extensions Assembly Oqtane.Server.dll public static class ComponentEndpointRouteBuilderExtensions Inheritance object ComponentEndpointRouteBuilderExtensions Methods MapFallback(IEndpointRouteBuilder) public static void MapFallback(this IEndpointRouteBuilder endpoints) Parameters endpoints IEndpointRouteBuilder"
  },
  "api/OqtaneSSR.Extensions.html": {
    "href": "api/OqtaneSSR.Extensions.html",
    "title": "Namespace OqtaneSSR.Extensions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Namespace OqtaneSSR.Extensions Classes ComponentEndpointRouteBuilderExtensions"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Oqtane API Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane API Documentation Note The API documentation is still work-in-progress. Colors and Icons APIs can be daunting. Because of this, we've color-coded the menu to the left and added icons to make it easier for you to get around. Note This is what the colors and icons in the TOC mean: Anything that's light gray / subdued is probably not of interest to you marks WebApi related things marks things related to data like models and repositories marks Module related things marks things related to themes These areas are probably what you would like to research TODO"
  },
  "guides/concepts/404-page-behavior.html": {
    "href": "guides/concepts/404-page-behavior.html",
    "title": "404 Page Behavior | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "404 Page Behavior Issue Description This document aims to provide clarity on the behavior of the 404 page in the Oqtane Framework. It includes information on various scenarios where the 404 page is encountered and how it is handled within the framework. Use Cases The 404 page is utilized in multiple scenarios within the Oqtane Framework: Page Not Found: When a user requests a URL that does not correspond to any existing page in the site, and it has not been mapped using URL Mapping, the user is redirected to the 404 page. Unauthorized Access: If a user attempts to access a page for which they do not have permission, they are redirected to the 404 page instead of revealing the existence of the page. Effective Date and Expiry Date: If a page exists but the current date is outside the range specified by the Effective Date and Expiry Date, the user is directed to the 404 page. Framework Behavior In the Oqtane Framework, the term \"404\" refers to the friendly page that users are redirected to when the framework is unable to navigate them to the requested URL. This page has a path of \"/404\". Regarding permissions, there has been debate about whether to strictly adhere to HTTP status codes or to prioritize security by not revealing the existence of pages to unauthorized users. As of now, Oqtane has opted for a single \"friendly\" page for handling these scenarios. Reference For more details and discussions on this topic, refer to issue #4088 in the Oqtane Framework repository. Conclusion By understanding the behavior of the 404 page in the Oqtane Framework, administrators can better manage and customize the user experience when encountering non-existent or unauthorized URLs."
  },
  "guides/concepts/dll-handling.html": {
    "href": "guides/concepts/dll-handling.html",
    "title": "Oqtane Concepts: DLL Handling | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Concepts: DLL Handling How / Why DLLs are loaded into memory: the .NET Core philosophy is to only load the specific assemblies an app needs ( to reduce startup time and memory ) by default .NET Core will only load assemblies statically linked to the main app - it will not load every DLL in the /bin it will not load Oqtane module/theme DLLs as these are dynamically linked therefore Oqtane needs to manually load its modules/themes in order to do this it needs to be able to quickly identify the DLLs the only option available is via filename, as any other approach requires reflection which consumes startup time/processing and memory the convention is that the filename must contain oqtane once the required DLLs are loaded into the AppDomain, subsequent operations for assemblies can use the AppDomain rather than the file system the majority of assemblies in the AppDomain are not relevant to Oqtane reflection is expensive so we should only use reflection on assemblies which are actually relevant to Oqtane assembly fullname is same as DLL filename, so we can look for the oqtane qualifier to identify Oqtane assemblies"
  },
  "guides/concepts/index.html": {
    "href": "guides/concepts/index.html",
    "title": "Oqtane Concepts | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Concepts Here, we explain why Oqtane works the way it does. Explore the following concepts: DLL Handling 404 Page Behavior Feel free to dive deeper into these topics by following the provided links!"
  },
  "guides/docs/api-menu.html": {
    "href": "guides/docs/api-menu.html",
    "title": "How the API-Navigation (TOC) Works | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "How the API-Navigation (TOC) Works The API navigation can be quite tricky, because the default docfx behavior results in a very hard-to-use TOC-menu on the side. Because of this, we use a special trick where a JavaScript in layout\\oqtane\\toc.extension.js optimizes the names based on some rules. Here's what it does The prefix Oqtane. is removed by default (unless that's all there is) If the remaining namespace has more than 2 parts, it will be truncated with a prefix ... to make it fit better 😎 In addition, it looks up if the namespace has metadata (in the namespace-metadata.js) to give it better colors and icons."
  },
  "guides/docs/build.html": {
    "href": "guides/docs/build.html",
    "title": "Build and Deploy the Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Build and Deploy the Documentation Setup To set everything up, clone the oqtane.docs and the oqtane.framework repositories in the same parent folder (e.g., c:\\projects\\oqtane), creating a structure like: c:\\projects\\oqtane (example) oqtane.docs cloned from oqtane.docs oqtane.framework cloned from oqtane.framework some-root\\ ├── oqtane.docs ├── oqtane.framework That will look like this: Build and Test Locally Depending on your preferred toolchain, you can use VS Code (recommended🌟) Visual Studio 2022 Build and Test Locally using VS Code Run with VS Code: Open the Oqtane.Docs.code-workspace workspace located in the /src folder. Rebuild the entire solution Either using Ctrl+Shift+B. Or by hitting Ctrl + Shift + P and selecting \"Run Task\" ...and then \"Build\". In the output you should then see a bunch of stuff - ending with Build Succeeded It is generated into the root /docs folder. Test Locally - three options: Recommended 🌟: Use the Live Server extension to serve the /docs folder on http://localhost:5500` using Alt + L, Alt + O. Alternatively: Use IIS Express Extension to serve the /docs folder on http://localhost:27629` using Ctrl+F5. Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me. Build and Test Locally using Visual Studio 2022 Run with Visual Studio: Open the Oqtane.Docs.sln solution located in the /src folder. Rebuild the entire solution. It is generated into the root /docs folder. Test Locally Alternatively: Set up IIS to publish the /docs folder on a domain such as docs.oqtane.me. Note If you encounter build errors like shown below: You may also need to execute the following commands in terminal: Unblock-File -Path .\\.config\\dotnet-tools.json dotnet tool restore After running these commands, the build errors should be resolved. Tip To see your updates in the locally hosted IIS website, make sure to use the Rebuild Solution option. Publish / Deploy to GitHub Push the result back to the repository. GitHub will automatically publish the updated documentation to https://docs.oqtane.org. Questions For further discussions, feedback, or questions, head over to GitHub Discussions or GitHub Issues."
  },
  "guides/docs/code.html": {
    "href": "guides/docs/code.html",
    "title": "Document Code | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Document Code Basic Documentation Add normal documentation with /// <summary> tags to your code, like this: /// <summary> /// Constructor which does xyz /// </summary> /// <param name=\"id\">the id</param> public MyMethod(int id) { } All this is automatically picked up and converted to documentation. Adding Extensive Documentation Let's assume you have a class Oqtane.Example.MyClass and you would like to add images and a lot of markdown to explain what it does. This is your code: namespace Oqtane.Example; public class MyClass { } Now go to the documentation project Oqtane.Docs in the solution and open the apidoc\\Example folder (create it, if it doesn't exist yet'). In this, create a MyClass.md file which contains this --- uid: Oqtane.Example.MyClass --- Here is some **great** additional [Information](https://oqtane.org). 1. Do this 1. Then that Because you have the uid: ... header in your file, docfx will now combine these documentations in the output. You can also add images, html, or whatever you need. You can also find examples of this merge in the apidoc\\Documentation\\PublicApi.md file. Documenting Namespaces It's usually very helpful to document what a namespace does. Using the same mechanism with the uid: you can create markdown files which will show extensive instructions. Check out the apidoc\\Documentation\\index.md file for an example."
  },
  "guides/docs/conventions.html": {
    "href": "guides/docs/conventions.html",
    "title": "Oqtane Documentation Conventions | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Conventions The following conventions should help all docs contributors work together. Images / Files / Assets When using files, especially images, please follow these conventions. 1. Remember: Case Sensitive when Hosted Be aware that the final docs will be hosted on github, which is case-sensitive. So MyImage.png and myimage.png are different files This is important when you're linking to files Always use lower-case file names Note If you accidentally get this wrong (eg. MyImage.png), and linking myimage.png it will work on your IIS/Windows, but not when finally hosted on Github. 2. Put Files Close to Where They Are Used Put all files in the assets folder below the page where they are used. This makes it easier to find the files when you're editing the page. It also makes it easier to move the page to a different location. This also helps to \"see\" when files are not used any more. Only use files in the \"own\" asset folder. Don't use files from far-away asset folders. 3. Use Relative Paths ./assets/myimage.png or assets/myimage.png Rarely ../assets/myimage.png (only if you're in a sub-folder), but the file is still part of the same topic and should be reused 4. Creativity and Contribution There’s no hard and fast rule about how you create or edit images and videos. Any contribution is welcome. Feel free to use tools that you’re comfortable with. For instance, Windows Screen Snippet is a fast and easy tool for creating and saving files. Remember, the goal is to make the documentation as clear and helpful as possible."
  },
  "guides/docs/folders.html": {
    "href": "guides/docs/folders.html",
    "title": "Folders and Files in the Oqtane Docs Project | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Folders and Files in the Oqtane Docs Project API Documentation Folders The api folder contains the home-page for the API docs. The apidoc folder contains markdown .md files which are merged with comments in the code. The merging happens because the unique ID of the md files matches the full namespace of the code. Article Folders The articles folder contains general articles The how-to folder The specs folder contains specifications, concepts etc. IDs of Contents in this folder should start with Specs Assets Folders We recommend placing all assets - mostly images - in assets subfolders everywhere. This ensures that the image really belongs to that folder and can be deleted again, if not in use."
  },
  "guides/docs/how-it-works.html": {
    "href": "guides/docs/how-it-works.html",
    "title": "How the Documentation System Works | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "How the Documentation System Works The initial configuration starts with the docfx.json file. Basically this says what code it should pick up, where the .md files are and where to put the output. We've tried to make it very clear where we made relevant changes and smuggled comment-nodes into the file for clarity. Layout The layout is configured in the docfx.json where it will start with the default template, extend it with statictoc (generate real html menu-structures, not just JS) and then apply the layout specified in layout\\oqtane. It will also include images in layout\\images like logos etc. because this was configured in docfx.json. Site Navigation The site navigation is cascaded through the toc.yml files in each folder. Tip You may also find examples online which use toc.md files but you'll run into requirements that will force you to switch back to YAML. So we recommend you stick to the yaml format everywhere. What Code is included in the Docs The initial set is configured in the docfx.json with the base path cwd and include/filter files. Then we have a few basic rules, which are all configured in the filterConfig.yml file. Ignore all Microsoft.*, System.* and Oqtane.Test.* namespaces Troubleshooting Problems with MSBuild or .net SDK DocFX runs MSBuild to compile the projects it finds. This can easily cause trouble if your Dev-PC has been through various versions of Visual-Studio. If you need to troubleshoot this, best contact iJungleboy on GitHub. Problems with Old / Unexpected Results MSBuild will compile everything into the obj folder of this docs-project. This is used as a cache for the next builds. If you run into unexpected results, always clean out the obj folder first. Problems with Github links DocFX automatically links all the auto-generated docs with the git-repo. So make sure that the oqtane.framework is pulled from the official location https://github.com/oqtane/oqtane.framework - otherwise the links will point to another repo."
  },
  "guides/docs/index.html": {
    "href": "guides/docs/index.html",
    "title": "Oqtane Documentation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Here we'll explain how the documentation works, with all the magic in it. The Basics Tip The Oqtane.Docs project generates the documentation for Oqtane using docfx. So for the most part, you'll want to read the docfx documentation to understand how it works. The Source Code This project has a src folder containing... markdown files in /pages for standalone docs pages markdown files in /apidoc for merging with XML-docs in the source of Oqtane various YAML files (.yml) which describe the navigation structure Solution (.sln) and project (.csproj) files to build the documentation docfx configurations (docfx.json and filterConfig.yml) various json configs so it also works in VS-Code It also requires the Oqtane.Framework project to be in a sibling folder (see setup) The Build Process flowchart TD CS[Oqtane C# Source\\n<code>../../oqtane.framework</code>] -->|⚙️Compiler| XD XD[\"Xml Docs\\n(temp)\"] --> MD[\"Merged API Docs\\n(temp)\"] DM[Docs Mixins\\n~/apidocs] --> MD CONTENT[Content/Articles\\n~/pages] --> Docs[Docs HTML\\n../docs/] ASS[Assets/Images\\n**/assets] --> Docs MD --> Docs TOC[\"TOC Files\\n**/toc.yml\"] --> TOCG Docs -->|generate| TOCG[\"Various TOCs\\n(Tables of Contents)\"] When you build this project, it will Compile Oqtane Extract the XML documentation from Oqtane and generate YAML and markdown files Merge the generated files with the ones in this project Generate a ../docs folder with static HTML files that can be hosted anywhere Note To test the generated docs locally, you'll need to host the ../docs folder on a web server. This is because there are some absolute paths used in some JavaScripts for the TOC (table of contents) and search functionality. The setup is explained below. Deployment When pushed back to Github, Github will automatically build and deploy to https://docs.oqtane.org Setup 👉 continue with Setup, Build, Test and Deploy"
  },
  "guides/docs/markdown.html": {
    "href": "guides/docs/markdown.html",
    "title": "Markdown Tips in the Oqtane Docs | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Markdown Tips in the Oqtane Docs Refer to Markdown for how to write markdown files. Here the most important tips for people working with this: Links Link to a website [website](https://www.oqtane.org/) Link to another page [page](./build.md) Link to some Oqtane.Models [](xref:Oqtane.Models) - will automatically pick the name of the target Link to a class File [](xref:Oqtane.Models.File) Images Images can be added it two ways - using markdown, or the HTML counterpart. We recommend to always place images in an assets folder below the markdown file you're using the image on. Here's an example using markdown: ![Folder structure for Building](./assets/folder-structure-for-building.jpg) Here an example using an <img> tag which lets you provide more settings: <img src=\"./assets/folder-structure-for-building.jpg\" width=\"100%\"> Checklists If you want to add checklists like this example, just use this checklist 😎 Videos Todo"
  },
  "guides/docs/project.html": {
    "href": "guides/docs/project.html",
    "title": "Oqtane Documentation Project | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Project There are kind of internal notes for the project team. It's based on various discussions in the team and the community. Docs Team The docs team is responsible for the documentation of Oqtane. It currently consists of: @iJungleboy (Team Lead) @thebaum @GregStevenson Top Level View Things to consider for the docs project Content: breadth, depth and quality of docs Maintenance / Timeliness: keep docs up to date with features & changes Use: get people to find use the docs Contribute: get people to contribute Content This covers a lot of areas: Content Breadth, Depth and Quality Code Documentation - volume and quality These are the XML comments in the source code which are maintained in the main repo Backgrounds / Concepts These are the \"What is Oqtane\" and \"What is a Module\" type of docs which both help understand something, and often serve as background for other docs. Without these backgrounds, pages will tend to repeat the same information since there's no primary link. User Help (what does this dialog / button do) Guides / How-To Link other resources Maintenance Things we should consider for maintenance new features changes in Oqtane which result in different UIs different ways to do things as a user different ways to develop something Use Bring people to docs eg. move \"Getting Started\" from Github to docs and link from Github/Oqtane Contribute Questions what motivates people to contribute to docs? how can we make it easy to contribute? can we provide benefits or visibility to contributors?"
  },
  "guides/docs/run-in-iis.html": {
    "href": "guides/docs/run-in-iis.html",
    "title": "Run Oqtane Docs Locally | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Run Oqtane Docs Locally The generated docs are static pages and contain various JavaScripts to provide menu and search functionality. These do not work, if you just open the index.html in a browser. So you need to run it in a local IIS to fully test it. This is how you can set it up: Warning about Caching The navigation / menus in docfx use JavaScript, so you'll sometimes see an old cached menu on your local system. Just activate F12 and disable cache to ensure that you're always viewing the latest build."
  },
  "guides/docs/tips/index.html": {
    "href": "guides/docs/tips/index.html",
    "title": "Oqtane Documentation Tips | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation Tips The following tips should help you be more productive when working on the docs. Use VS Code instead of Visual Studio VS Code is much lighter and faster than visual studio. It also has some neat features which will help, like: Markdown preview Markdown linting Live Server to see the built docs without having to setup IIS Install Recommended Extensions The VS Code docs project has recommended extensions which will help you be more productive. If you open the project the first time, it will ask you to install them. To install them later, go to the extensions tab and find the \"Show Recommended Extensions\". Use VS Code Preview VS-Code has a nice preview built in: But the improved Markdown Preview Enhanced extension is even better, as it even supports Mermaid. Learn Keyboard Shortcuts Build the docs using Ctrl + Alt + B. Use Live Server for Preview The Live Server extension lets you see the built docs without having to setup IIS. It also automatically refreshes the browser on every change, making it super-comfy. Install the extension run it using Alt + L, Alt + O... ...or by clicking the \"Go Live\" button in the status bar Use Markdown Linting Install the Markdown Lint extension. Disable Xml-Docs While Editing Content Rebuilding everything incl. the XML-docs from the Oqtane source code takes much longer than just building the docs from the markdown files. On my PC (iJungleboy) it takes about 32 seconds vs. 10 seconds. You want fast rebuilds while editing content (eg. not updating docs from the Oqtane source code). To \"temporarily\" disable the Xml-Docs, change the /docfx.json file from: { \"metadata\": [ { // Blank src sample // This should be used when making changes to the theme and wanting to see changes quickly, as it skips parsing the source code // To use, rename this to \"src\" and rename the real src to \"dummy-src\" while developing, then revert when done \"dummy-src\": [], // Oqtane Source Code - where it will extract the API docs from \"src\": [ to { \"metadata\": [ { // Blank src sample // This should be used when making changes to the theme and wanting to see changes quickly, as it skips parsing the source code // To use, rename this to \"src\" and rename the real src to \"dummy-src\" while developing, then revert when done \"src\": [], // Oqtane Source Code - where it will extract the API docs from \"-src\": [ Tip Don't forget to undo this change before committing your changes."
  },
  "guides/extensions/best-practices/create-solutions-for-each-extension.html": {
    "href": "guides/extensions/best-practices/create-solutions-for-each-extension.html",
    "title": "Oqtane Dev Best Practices: Separate Solutions for Each Extension | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Dev Best Practices: Separate Solutions for Each Extension To create custom themes and modules, you will typically create them in a separate solution. This has benefits such as: Your code base and the git-repos are small and focused. It helps keep your code organized and makes it easier to share your work with others. It allows you to more easily update the Oqtane runtime without affecting your custom code. It ensures your extensions actually work in a vanilla Oqtane. Typically these projects and solutions will have the following folder structure: /parent /oqtane.framework /SomeTheme /SomeModule /SomeOtherExtension This structure allows the modules to easily deploy the build output to the oqtane.framework folder, so it can be run in the Oqtane after every build. Tip Oqtane has built in assistants to generate template modules and themes. These will follow the above convention and also generate build-projects which will deploy the output to the oqtane.framework folder. Tip As you get more experienced, you can then adjust these automatic mechanisms to better suit your own workflow. In this setup, most Oqtane Modules/Themes will also reference the Oqtane framework project - but only to make it easier to run and debug directly from Visual Studio."
  },
  "guides/extensions/best-practices/use-nuget-for-dependencies.html": {
    "href": "guides/extensions/best-practices/use-nuget-for-dependencies.html",
    "title": "Oqtane Dev Best Practices: Use NuGet for Oqtane Dependencies | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Dev Best Practices: Use NuGet for Oqtane Dependencies Important The recommended structure may imply that the add-on solutions such as the themes should reference the oqtane.framework project or output DLLs. This is not recommended, as it will make your add-ons less portable and harder to maintain. Instead, you should use NuGet packages to reference the Oqtane framework in the version you currently target."
  },
  "guides/extensions/build/dev.html": {
    "href": "guides/extensions/build/dev.html",
    "title": "Oqtane Extension - Dev Build and Deployment | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Dev Build and Deployment These guides will help you understand how Oqtane Extensions (Themes and Modules) are built and deployed for development. This is not about building/distributing Oqtane itself, but about developing your own Themes and Modules. What Happens in a Dev-Build? This is the typical debug.cmd for a dev-build: XCOPY \"..\\Client\\bin\\Debug\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.dll\" \"..\\..\\oqtane.framework\\Oqtane.Server\\bin\\Debug\\net8.0\\\" /Y XCOPY \"..\\Client\\bin\\Debug\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.pdb\" \"..\\..\\oqtane.framework\\Oqtane.Server\\bin\\Debug\\net8.0\\\" /Y XCOPY \"..\\Client\\wwwroot\\*\" \"..\\..\\oqtane.framework\\Oqtane.Server\\wwwroot\\\" /Y /S /I As you can see, it will deploy your work to the Oqtane.Server project: Copy the DLL and PDB files into the Oqtane.Server folder which is right beside the current module - see Best Practices Copy the files in the wwwroot folder into the wwwroot folder of the Oqtane.Server project Tip As you can see, the debug.cmd has project names and paths hard-wired. You may need to adjust these values as your DLL names change or you move your projects around. Warning The DLLs are compiles to a specific path, e.g. …\\bin\\Debug\\net8.0\\…. Upon upgrading to a newer .net framework, you must adjust these paths. Remember to Restart your Oqtane After you have deployed your work, you must restart your Oqtane solution. This is because the DLLs are loaded into memory and will not be reloaded until the application is restarted."
  },
  "guides/extensions/build/index.html": {
    "href": "guides/extensions/build/index.html",
    "title": "Oqtane Extension - Build and Distribution (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Build and Distribution (WIP) These guides will help you understand how Oqtane Extensions (Themes and Modules) are packaged and distributed. This is not about building/distributing Oqtane itself, but about building and distributing your own Themes and Modules. Background Oqtane is a .net 8.0 Blazor application that is designed to be modular and extensible. This means that you can create your own modules, themes, and other extensions to customize your Oqtane solution. To get comfortable with Oqtane, you will need to understand how to package and distribute your themes and modules. We want to cover the following topics: What is a Build and What's Inside it? How does the Build Process Work? What is a package? What is a deployment? Build and deploy during development Build and deploy for distribution Distribute through NuGet, Github and the Oqtane Marketplace Basics: What is a Build and What's Inside it? A build is the process of taking your work preparing it to run. When we say your work this usually means: Your C# code Your Blazor code Your HTML, CSS, JavaScript Any additional images, fonts, etc. The build is usually done by Visual Studio and typically involves 3 steps: Compiling any JavaScript, SASS etc. using Webpack Compiling your C# and Razor code into one .net assembly Deploying the results, together with any other files (eg. supporting DLLs) deployment can be into other folders, or into a NuGet package How does the Build Process Work? The build process is usually done by Visual Studio. If you follow the current conventions, you will have a dedicated project called Oqtane...Package which is only responsible for the building process. Tip If you only build the main project, the result will just sit around and do nothing. You must build the package project to see anything useful. What is Triggered by the Build Process? The build process is configured in the Oqtane...Package.csproj file, explained here: <Project Sdk=\"Microsoft.NET.Sdk\"> <!-- some parts skipped for brevity --> <!-- This is where the distribution / package steps are configured, \"PostBuild\" --> <Target Name=\"PostBuild\" AfterTargets=\"PostBuildEvent\"> <!-- If Windows and creating a Dev-Build, Run \"debug.cmd\" --> <Exec Condition=\"'$(OS)' == 'Windows_NT' And '$(Configuration)' == 'Debug'\" Command=\"debug.cmd\" /> <!-- If Mac/Linux and creating a Dev-Build, Run \"debug.sh\" using bash --> <Exec Condition=\"'$(OS)' != 'Windows_NT' And '$(Configuration)' == 'Debug'\" Command=\"bash $(ProjectDir)debug.sh\" /> <!-- If Windows and creating a Release-Build, Run \"release.cmd\" --> <Exec Condition=\"'$(OS)' == 'Windows_NT' And '$(Configuration)' == 'Release'\" Command=\"release.cmd\" /> <!-- If Mac/Linux and creating a Release-Build, Run \"release.sh\" using bash --> <Exec Condition=\"'$(OS)' != 'Windows_NT' And '$(Configuration)' == 'Release'\" Command=\"bash $(ProjectDir)release.sh\" /> </Target> </Project> What Happens in a Dev-Build? ➡️ Read more about the Dev-Build What Happens in a Release-Build? ➡️ Read more about the Release-Build What's missing here? The previous example shows a default setup for a Theme. As you may have noticed, it doesn't have a WebPack or other JavaScript build steps. Tip As of now, the default templates/modules don't include examples for TypeScript or SASS."
  },
  "guides/extensions/build/release.html": {
    "href": "guides/extensions/build/release.html",
    "title": "Oqtane Extension - Release Build (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extension - Release Build (WIP) These guides will help you understand how Oqtane Extensions (Themes and Modules) are packaged and distributed. This is not about building/distributing Oqtane itself, but about packaging and distributing releases of your own Themes and Modules. What Happens in a Release-Build? This is the typical release.cmd for a release-build: del \"*.nupkg\" \"..\\..\\oqtane.framework\\oqtane.package\\nuget.exe\" pack Oqtane.Theme.Arsha.nuspec XCOPY \"*.nupkg\" \"..\\..\\oqtane.framework\\Oqtane.Server\\wwwroot\\Themes\\\" /Y As you can see, it will Delete any previous NuGet packages Use nuget.exe to pack the NuGet package instructions from the .nuspec file Copy the NuGet package into the wwwroot\\Themes folder of the Oqtane.Server project Tip The same warnings apply as for the debug.cmd - you may need to adjust paths and names. What's missing here? The previous example shows a default setup for a Theme. As you may have noticed, it doesn't have a WebPack or other JavaScript build steps. Tip As of now, the default templates/modules don't include examples for TypeScript or SASS. What is a (NuGet) Package? A package is a collection of files that are bundled together. In Oqtane, they are distributed in a .nupkg file, which is a NuGet package. Internally, a NuGet package is a ZIP file with a specific structure, so for discovery you can just rename a nuget package to .zip and open it. The definition of what goes inside a package is defined in a .nuspec file. The compiler will call nuget.exe and give it a NuSpec file to create the package. What is a NuSpec file? Here is an example of a .nuspec file: <?xml version=\"1.0\" encoding=\"utf-8\"?> <package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\"> <!-- Package information if publishing on NuGet.org --> <metadata> <!-- NuGet ID, must be unique to this extension --> <id>Oqtane.Theme.Arsha</id> <!-- Version, Copyright, URL etc. --> <version>1.0.0</version> <authors>Oqtane Labs Inc</authors> <owners>Oqtane Labs Inc</owners> <title>Arsha</title> <description>Arsha Theme for Oqtane</description> <copyright>Oqtane Labs Inc</copyright> <requireLicenseAcceptance>false</requireLicenseAcceptance> <license type=\"expression\">MIT</license> <projectUrl>https://github.com/oqtane/oqtane.framework</projectUrl> <!-- Icon file to be shown eg. on nuget.org, if published there --> <icon>icon.png</icon> <tags>oqtane theme</tags> <releaseNotes></releaseNotes> <summary></summary> <!-- Dependencies, in this case the Oqtane.Framework - These will be listed on NuGet.org (if you publish it there) - Oqtane may also check if they are installed before allowing installation --> <dependencies> <dependency id=\"Oqtane.Framework\" version=\"5.1.0\" /> </dependencies> </metadata> <!-- Files to be included in the package --> <files> <!-- DLLs and PDBs (PDBs contains line-numbers for debugging exceptions) --> <file src=\"..\\Client\\bin\\Release\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.dll\" target=\"lib\\net8.0\" /> <file src=\"..\\Client\\bin\\Release\\net8.0\\Oqtane.Theme.Arsha.Client.Oqtane.pdb\" target=\"lib\\net8.0\" /> <!-- All the files in your main projects wwwroot --> <file src=\"..\\Client\\wwwroot\\**\\*.*\" target=\"wwwroot\" /> <!-- Icon file, located in the same folder as the nuspec file --> <file src=\"icon.png\" target=\"\" /> </files> </package> Release Build FAQs What is a DLL and a PDB? A DLL is a Dynamic Link Library, which is a compiled .NET assembly. It contains the compiled code of your project, and can be executed by the .NET runtime. A PDB is a Program Database, which contains additional information for debugging. It contains line-numbers, variable names, and other information that can be used to debug exceptions. How can I Add more Files to the Package If you need to add more files to the package, you can add more <file> elements to the .nuspec file. You can also use wildcards, like **\\*.* to include all files in a folder. Tip Make sure you don't include any unnecessary files, as they will increase the size of your package. You will typically only want to include release files, and not include source files. How can I change the Icon Just replace the icon.png in the same folder as the .nuspec file. Make sure your file is really a png, and not a jpg or other format."
  },
  "guides/extensions/index.html": {
    "href": "guides/extensions/index.html",
    "title": "Oqtane Extensions Development Guides (WIP) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Extensions Development Guides (WIP) These guides will help you get started with developing Extensions on/with Oqtane. This is not about building Oqtane itself, but about building your own Extensions such as Themes and Modules. Background Oqtane is a .net 8.0 Blazor application that is designed to be modular and extensible. This means that you can create your own modules, themes, and other extensions to customize your Oqtane solution. Extensions can be: Themes Themes are the visual appearance of your Oqtane solution. They can be as simple as changing the colors and fonts, or as complex as changing the layout and adding new components. Modules Modules are the functional components of your Oqtane solution. They can be as simple as a single page with some text, or as complex as a full-featured application with a database backend. Language Packs Language Packs are translations of the user interface into different languages. They can be as simple as a few words, or as complex as a full translation of the entire user interface. Pure Extensions Pure Extensions are any other type of extension that you can think of. For example, an Image-Resizer which doesn't have a UI. Prerequisites To develop on Oqtane, you will typically need the following skills / tools: Visual Studio 2022 with the latest .net 8.0 SDK SQL Server (alternatives are possible, but this is the easiest to get started) C# programming skills The following skills are also useful, or will need to be developed as you go: Blazor programming skills HTML / CSS / JavaScript / Bootstrap5 skills Git / GitHub skills Oqtane installation Basic Setup You will need to install Oqtane on your development machine to get started. For this you have 2 options: Clone/Fork the Oqtane Source Code to your local machine and run using Visual Studio This is the most common option, and the best way to also track down any issues. Install a runtime version of Oqtane in your web server This is the method you'll use when you create many Oqtane solutions, since it will run faster and allow you to focus on only the code you write. Next Steps Read about: Best Practices Themes Modules"
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "Guides WIP | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Guides WIP This will probably become a main entry point to guide users through more complex topics. Note This is a quick thing to get people started. This contents may be moved elsewhere Current Guides 👉 Select from the menu External Guides / Valuable Articles Some helpful articles that are not part of the official documentation. Oqtane Official Blog BlazorHelpWebsite.com: Configuring The Blazor Oqtane Blog Module BlazorHelpWebsite.com: Creating a Custom Distribution of Blazor Oqtane Using Site Templates BlazorHelpWebsite.com: Oqtane Deploy to Azure BlazorHelpWebsite.com: Installing Blazor Oqtane BlazorHelpWebsite.com: Oqtane Module Creator BlazorHelpWebsite.com: What is Blazor Oqtane?"
  },
  "guides/render/index.html": {
    "href": "guides/render/index.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "An Example-Render This should explain a basic render process of one specific scenario, as a foundation for understanding the various scenarios explained later on. The scenario is a Interactive WASM Oqtane site without Prerendering. This means: The server is responsible for delivering data to the Web Assembly client. The Web Assembly client is responsible for generating the HTML Handing the HTML to the browser handling user interactions What will happen is this: The browser requests the page The server generates some minimal HTML containing a bit of JavaScript to load the WASM The browser loads the bootloader The bootloader requests all the WASM files containing Blazor themes, components, services and more The Server returns these WASM files, some were precompiled / optimized, others are .net assemblies converted on the fly. The bootloader hands over to the WASM to run the application The WASM requests the data from the server - especially the site structure and the current page structure The WASM runs the theme \"component\" to generate the HTML The theme uses the site structure, settings etc. to generate the menus (usually with other Blazor controls) The theme uses the page structure to generate the Panes and Modules inside the panes Each module first loads a Container which is another small wrapper Blazor component ...and inside that container the module is loaded The module requests the data it needs from the server The module generates the HTML Ways a Theme and Module can Render SSR - Initial Load - Easiest to understand SSR - Soft-Load - enhanced Navigation Prerender Interactive Server - Initial Load Interactive Server - Soft-Load Interactive Client WASM - Initial Load Interactive Client WASM - Soft-Load Your Theme or Control could be Static Output Interactive Output ...and it could be inside of a Module or a Theme which is Static Interactive ...and the site could be Static Interactive Automatic - starting as static and transferring to Interactive Flow of a Click - Event SSR: Click....tbd"
  },
  "guides/roadmap/index.html": {
    "href": "guides/roadmap/index.html",
    "title": "Oqtane Roadmap and History | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Roadmap and History This page provides an overview of the Oqtane roadmap and history. It includes the current version, upcoming features, and the history of Oqtane. Roadmap This project is open source, and therefore is a work in progress... Backlog (TBD) 🔳 Azure Autoscale support (ie. web farm) 🔳 Folder Providers 🔳 Generative AI Integration Current Priorities 🔳 SSR Stabilization Release History Oqtane 5 (.net 8, SSR) Oqtane 5.1.1 (Apr 16, 2024) ✅ Stabilization improvements Oqtane 5.1.0 (Mar 27, 2024) Release Announcement Oqtane 5.1 ✅ Migration to the new unified Blazor approach in .NET 8 (ie. blazor.web.js) ✅ Static Server Rendering (SSR) support Oqtane 5.0.2 (Jan 25, 2024) ✅ Stabilization improvements Oqtane 5.0.1 (Dec 21, 2023) ✅ Stabilization improvements Oqtane 5.0.0 (Nov 16, 2023) Release Announcement Oqtane 5.0 ✅ Migration to .NET 8 Oqtane 4 (.net 7) Oqtane 4.0.6 (Oct 16, 2023) ✅ Stabilization improvements Oqtane 4.0.5 (Sep 26, 2023) ✅ Stabilization improvements Oqtane 4.0.4 (Sep 25, 2023) ✅ Stabilization improvements ✅ User Import Oqtane 4.0.3 (Aug 29, 2023) ✅ Stabilization improvements Oqtane 4.0.2 (Aug 9, 2023) ✅ Stabilization improvements Oqtane 4.0.1 (Jul 18, 2023) ✅ Stabilization improvements Oqtane 4.0.0 (Jun 26, 2023) Release Announcement Oqtane 4.0 ✅ Migration to .NET 7 ✅ Improved JavaScript, CSS, and Meta support ✅ Optimized Client Assembly Loading ✅ Routable Modules (ie. declarative configuration) ✅ Site Template improvements ✅ IEventSubscriber interface Oqtane 3 (.net 6, MAUI) Oqtane 3.4.3 (May 3, 2023) ✅ Stabilization improvements Oqtane 3.4.2 (Mar 29, 2023) ✅ Stabilization improvements Oqtane 3.4.1 (Mar 13, 2023) ✅ Stabilization improvements Oqtane 3.4.0 (Mar 12, 2023) Release Announcement Oqtane 3.4 ✅ Permissions performance optimization ✅ Connection string management improvements ✅ XML site map generator ✅ OIDC integration with User Profiles Oqtane 3.3.1 (Jan 14, 2023) ✅ Stabilization improvements Oqtane 3.3.0 (Jan 12, 2023) Release Announcement Oqtane 3.3 ✅ Dynamic Authorization Policies ✅ Entity-Level Permissions ✅ Extended Module Permissions Oqtane 3.2.1 (Oct 17, 2022) ✅ Stabilization improvements ✅ Server Event System Oqtane 3.2.0 (Sep 13, 2022) Release Announcement Oqtane 3.2 ✅ .NET MAUI / Blazor Hybrid support ✅ Upgrade to Bootstrap 5.2 Oqtane 3.1.3 (Jun 27, 2022) ✅ Stabilization improvements Oqtane 3.1.2 (May 14, 2022) ✅ Stabilization improvements Oqtane 3.1.1 (May 3, 2022) ✅ Stabilization improvements Oqtane 3.1.0 (Apr 5, 2022) Release Announcement Oqtane 3.1 ✅ User account lockout support ✅ Two factor authentication support ✅ Per-site configuration of password complexity, lockout criteria ✅ External login support via OAuth2 / OpenID Connect ✅ Support for Single Sign On (SSO) via OpenID Connect ✅ External client support via Jwt tokens ✅ Downstream API support via Jwt tokens ✅ CSS resource hierarchy support ✅ Site structure/content migration ✅ Event log notifications ✅ 404 page handling ✅ Property change component notifications ✅ Support for ES6 JavaScript modules Oqtane 3.0.3 ( Feb 15, 2022) ✅ Url fragment and anchor navigation support ✅ Meta tag support in page head ✅ Html/Text content versioning support Oqtane 3.0.2 ( Jan 16, 2022) ✅ Default alias specification, auto alias registration, redirect logic ✅ Improvements to visitor tracking and url mapping ✅ Scheduler enhancements for stop/start, weekly and one-time jobs ✅ Purge job for daily housekeeping of event log and visitors ✅ Granular security filtering for Settings Oqtane 3.0.1 ( Dec 12, 2021 ) ✅ Url mapping for broken links, content migration ✅ Visitor tracking for usage insights, personalization ✅ User experience improvements in Page and Module management Oqtane 3.0.0 ( Nov 11, 2021 ) Release Announcement Oqtane 3.0 ✅ Migration to .NET 6 ✅ Blazor hosting model flexibility per site ✅ Blazor WebAssembly prerendering support Oqtane 2 Oqtane 2.3.1 ( Sep 27, 2021 ) ✅ Complete UI migration to Bootstrap 5 and HTML5 form validation ✅ Improve module/theme installation and add support for commercial extensions ✅ Replace System.Drawing with ImageSharp ✅ Image resizing service Oqtane 2.2.0 ( Jul 6, 2021 ) Release Announcement Oqtane 2.2 ✅ Bootstrap 5 Upgrade ✅ Package Service integration ✅ Default and Shared Resource File inclusion ✅ Startup Error logging ✅ API Controller Validation and Logging Oqtane 2.1.0 ( Jun 4, 2021 ) Release Announcement Oqtane 2.1 ✅ Cross Platform Database Support ( ie. LocalDB, SQL Server, SQLite, MySQL, PostgreSQL ) - see #964 ✅ Utilize EF Core Migrations - see #964 ✅ Public Content Folder support ✅ Multi-tenant Infrastructure improvements ✅ User Authorization optimization ✅ Consolidation of Package Management ✅ Blazor Server Pre-rendering ✅ Translation Package installation support Oqtane 2.0.2 ( Apr 19, 2021 ) ✅ Assorted fixes and user experience improvements Oqtane 2.0.1 ( Feb 27, 2021 ) ✅ Complete Static Localization of Admin UI Oqtane 2.0.0 ( Nov 11, 2020 ) Release Announcement Oqtane 2.0 ✅ Migration to .NET 5 ✅ Static Localization ( ie. labels, help text, etc.. ) ✅ Improved JavaScript Reference Support ✅ Performance Optimizations ✅ Developer Productivity Enhancements Oqtane 1 Oqtane 1.0.0 ( May 19, 2020 ) Release Announcement Oqtane 1.0 ✅ Migration to .NET Core 3.2 ✅ Multi-Tenant ( Shared Database & Isolated Database ) ✅ Modular Architecture ✅ Headless API with Swagger Support ✅ Dynamic Page Compositing Model / Site & Page Management ✅ Authentication / User Management / Profile Management ✅ Authorization / Roles Management / Granular Permissions ✅ Dynamic Routing ✅ Extensibility via Custom Modules ✅ Extensibility via Custom Themes ✅ Event Logging / Audit Trail ✅ Folder / File Management ✅ Recycle Bin ✅ Scheduled Jobs ( Background Processing ) ✅ Notifications / Email Delivery ✅ Seamless Upgrade Experience ✅ Progressive Web Application Support ✅ JavaScript Lazy Loading ✅ Dynamic CSS/Lazy Loading Proof of Concept Oqtane POC ( May 9, 2019 ) Release Announcement Oqtane POC ✅ Initial public release on GitHub ✅ .NET Core 3.0"
  },
  "guides/themes/generator/index.html": {
    "href": "guides/themes/generator/index.html",
    "title": "Oqtane Themes Generator | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Themes Generator Brief tutorial how to use the built-in Themes Generator. Oqtane helps you get started with themes by providing a built-in Themes generator. It will create a Visual Studio solution for you, containing all the necessary parts to start customizing your own theme. Start the Generator In your Oqtane site, go to /admin/themes to see the Themes management: Click on \"Create Theme\" and fill in the wizard as follows: Owner Name should be your company name or similar. It will be used in the Namespace of the generated code. Theme Name will be the technical name of the theme. It too will be used in the Namespace of your generated code. Template is meant to select from various templates, but as of now there is only one. Framework Reference is to decide what Oqtane (not .net Framework) your Theme will target, but as of now you can always only select the current framework running on your Oqtane. Location is where the generated code will be placed. It is best practice to put this side-by side to your Oqtane solution. Once you click on Create Theme you will see: Continue in Visual Studio The generator created this folder with a visual studio solution beside your Oqtane Framework folder: Next, open the solution file in that folder:"
  },
  "guides/themes/index.html": {
    "href": "guides/themes/index.html",
    "title": "Oqtane Themes Guide | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Themes Guide Oqtane Themes are extensions to customize the look and feel of your Oqtane website. This guide will help you get started with creating and using themes in Oqtane. What is a Theme? A theme is a collection of files that define the look and feel of your website. Themes can include CSS, JavaScript, images, and other assets that are used to style your website. Since Oqtane is based on .net and Blazor, themes are built using Blazor components and these are compiled into a DLL that is loaded by the Oqtane framework. Here's an example: In this example, the theme controls: Placement, size and styling of the logo - as well as how it changes in responsive scenarios. The layout of the main menu, including the dropdowns. The layout of the footer, including the social media links. Font sizes and colors for various headings and normal text. Next Steps Tip Before diving too deep into themes, make sure you understand the basics of Extensions. Read about: Parts of an Oqtane Theme Theme Distribution and Installation Theme Code Explained Theme Solution Explained Tasks to complete these guides The following topics should be covered as soon as possible (help wanted!) How to create a new theme - step by step starting with the built-in assistant How to customize an existing theme How to install a theme How to uninstall a theme How to update a theme How to create a theme from scratch How to publish a theme in the Marketplace Guidance for assets / resources Guidance for render modes and edge cases / SSR .net 8.0 Guidance for responsive design Guidance for accessibility Guidance for performance & SEO Best Practices for assets - especially JS/CSS Some guidance on CSS variables / Bootstrap 5.3 conventions"
  },
  "guides/themes/oqtane-theme-code-explained.html": {
    "href": "guides/themes/oqtane-theme-code-explained.html",
    "title": "Themes - Code Structure of a Theme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes - Code Structure of a Theme Internally a theme only needs the following 4 things: An own namespace such as YourCompany.Themes.YourTheme. A ThemeInfo.cs file in that namespace which implements Oqtane.Themes.ITheme. This file contains information about the theme like name, author, version, etc. A theme file like MyTheme.razor which is the main thing shown to the user. A container file like Container.razor which is the main wrapper around a module. Warning It is crucial that the namespace of the theme is unique, and that all these core elements (ThemeInfo, Theme, Container) are in exactly this namespace. Example from the Oqtane Arsha Arsha is a sample theme that comes with Oqtane. You can find the git repo here. ThemeInfo.cs The ThemeInfo.cs file is necessary to provide information about the theme. In the code you can see it contains The namespace of the theme - must be unique, and must match the theme/container namespace the Name of the theme - displayed to the user the Version of the theme the PackageName - used for installation / differentiation the optional ThemeSettingsType (class name) of the theme settings the optional ContainerSettingsType (class name) of the container settings a list of Resources - CSS and JS files that are loaded when the theme is used note: the Resources can also be specified in each Theme.razor file using System.Collections.Generic; using Oqtane.Models; using Oqtane.Themes; using Oqtane.Shared; namespace Oqtane.Theme.Arsha { public class ThemeInfo : ITheme { public Models.Theme Theme => new Models.Theme { Name = \"Arsha\", Version = \"1.0.0\", PackageName = \"Oqtane.Theme.Arsha\", ThemeSettingsType = \"Oqtane.Theme.Arsha.ThemeSettings, Oqtane.Theme.Arsha.Client.Oqtane\", ContainerSettingsType = \"Oqtane.Theme.Arsha.ContainerSettings, Oqtane.Theme.Arsha.Client.Oqtane\", Resources = new List<Resource>() { // Google Fonts new Resource { ResourceType = ResourceType.Stylesheet, Url = \"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i%7CRaleway:300,300i,400,400i,500,500i,600,600i,700,700i%7CPoppins:300,300i,400,400i,500,500i,600,600i,700,700i\" }, // Vendor CSS Files new Resource { ResourceType = ResourceType.Stylesheet, Url = \"~/assets/vendor/aos/aos.css\" }, // ...rest of files omitted for brevity // Template Main CSS File new Resource { ResourceType = ResourceType.Stylesheet, Url = \"~/assets/css/style.css\" }, // Vendor JS Files new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/vendor/aos/aos.js\", Location = ResourceLocation.Body }, // ...rest of files omitted for brevity // Template Main JS File new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/js/main.js\", Location = ResourceLocation.Body, Reload = true, RenderMode = RenderModes.Static }, new Resource { ResourceType = ResourceType.Script, Url = \"~/assets/js/interop.js\", Location = ResourceLocation.Body, RenderMode = RenderModes.Interactive } } }; } } The Theme File The Theme.razor file is the main file that is shown to the user. It contains the HTML structure of the theme and can include other Blazor components. Important things to know: The @namespace directive must match the namespace of the theme The @inherits directive must inherit from ThemeBase or a class that inherits from ThemeBase The @inject directive can be used to inject services like NavigationManager or ISettingService The @code block can contain C# code that is executed when the component is rendered The HTML part - which is the HTML inside the <body> tag (without <head> etc.). This \"html\" can be normal HTML such as div, section, h1, p, img etc. Razor variables such as @PageState.Page.Name Razor data from functions such as @NavigateUrl() Razor statements such as @if or @foreach Blazor components such as <NavMenu /> or <Login /> @namespace Oqtane.Theme.Arsha @inherits ThemeBase @inject NavigationManager NavigationManager @inject ISettingService SettingService <!-- ======= Header ======= --> <header id=\"header\" class=\"@_headerclass\"> <div class=\"container d-flex align-items-center\"> <!-- omited for brevity --> <nav id=\"navbar\" class=\"navbar\"> <NavMenu /> </nav> <div class=\"mx-3 controls-group\"><UserProfile /> <Login /> <ControlPanel /></div> </div> </header> <!-- End Header --> @if (!string.IsNullOrEmpty(_hero)) { <!-- ======= Hero Section ======= --> @((MarkupString)_hero) <!-- End Hero --> <!-- ======= Main ======= --> <main id=\"main\"> <Pane Name=\"@PaneNames.Default\" /> </main> <!-- End #main --> } else { <!-- ======= Main ======= --> <main id=\"main\"> <!-- ======= Breadcrumbs ======= --> <section class=\"breadcrumbs\"> <div class=\"container\"> <h2 class=\"mt-2\">@PageState.Page.Name</h2> </div> </section><!-- End Breadcrumbs --> <section class=\"inner-page\"> <div class=\"container\"> <Pane Name=\"@PaneNames.Default\" /> </div> </section> </main> <!-- End Main --> } <!-- ======= Footer ======= --> @((MarkupString)_footer) <!-- End Footer --> <a href=\"@NavigateUrl()\" class=\"back-to-top d-flex align-items-center justify-content-center\" data-enhance-nav=\"false\"><i class=\"bi bi-arrow-up-short\"></i></a> @code { public override string Name => \"Default\"; public override string Panes => PaneNames.Default; private string _hero = \"\"; private string _headerclass = \"\"; private string _footer = \"\"; protected override async Task OnParametersSetAsync() { // omitted for brevity } protected override async Task OnAfterRenderAsync(bool firstRender) { // omitted for brevity } private string DefaultFooter { get { return \"<footer id=\\\"footer\\\">\\n\" + \" <div class=\\\"footer-newsletter\\\">\\n\" + <!-- omitted for brevity --> \" </div>\\n\" + \"</footer>\\n\"; } } } The Container File The Container.razor file is the main wrapper around a module. Here's what you should know: The @namespace directive must match the namespace of the theme The @inherits directive must inherit from ContainerBase or a class that inherits from ContainerBase The @inject directive can be used to inject services like ISettingService The @code block can contain C# code that is executed when the component is rendered The HTML parts with the same possibilities as the theme above. @namespace Oqtane.Theme.Arsha @inherits ContainerBase @inject ISettingService SettingService @if (_title) { @if (_animate) { <section> <div class=\"container\" data-aos=\"fade-up\"> <ModuleActions /> @if (ModuleState.Title != \"-\") { <div class=\"section-title\"> <h2>@ModuleState.Title</h2> </div> } <div class=\"row\"> <ModuleInstance /> </div> </div> </section> } else { <!-- omitted for brevity --> } } else { <!-- omitted for brevity --> } @code { private bool _title = true; private bool _animate = false; protected override void OnParametersSet() { // omitted for brevity } } Blazor Components In addition to the required minimum files, you can also include other Blazor components. Here's an example of the NavMenu.razor. It doesn't do much, but check if the menu should show, and then calls the NavMenuItems component. @namespace Oqtane.Theme.Arsha @inherits MenuBase @if (MenuPages.Any()) { <NavMenuItems ParentPage=\"null\" Pages=\"MenuPages\" /> <i class=\"bi bi-list mobile-nav-toggle\"></i> } The NavMenuItems.razor is way more complex, as it recursively calls itself to render the menu items. @namespace Oqtane.Theme.Arsha @inherits MenuItemsBase <ul> @foreach (var childPage in GetChildPages()) { var _attributes = new Dictionary<string, object>(); _attributes.Add(\"href\", GetUrl(childPage)); var _target = GetTarget(childPage); if (!string.IsNullOrEmpty(_target)) _attributes.Add(\"target\", _target); if (!childPage.HasChildren) { <!-- omitted for brevity --> } else { <li class=\"dropdown\"> <a @attributes=\"_attributes\"><span>@childPage.Name</span> @if (childPage.Level == 0) <i class=\"bi bi-chevron-down\"></i> else <i class=\"bi bi-chevron-right\"></i> </a> <NavMenuItems ParentPage=\"childPage\" Pages=\"Pages\" /> </li> } } </ul>"
  },
  "guides/themes/oqtane-theme-distribution.html": {
    "href": "guides/themes/oqtane-theme-distribution.html",
    "title": "Themes - Distribution and Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes - Distribution and Installation Themes are usually distributed as nuget packages. Internally such a nuget package is actually just a ZIP file. It contains: a .nuspec file containing information about it's contents a lib folder containing the DLL file(s) a wwwroot folder containing the JS and CSS files an icon.png file and some other files which are not important to us Installation Theme installation works like any other module installation in Oqtane. You can install a theme by either... uploading the nuget package in the Modules section of the admin area by auto-downloading it from the Oqtane marketplace by placing it in the Packages folder of your Oqtane installation manually copying the files to your Oqtane installation ...and then restarting Oqtane."
  },
  "guides/themes/oqtane-theme-solution-explained.html": {
    "href": "guides/themes/oqtane-theme-solution-explained.html",
    "title": "Themes - Theme Solution Explained | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes - Theme Solution Explained A Oqtane Theme Solution is a Visual Studio project which is the basis for building a theme. It will typically contain the following in one or more projects: The basics such as the ThemeInfo.cs, the theme files and the container files. A wwwroot folder with the CSS and JS files. A .nuspec file to package the theme into a nuget package. Code and specs to build / compile the result - such as package.json and webpack.config.json. Code and specs to deploy the result - such as a .nuspec file. An icon file, copyright information and more. In the example of the Arsha theme you can see that the theme solution contains two projects: The first one is the theme and everything it consists of The second one is the packaging project which separates nuget-creation into a separate project. Tip This separation of projects makes work easier, so we recommend you do the same. See also Oqtane Dev Best Practices: Separate Solutions for Each Extension."
  },
  "guides/themes/parts-of-an-oqtane-theme.html": {
    "href": "guides/themes/parts-of-an-oqtane-theme.html",
    "title": "Themes Guide - Parts of a Theme | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Themes Guide - Parts of a Theme Oqtane themes - when installed - consist of the following core parts: A DLL file that contains the compiled Blazor components. JS and CSS files in wwwroot/Themes/[your-theme-name]."
  },
  "index.html": {
    "href": "index.html",
    "title": "Oqtane Documentation 5.1.2 | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Documentation 5.1.2 Oqtane is the Modular Application Framework for Blazor Modern, Flexible, and Open Source - running on .net 8.0! Documentation Contents In Guides you'll find background infos etc. The Administration Manuals is WIP In the API Documentation you'll find all the APIs To work on the docs, better read up on how the docs work"
  },
  "manuals/admin/admin-dashboard/file-management.html": {
    "href": "manuals/admin/admin-dashboard/file-management.html",
    "title": "File Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "File Management Nearly everything you could need to do with files and folders in Oqtane can be done from this view. You have the ability to upload, edit, and delete files and folders. You can also control where files are stored and what permissions should be applied to which folders. Folder permissions specified by roles allow you to determine who can see folders and files and who is allowed to modify the contents of a folder. The options provided by the file manager are: A drop down menu to select the file in which you what your view to placed in. Edit Folder: Lets you change the parent of the folder, the name of the folder, and the permissions for what roles are able to see and access the folder and its files. Add Folder: Allows you to create a new folder with the ability to choose a name, parent folder, and permissions to access. Upload Files: This is the feature that allows for user to upload files like images from their local system to a folder in Oqtane and allows for files to downloaded from Oqtane to their local system."
  },
  "manuals/admin/admin-dashboard/index.html": {
    "href": "manuals/admin/admin-dashboard/index.html",
    "title": "Admin Dashboard | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Admin Dashboard The admin dashboard has a variety of different tools for administrators to use in order to better manage their website and to add a great amount of functionality to the website. By selecting the gear icon in the top right of a page while being on an administrator account, then selecting the admin dashboard option at the top of the control panel, which will bring up a menu with a variety of options that can be selected. The default options in the dashboard that Oqtane offers for an administrator to use are: Site Settings: Which provides a variety of settings to be able to modify and personalize your website with more information in the site settings. Page Management: Which provides a list of all pages on your website and provides the ability to to manipulate them in a variety of ways with more info on page management. User Management: Which allows for the additional and modification of user accounts with more info on user management. Profile Management: Which lets you specify what informational fields are available for a user to both optionally have and must have on their account with more info on profile management. Role Management: Which specifies what type of security group the user's account belongs in like giving an account administrative rights, with more info on role management. File Management: Which allows the uploading of files like images to be inserted into pages with more info on file management. Recycle Bin: Which allows for the restoration or full deletion of pages that were previously deleted with more info on recycle bin. If you want to add new options to the admin dashboard, then that can be done by creating a new page either in the control panel or in the admin dashboard's page management and specifying that you want \"Admin\" as the parent of the new page."
  },
  "manuals/admin/admin-dashboard/page-management.html": {
    "href": "manuals/admin/admin-dashboard/page-management.html",
    "title": "Page Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Page Management Pretty much every website starts out as one thing first and foremost: a collection of pages that constitute a web presence. Each page will have a purpose (we hope) and serve it well. As you have seen after the default installation of Oqtane, you are even given a home page to work with on the first load of your new site. Your next step might be to create additional pages, such as About Us, Contact Us, and more. As your site continues to become successful and grows to meet the needs of your customers and other visitors, you will undoubtedly begin to have more and more pages on your site. You'll have so many that at some point you will need to manage them from a centralized location. In other cases, you might have pages that are hidden from the menu and are not easily accessible. This is where the Page Management feature comes in to allow for a larger overview of the pages on your website, with all pages on your website viewable in a list format. These pages can be manipulated in the page manager by being able to add, edit, and delete pages. Add The add feature adds a new page to your website and brings up the page management window, which allows you to specify the settings, appearance, and permissions for the page you are adding. The fields which exist in the page management window are the: Settings Name: Which specifies the name that will be displayed in the navigation bar. Parent: Which will specify the page that this page will be underneath, meaning that the added page will be put to the right of the page specified in the navigation bar at the top. Insert: Specify where the name for the page will appear in the navigation bar, by saying where the page should appear among all of the children of the parent that has been selected. Navigation: Say whether you want the page to be displayed to users that fit within the permissions, or if you want the page to be hidden to everyone but administrators which can be useful while editing a page. URL Path: The url is what is put in the web page's address, for example if the url path is set to page1 then the address might be www.website/page1.com. If no URL path is specified then the URL will by default be set to be the same as the name field above. Redirect: Input a URL that is the same as the URL path of another page in the site that user will be sent to, remember that if no URL path is specified for another page then the name will be used. If this feature is implemented then you will not be able stay on the page to use the control panel's page manager, so you will need to edit or delete page's with this feature. Appearance Title: The name that is displayed on the web page's tab. Theme: The theme that the web page will take on. In the admin dashboard's theme management feature you can see more information on these theme and import new themes to be used. Default Container: Choose the layout of modules for the page, like hw the titles typically displayed above the modules will be. Icon: Input a favicon address or other icon address to include an icon beside the name of your page. Personalizable: This feature gives a page that is unique to every individual and allows them to add modules and edit the content of the page, so only the individual can see what they put onto the page. Permissions View: This is what allows different users to see certain pages and any users that are within certain roles, that can be specified in the admin dashboard's role management feature will be able to see or not see the page depending on what you have checked the box for the role they fit into. Edit: This allows users that fit into the specified roles to be able to edit pages using the content editor. Specific Users: The permissions tab also has the ability for you to enter a specific username and allow for you to set custom permissions for any specific users that you want. Edit The edit feature shares all of the same features as the add feature, allowing you to change the settings, appearances, and permissions of any page, with the insert feature being replaced by the move feature. The edit feature also shows you when a page was created and when the page was last edited at the bottom of the page management window. Delete The delete feature will delete the page that you are currently on and you can recover the page or fully delete the page in the admin dashboard's recycle bin."
  },
  "manuals/admin/admin-dashboard/profile-management.html": {
    "href": "manuals/admin/admin-dashboard/profile-management.html",
    "title": "Profile Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Profile Management The profile manager exposes one of the more powerful and under-appreciated features that Oqtane has to offer. The profile manager expose to you a few features, but the primary feature is the profile editor, which allows you to customize completely the profile fields that a user account has in nearly every way possible. This is the backbone of all of the user profile features in Oqtane. The Oqtane profile manager allows for a user to specify more things about themselves than the typical information from a basic user account. Fields from the profile can be made to be required upon making an account such as making a name or address a required field. The profile page has an add profile button at the top of its page which includes: Name: The name of the profile item as it would be accessible in the database. Title: The title of the field displayed to the user. Description: Enter a description for the profile that will be what shows up for the help icon for the field. Category: The name for a grouping of fields such as the name or address headings that are by default included in the profile tab above their respective groupings of fields. Order: Choose the spot where in the list of profile fields that this one will appear with 0 being the first position. Lenth: The maximum length that can be input into this field, with a 0 for unlimited length. Default Value: The value that will be put into this field if the user doesn't enter anything into it. Options: Has the ability to create a list of items that can be selected and is enter by a list with commas in between the items (a,b,c). Required?: Specify whether or not the field is required upon the creation of a new account. Private: Specify whether it should be seen by regular user or should just been seen by administrators. There is also the option to edit or delete any of the fields that have already been created with edit and delete buttons on each item in the list of profile fields."
  },
  "manuals/admin/admin-dashboard/recycle-bin.html": {
    "href": "manuals/admin/admin-dashboard/recycle-bin.html",
    "title": "Recycle Bin | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Recycle Bin The Recycle Bin is a very useful and often overlooked feature of Oqtane, especially for new users. Oftentimes, a newly designated administrator for a site will simply assume that when something is deleted, it is gone. The next logical step would probably be to re-create the content that was just deleted. This could lead to frustrations with Oqtane. The Recycle Bin allows you to restore the content in most cases, which can save you time and frustration. The Recycle Bin has two types of objects that can be restored, Pages and Modules. When you delete a page or a module, it will show up in the respective list. You can switch which list you're looking at by clicking the tabs at the top of the page. Clicking retore on one of the pages or modules will allow you to restore the selected item to their original place in your site. The recycle bin feature has two options, restore and delete. With the restore button, the page or module is restored to its original location. The delete button permanently deletes the page from your website and you will cause it be removed permanently."
  },
  "manuals/admin/admin-dashboard/role-management.html": {
    "href": "manuals/admin/admin-dashboard/role-management.html",
    "title": "Role Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Role Management Security Roles in Oqtane are nothing more than a grouping of one or more users for a purpose. That purpose is up to you. The purpose could be to see exclusive content in a specific area of the site or on specific pages in the site. It could also be to have the ability to edit content on one or more pages or to create content in a specific module, like a blog. We could go on and on. Just remember that Security Roles can be used for content targeting, editing, and hiding sections of your site. Security Roles work the same as most permissions-based systems, such as Windows. You first create a Security Role if it doesn't already exist to create a grouping of users. Then, you add one or more people to that group. Once you do that minimal setup, you can apply that group to various capabilities, permissions, and features. Permissions are set when creating or editing pages and modules by selecting which roles can edit or view them. At the top of the page is the add role button that allows for the addition of a new group you want to make, with a name, description, and saying if it should be automatically assigned to users. You can edit, delete, and manage users in each role except for the default administrator and registered users roles which you cannot edit or delete, you can only manage their users. When adding a user into a role, there are fields for effective date and expiry date, which determines when a user will be added to a roles and how long they will be inside of a role."
  },
  "manuals/admin/admin-dashboard/site-settings.html": {
    "href": "manuals/admin/admin-dashboard/site-settings.html",
    "title": "Site Settings | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Settings The Site Settings feature contains a large number of settings that you can use to perform high-level administrative configuration for your site. The Settings mostly contains set-it-and-forget it options that should be managed once when you build your site. Some of these settings include the default look and feel for new pages created on your site, your site logo, and default metadata for pages. The main parts of the settings are basic settings, SMTP configuration, and progressive web app configuration. Basic Settings Basic Settings mostly contains set-it-and-forget it options that should be managed once when you build your site. Name: What you want to call the website. Tenant: The name of the database you wan the site to use. Aliases: The name that will appear for the sites URL. Logo: The logo that will appear in the navigation bar. Favicon: Enter a favicon address or another icon address to have a default icon to appear beside each page in the navigation bar. Default Theme: Choose a default theme tht will give a different color scheme and structure. Default Layout: Choose how many columns a page has by default. Default Container: Choose if you want titles to appear about each module by default. Allow User Registration: Should users be able to create their own accounts or should only administrators be able to create accounts. Is Deleted: Select whether you want to delete this site. SMTP Server (Secure Mail Transfer Protocol) The Oqtane instance sends outbound email for a variety of reasons, from the host or site admin or in the form of password reminders, event notifications, newsletters, or other business-specific use cases. A valid SMTP server is required for this to work; you should consult your network administrator for the appropriate credentials to use in a production configuration. Most non-Exchange Server SMTP hosts will require “Basic” authentication and a valid username/password combination. Some will also require that SSL be enabled. Host: Enter the host name for the server. Port: Enter the port number that the server is on. SSL Enabled: Specify yes or no if the SMTP server has an SSL certificate. Username: Enter the username for the SMTP server you are accessing. Password: Enter the password for the SMTP server you are accessing. Progressive Web Application Settings Is Enabled: Choose whether or not you want the site to be set up as a progressive web application. App Icon: Select a PNG image that is 192 X 192 pixels which will be the app icon for your application. Splash Icon: Select a PNG image that is 512 X 512 pixels which will appear on the screen while the application is loading."
  },
  "manuals/admin/admin-dashboard/user-management.html": {
    "href": "manuals/admin/admin-dashboard/user-management.html",
    "title": "User Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "User Management One of your primary responsibilities as the site administrator will likely be to manage users on your site. You might need to create, edit, or delete users. You might also be required to add and remove abilities from users on your site. Everything that you need to do in these examples can be done from this one menu. The options that are provided on this user manager includes: Add User: The add new user button is exactly what it sounds like it allows you to add a new user to your site and upon being clicked, it brings up a window that asks for all of the essential information for an account with a username, password, email, and full name. There is also the profile tab which allows for more extensive information to be provided for a user account and may have some fields that are required to be input in order to create an account, which is specified in the required field of the profile manager. Find User: Provides a text field to input a user's account name that will search through all of the site's users and return the account below this field with the following options: Edit User: This allows for basic fields in the identity field such as password, email, and full name to be modified as well as the ability to give the user a profile image and the profile tab to specify more information about a user. There is also the profile tab which goes into more detail about a user allowing for the specification of things like postal code, phone number and address. Delete User: This is exactly as it sounds, it will delete the user's account. User Roles: This allows for a user account to placed into a security role that has been previously defined in the role manager, and requires a date that this security role will take effect and will expire for the user account."
  },
  "manuals/admin/control-panel/index.html": {
    "href": "manuals/admin/control-panel/index.html",
    "title": "Control Panel | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Control Panel When managing your Oqtane site as an administrator, you will most likely be doing most of your daily work in the Control Panel. As an administrator, you will be able to use nearly every part of the Control Panel. The control panel is accessible through the gear icon located in the top right-hand corner of the screen and provides the ability to interact with the: admin dashboard page manager module manager Those with content management permissions, which are defined by a user account's roles, in Oqtane are often referred to as “content editors.” Content editors can typically view only some of the Control Panel—the parts that are required in order to perform other related tasks, such as adding a module to a page. It is worth noting that the Control Panel you'll be using is the one that ships “out of the box” with Oqtane. However, it is one of numerous extension points in Oqtane. Like modules, themes, and other extensions, the Control Panel can be replaced with a custom or third-party alternative."
  },
  "manuals/admin/control-panel/modules.html": {
    "href": "manuals/admin/control-panel/modules.html",
    "title": "Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Modules Modules are a key feature of Oqtane as they allow for you to insert a massive variety of things into your web page. There are a wide variety of different that can be added to your page for a high level of customization. An administrator also has the ability to both download new modules onto the website or upload modules you have created to the marketplace, options which are found in the admin dashboard's module management feature. On the side control panel's module management section, you have the option to: Add A New Module: which will put a new module of your choosing onto the page which has the option of being a: Admin Module: These are only available to people within the administrator role and there are many more default modules available to put onto your webpages. Common Module: These are available both to administrators and to registered users to be able to use on pages that are specified as personalizable, meaning users can modify them as they see fit and they are unique and only viewable to registered users. Developer Module: This feature is for placing a module creator onto a page which will provide you with useful pre-built structure and methods for writing code for your own modules. Add An Existing Module: Provides the ability to select modules that are already on other pages from your website. Page: A list of other your other web pages where you can select a page on your site that has the module you would like. Modules: A list of modules that are on the selected web page for you to select. Directly below these options, when a module is selected, the module's description will appear in a purple box so you have a better understanding of what the module is for. The other module options below this are: Title: Which is what will be displayed directly above the module as its title, if nothing is selected then the module's name will be put as the title. Pane: Select which content pane you want the module to go inside of. Panes are made visible with the content editor. Container: Select if you would like to have a title displayed above the module or not have one."
  },
  "manuals/admin/control-panel/page-management.html": {
    "href": "manuals/admin/control-panel/page-management.html",
    "title": "Control Panel Page Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Control Panel Page Management The page management feature allows you to manipulate the page you are currently on, by providing options for adding, editing, deleting, and publishing pages. This feature also has many of the same capabilities as the admin dashboard's Page Management feature, with the only difference being that the control panel's page manager only has the ability to change the page you are currently on. Add The add feature adds a new page to your website and brings up the page management window, which allows you to specify the settings, appearance, and permissions for the page you are adding. The fields which exist in the page management window are the: Settings Name: Which specifies the name that will be displayed in the navigation bar. Parent: Which will specify the page that this page will be underneath, meaning that the added page will be put to the right of the page specified in the navigation bar at the top. Insert: Specify where the name for the page will appear in the navigation bar, by saying where the page should appear among all of the children of the parent that has been selected. Navigation: Say whether you want the page to be displayed to users that fit within the permissions, or if you want the page to be hidden to everyone but administrators which can be useful while editing a page. URL Path: The url is what is put in the web page's address, for example if the url path is set to page1 then the address might be www.website/page1.com. If no URL path is specified then the URL will by default be set to be the same as the name field above. Redirect: Input a URL that is the same as the URL path of another page in the site that user will be sent to, remember that if no URL path is specified for another page then the name will be used. If this feature is implemented then you will not be able stay on the page to use the control panel's page manager, so you will need to use the admin dashboard's page management feature to edit or delete page's with this feature. Appearance Title: The name that is displayed on the web page's tab. Theme: The theme that the web page will take on from a selection of styles and colors that can be downloaded by the host user in the theme manager. Layout: The amount of content panes that will be available. Which are basically how many columns will be available to have content and modules inserted inside of. Default Container: Choose the layout of modules for the page, like hw the titles typically displayed above the modules will be. Icon: Input a favicon address or other icon address to include an icon beside the name of your page. Personalizable: This feature gives a page that is unique to every individual and allows them to add modules and edit the content of the page, so only the individual can see what they put onto the page. Permissions View: This is what allows different users to see certain pages and any users that are within certain roles, that can be specified in the admin dashboard's role management feature will be able to see or not see the page depending on what you have checked the box for the role they fit into. Edit: This allows users that fit into the specified roles to be able to edit pages using the content editor. Specific Users: The permissions tab also has the ability for you to enter a specific username and allow for you to set custom permissions for any specific users that you want. Edit The edit feature shares all of the same features as the add feature, allowing you to change the settings, appearances, and permissions of any page, with the insert feature being replaced by the move feature. The edit feature also shows you when a page was created and when the page was last edited at the bottom of the page management window. Delete The delete feature will delete the page that you are currently on. Publish The publish feature makes any page public that you have previously specified to be hidden, if you have marked a page as not navigable when the page was created. It is useful to have this feature to be able to work on a page that is hidden from regular users until it is finished and ready to be officially added to the site."
  },
  "manuals/admin/host-administration/event-log.html": {
    "href": "manuals/admin/host-administration/event-log.html",
    "title": "Event Log | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Event Log The Event log allows you to know what's happening on your website at all times. On the surface, the Event log may seem very simple and it is. You have a listing of the most recent events immediately visible on page load. This list is going to be any number of pages with 10 events by default on each page of results and the option to see more rows at a time. A paging feature at the bottom of the list allows you to move from page to page. If you want to filter the events to see more or fewer events, you have three controls at the top of the listing to help you. You can filter by the type of event that you want to see with the event Level and Function: Level: The level specifies the severity of the event and includes options for: Trace Debug Information Warning Error Critical Function: The function is what type of feature is being used and is color-coated for easier viewing. It includes options for: Create Read Update Delete Security Other Rows: Choose how many rows you would like to have displayed on page. The feature and date are also shown in the event list but aren't sortable fields, with the feature showing what part of the Oqtane framework is being used. For example, you might be interested only in seeing instances of site users attempting to log in. To see this, simply change the Function drop-down list to Security, and only security events like the login event will be shown to you. In other cases, you might want to see a larger list of events. There are many reasons for this. One reason might be searching for something specific using built-in features of your web browser, such as using Ctrl+F to “find” something in the page. As an example, you could switch the event log to show 100 events by changing the rows. For each event that is displayed you can select the detail button to show more information on where the event happened and a more in-depth description on what the event is."
  },
  "manuals/admin/host-administration/index.html": {
    "href": "manuals/admin/host-administration/index.html",
    "title": "Host Administration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Host Administration The host user has the highest possible level of permissions in a Oqtane instance and can manage any individual site, set defaults for the creation of new sites, and manage additional configurations that support all sites. An Oqtane site administrator is primarily concerned with the look, feel, functionality, and content of a site. A host is more concerned with the configuration, performance, monitoring, and support of the entire Oqtane instance. As the Oqtane host (or any user with superuser permissions), you need to have a working grasp of all the features and configuration options available to you. A host logs into a Oqtane site just like any other user, just using the host account that is created when the Oqtane application is first launched. In addition to the site options discussed in the site administration control panel and admin dashboard, the host account has more options than an administrator account in the admin dashboard, which includes: Event Log: Which contain information on various events that have occurred on the site like errors or anything that has been created, updated, or deleted with more info on event log. Site Management: Which allows for the addition and modification for all of the different sites you have with more info on site management. Module Management: Which allows you to install new modules and edit existing modules with more info on module management. Theme Management: Which allows you to install new themes to change the look of you webpages with more info on theme management. Scheduled Jobs: Which allows for the creation of jobs that will do something every time a specified amount of time passes with more info on scheduled jobs. SQL Management: Which lets you run SQL queries in your databases with more info on sql management. System Info: Which gives information on your version of the Oqtane framework and allows you to see information and methods in Oqtane's api with more info on system info. System Update: Which allows you to keep the Oqtane framework up to date and allow you to use NuGet packages with more info on system update."
  },
  "manuals/admin/host-administration/module-management.html": {
    "href": "manuals/admin/host-administration/module-management.html",
    "title": "Module Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Management The module manager provides a list of all of the modules that are currently installed in your version of the Oqtane framework. Modules are a key feature of Oqtane and allow for a variety of features to be placed on your pages. At the top of the module manager page there is a install button to install a module from the list provided or by using the upload tab, you can use a NuGet package of a module, so that it will be included as one of the possible modules to use on the site. Inside the list of modules there is also the options to edit modules which will show an overview of the module with a description and an option to delete any module that is not a default Oqtane module."
  },
  "manuals/admin/host-administration/scheduled-jobs.html": {
    "href": "manuals/admin/host-administration/scheduled-jobs.html",
    "title": "Scheduled Jobs | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Scheduled Jobs The Schedule page enables you to manage what is essentially recurring, scheduled batch processing for Oqtane.There are many instances where a host may want to set something up to automatically do some task like sending a notification to users and this can be accomplished with the use of this feature. The options that are available on this page are: Add Job: Adds a new job by filling out the fields of: Name: Choose the jobs name. Type: Specify the type by either using NotificationJob or by creating your own job method in the infrastructure.jobs class in the Oqtane server. You will need to specify the location of the job in the framework, Ex. (Oqtane.Infrastructure.NotificationJob, Oqtane.Server) with the job being a notification job from the infrastructure class, which is a class inside of the Oqtane.Server. Enabled: A yes or no to say if you want the job to be active at this time or not. Runs Every: Choose an amount of time that specifies how often the job will execute. Starting: Enter a date for when you want the job to start. Ending: Enter a date for when you want the job to end. Retention Log: A number to specify the amount of logs that will be retained. View Logs: Shows all of the logs generated by all of your jobs within their retention log number. Refresh: This refreshes the page to get new logs that have been made while you have been on this page. Below this these options is a list of all of the jobs that are currently set up to be executed, that have a few options: Edit: Has all of the same fields as adding a job plus a field for the next execution: Next execution: Input a date that will be the next time the job will run after the stop button has been pushed. Delete: Deletes the job so that it will never execute again. Log: View the logs that this jobs has generated. Stop: Stops the job from executing anymore, until a next execution has been specified in the edit window."
  },
  "manuals/admin/host-administration/site-management.html": {
    "href": "manuals/admin/host-administration/site-management.html",
    "title": "Site Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Management Oqtane provides the ability to have multiple sites at you disposal within the singular Oqtane application. The Site Management page provides an inventory of all the sites in a Oqtane instance and quick access to the Site Settings functionality for each. Deleting your sites is permanent! So it should not be done unless you are certain you want to delete this site. The options to add and edit the set has a few options: Site Name: This field is what the site will be called. Aliases: This is what the address of the site is that is being created and can create websites under the default top level website, by using a / forward slash with the a name you want under the top level website. Default Theme: Choose the theme, which is the colors and styles that will be the default for pages created on this website. Default Layout: Choose how many content panes you want to have on a page by default. Default Container: Choose if you want a title header for your modules on the site by default. Site Template: Select if you want a template for your site or no template for your site. Tenant: Select the tenant for the site, which is the database that will be used for the site. If you want to create a new tenant or database then you will have to select the \"create a new tenant\" option which will drop down with another menu that allows for a new tenant to be created, this menu includes: Name: This is the name for the new tenant on the site, that you will be creating and what will be displayed when selecting tenants in the future. Database Type: Choose if you would like the database to have a local database, which will create a Microsoft SQL database on your local database on your system, and an SQL server which creates a that is linked to an SQL server. Server: This is the location of where the server where the database will be located and a default value is provided for a local database. Database: This is the name that is initialized for the database inside of the server and a default value is provided for a local database. Integrated Security: Choose if you want the host superuser for the site to have the same credentials (username and password) as the database's root account. Host Username: This is the username of the super user host account that will be created for the site, it will also be the database's root username if integrated security is set as true. Hosts Password: This is the super user host account's password, it will also be the database's root account password if integrated security is set as true."
  },
  "manuals/admin/host-administration/sql-management.html": {
    "href": "manuals/admin/host-administration/sql-management.html",
    "title": "SQL Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "SQL Management The SQL console permits database access directly from inside Oqtane. So the host, even if it's not near an instance of SQL Server Management Studio, still has access to a powerful database tool. This allows for SQL statements to be run directly from the Oqtane application onto the tenants which are also called databases. The results of any SQL query that is run will be returned directly below the execute button."
  },
  "manuals/admin/host-administration/system-info.html": {
    "href": "manuals/admin/host-administration/system-info.html",
    "title": "System Info | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "System Info All of the general information that you need to know about the Oqtane framework is available in the system information feature, which includes things like the Oqtane framework version, the blazor runtime, the server path, the CLR version, the OS version, and the server's current time. The System Info feature also provides access to Oqtane's API with many of Oqtane's methods and the ability to try them out using the Swagger user interface. There is also the option to restart the Oqtane framework on this page if you have made a change to the system that would require a restart such as installing or deleting themes or modules."
  },
  "manuals/admin/host-administration/system-update.html": {
    "href": "manuals/admin/host-administration/system-update.html",
    "title": "System Update | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "System Update The system update feature allows you to update the Oqtane framework to keep your website up to date and ensure that administrators will have access to all capabilities and features that Oqtane provides. The system update feature also provides the ability to upload a NuGet package to be included with your local version of the Oqtane framework and is uploaded by selecting the NuGet file from its location on your system and then pressing the upload button to place the NuGet package within a version of the framework, then pressing the install button to update you version of the framework to include the uploaded NuGet package. Uploading a NuGet package is for the use of uploading features that exist in a newer version of Oqtane, but you have not installed the newest version of Oqtane."
  },
  "manuals/admin/host-administration/theme-management.html": {
    "href": "manuals/admin/host-administration/theme-management.html",
    "title": "Theme Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Management The theme page is not used that often. Generally, it's used during the development of a new site and sometimes is used during the rollout of a new site brand. It allows you to view the available themes and containers that have been installed in your site and then applied as the default for new and existing pages and modules. Themes on Oqtane provide a multitude of different colors and styles for pages to be presented in. These themes can provide unique looking pages and websites as a whole. There are two default themes for Oqtane, the Blazor theme and the Oqtane theme. You can also download new themes to use by clicking the install theme button at the top of the page and choosing some themes to download, so you change the look of your site. There is also an upload tab which allows you to put NuGet files for themes that are not available in the download menu onto your Oqtane framework."
  },
  "manuals/admin/index.html": {
    "href": "manuals/admin/index.html",
    "title": "Oqtane Administrative Documentaion | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Administrative Documentaion This administrative documentation outlines the various ways that administrators and user can interact with the oqtane platform in a variety of ways, including but not limited to: Adding modules to pages, moving them around and editing them. Various host administrative tasks, such as jobs, event logs, and themes. Administrative functions, such as file and user management. The different processes of the control panel. What the admin dashboard includes. Basic installation instructions."
  },
  "manuals/admin/installation/databases.html": {
    "href": "manuals/admin/installation/databases.html",
    "title": "Databases | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Databases This section provides a general setup guide for popular database systems such as SQL Server, MySQL, PostgreSQL, and SQLite on both Windows and Linux environments. Each database system includes steps for downloading, installing, configuring, and connecting to the database, along with relevant tools and documentation. SQL Server Windows Download SQL Server: Navigate to the SQL Server Downloads page and download the appropriate version of SQL Server for Windows. Install SQL Server: Follow the installation guide provided on the SQL Server website to install SQL Server on your Windows machine. Make sure to select the appropriate options during the installation process according to your requirements. Download SQL Server Management Studio (SSMS): Once SQL Server is installed, download and install SQL Server Management Studio (SSMS) from the official website. Configure SQL Server: After installation, configure SQL Server according to your specific needs. This may include setting up databases, configuring security settings, and adjusting server options. Linux Download SQL Server: Navigate to the SQL Server Downloads page and follow the instructions for installing SQL Server on Ubuntu or your preferred Linux distribution. Install SQL Server: Use the provided package manager (such as apt for Ubuntu) to install SQL Server on your Linux machine. Make sure to follow the instructions carefully and resolve any dependencies as needed. Configure SQL Server: Once SQL Server is installed, configure it according to your requirements. This may involve setting up databases, configuring security settings, and adjusting server options. Refer to the SQL Server documentation for detailed instructions on configuration. Connect to SQL Server: After installation and configuration, you can connect to SQL Server using tools like SQL Server Management Studio (SSMS) or command-line tools like sqlcmd to manage databases and execute queries. MySQL Windows Download MySQL: Visit the MySQL Downloads page and download the MySQL Community Edition for Windows. Install MySQL: Run the installer and follow the installation wizard to install MySQL on your Windows machine. During installation, you may need to configure options such as the installation directory, root password, and port settings. Download MySQL Workbench: After installing MySQL, download MySQL Workbench from the official website. MySQL Workbench is a graphical tool for managing MySQL databases and can be useful for administration tasks. Configure MySQL: Once installed, configure MySQL according to your requirements. This may involve setting up databases, creating users, and configuring security settings. Refer to the MySQL documentation for detailed instructions on configuration. Linux Download MySQL: Visit the MySQL Downloads page and follow the instructions for installing MySQL on Ubuntu or your preferred Linux distribution. Install MySQL: Use the provided package manager (such as apt) to install MySQL on your Linux machine. Make sure to follow the instructions carefully and resolve any dependencies as needed. Configure MySQL: After installing MySQL, configure it according to your requirements. This may include setting up databases, configuring security settings, and adjusting server options. Refer to the MySQL documentation for detailed instructions on configuration. Connect to MySQL: Once MySQL is installed and configured, you can connect to it using MySQL Workbench or command-line tools like mysql to manage databases and execute queries. PostgreSQL Windows Download PostgreSQL: Visit the PostgreSQL Downloads page and download the installer for PostgreSQL on Windows. Install PostgreSQL: Run the installer and follow the installation wizard to install PostgreSQL on your Windows machine. During installation, you may need to specify the installation directory, port settings, and provide a password for the default postgres user. Download pgAdmin: After installing PostgreSQL, download pgAdmin from the official website. pgAdmin is a popular graphical administration tool for PostgreSQL databases and can be helpful for managing databases and running queries. Configure PostgreSQL: Once installed, configure PostgreSQL according to your requirements. This may involve setting up databases, creating users, and configuring security settings. Refer to the PostgreSQL documentation for detailed instructions on configuration. Linux Install PostgreSQL: On Ubuntu or your preferred Linux distribution, use the package manager to install PostgreSQL. Run the following command in the terminal: sudo apt update sudo apt install postgresql postgresql-contrib Configure PostgreSQL: After installation, PostgreSQL should be up and running. By default, it creates a postgres user with administrative privileges. You may need to set a password for this user and configure access permissions as needed. Refer to the PostgreSQL documentation for detailed instructions on configuration. Connect to PostgreSQL: Once PostgreSQL is installed and configured, you can connect to it using pgAdmin or command-line tools like psql. Use these tools to manage databases, create tables, and execute SQL queries. SQLite Windows Download SQLite: Visit the SQLite Downloads page and download the SQLite tools for Windows. You can choose between the precompiled binaries or the command-line shell. Install SQLite: After downloading, extract the contents of the downloaded file to a directory of your choice. SQLite is a self-contained, serverless database engine, so there's no formal installation process required. Set up Environment Variables (Optional): If you plan to use SQLite from the command line frequently, you may want to add the directory containing the SQLite executable to your system's PATH environment variable. This will allow you to run SQLite commands from any directory in the command prompt. Linux Install SQLite: SQLite is likely available in your Linux distribution's package repositories. Use your package manager to install SQLite. For example, on Ubuntu, you can use the following command: sudo apt update sudo apt install sqlite3 Verify Installation: After installation, verify that SQLite is installed correctly by running the following command in the terminal: sqlite3 --version This command should display the installed version of SQLite. Start Using SQLite: Once installed, you can start using SQLite from the command line by running the sqlite3 command followed by the name of the database file you want to create or connect to. For example: sqlite3 mydatabase.db This command will open the SQLite command-line interface and create or connect to a database file named mydatabase.db. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio .NET Core Related Pages Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/deploy-to-azure.html": {
    "href": "manuals/admin/installation/deploy-to-azure.html",
    "title": "Deploy to Azure | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Deploy to Azure The Oqtane framework is a modular application framework for Blazor that allows you to easily deploy and manage web applications on Azure. Prerequisites An Azure account. If you don’t have one, you can create one for free here. The Oqtane GitHub repository. You can access it here. Steps Click on the Deploy to Azure button above. This will open the Azure portal and prompt you to log in with your Azure account. On the Custom deployment form, select an existing Resource group or create a new one. A resource group is a logical container for your Azure resources. Fill in the values for Sql Server Name and Blazor Website Name. These values must be unique to any other values on Azure. You can also change the other settings if you want, such as the location, the pricing tier, and the database size. Click the Purchase button. This will create and deploy the resources needed for your Oqtane application, such as the app service plan, the web app, and the SQL database. Wait for the deployment to finish. You can monitor the progress on the Deployment details page. Once the deployment is complete, you can access your Oqtane application by visiting the URL of your Blazor Website Name. For example, if your Blazor Website Name is my-oqtane-app, then your URL would be https://my-oqtane-app.azurewebsites.net/. Follow the installation wizard to set up your Oqtane application. You will need to enter the host email and password, and optionally once the installation process has completed you can set the site name, logo plus more in the administration dashboard site settings. Congratulations You have successfully deployed your Oqtane application on Azure. Enjoy! 😊 Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/development-vs-code-linux.html": {
    "href": "manuals/admin/installation/development-vs-code-linux.html",
    "title": "Install Oqtane for Development using Visual Studio Code on Linux (VS Code Linux Ubuntu) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Development using Visual Studio Code on Linux (VS Code Linux Ubuntu) This document provides general instructions for installing Oqtane for development using Visual Studio Code on Linux Ubuntu. Oqtane is an open-source, modular application framework for Blazor that allows you to easily deploy and manage web applications on Azure or any web server. TODO: Review and update all steps to ensure things are as clear, easy and not missing steps, and also adding images. This page will become more uniform with the others as this evolves. Prerequisites Before you start, make sure you have the following prerequisites: A Linux Ubuntu machine with internet access and administrator privileges. .NET SDK installed on your machine. A database server installed on your machine or accessible from your network. You can use MySQL, PostgreSQL, SQLite, or SQL Server. Steps Install Visual Studio Code: Install Visual Studio Code on your machine. You can either download the .deb package from the Visual Studio Code website and install it using the command sudo dpkg -i code*.deb, or use the snap package manager and run the command sudo snap install --classic code. Clone the Oqtane GitHub Repository: Clone the Oqtane GitHub repository to your local machine using the following command: git clone https://github.com/oqtane/oqtane.framework.git Open the Oqtane Folder in Visual Studio Code: Open the Oqtane folder in Visual Studio Code using the command: code oqtane.framework Install Required Extensions: Install the required extensions for Blazor development, such as C#, Razor+, and Blazor Snippets, from the Extensions tab on the left sidebar of Visual Studio Code. Build the Oqtane Solution: Build the Oqtane solution using the integrated terminal in Visual Studio Code. Navigate to the src folder and run the command: dotnet build Publish the Oqtane Project: Publish the Oqtane project to a folder by running the command: dotnet publish -c Release -o publish Note: This may not copy everything over, please review contents of all the latest dll files are copied properly. Copy Folder Contents to Apache Folder: Copy the folder contents to the Apache folder that hosts the site using the command: sudo cp -r publish /var/www/html/oqtane You may need to change the destination folder according to your Apache configuration. Configure Apache: Configure Apache to serve the Oqtane application following the instructions from the Oqtane installation documentation on how to install Oqtane with Apache and MySQL or PostgreSQL. Access Your Oqtane Application: Access your Oqtane application by visiting the URL of your virtual host. For example, if your virtual host is oqtane.example.com, then your URL would be http://oqtane.example.com/. Follow the Installation Wizard: Follow the installation wizard to set up your Oqtane application. You will need to enter the administrator email and password, and optionally the site name and logo. Congratulations! You have successfully installed Oqtane for development using Visual Studio Code on Linux Ubuntu. Enjoy! 😊 Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Apache HTTPD Server Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Framework Development Using Visual Studio Code with Windows Oqtane Framework Development Using Visual Studio with Windows ← Back to Installation Home"
  },
  "manuals/admin/installation/development-vs-code.html": {
    "href": "manuals/admin/installation/development-vs-code.html",
    "title": "Install Oqtane for Development using Visual Studio Code (VS Code) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Development using Visual Studio Code (VS Code) Overview Developing Oqtane applications with Visual Studio Code (VS Code) offers a lightweight yet powerful environment for coding, debugging, and managing project resources. While VS Code may not provide the full IDE experience of Visual Studio, it offers extensive support for web development tasks, including CSS editing, theme development, and module creation. Development For general development and keeping up with the latest features, you can use the development branch of the Oqtane Framework. However, for module development, it is recommended to target a stable release version of the Oqtane Framework. Install Latest .NET SDK Release: Ensure you have the latest .NET SDK installed on your system. You can download it from the official .NET website. Install Visual Studio Code: Download and install the latest edition of Visual Studio Code. Ensure that the ASP.NET and web development workload is enabled during installation. Oqtane works with all editions of Visual Studio Code, from Community to Enterprise. Optional: Install Data Storage and Processing Extensions: If you prefer to use LocalDB for development (although not required, as Oqtane supports SQLite, MySQL, and PostgreSQL), you must install the necessary Data storage and processing extensions in VS Code. Clone Oqtane Dev Branch: Visit the Oqtane Framework GitHub Repository and clone the Oqtane dev branch source code to your local system using Git Bash with the following command: git clone -b dev https://github.com/oqtane/oqtane.framework.git Open Oqtane Solution\": Navigate to the cloned directory and open the Oqtane.sln solution file in Visual Studio Code. Copy Files to Hosted Folder Location: Copy the necessary files to the hosted folder location, which could be IIS or Apache root directory. This typically includes the compiled binaries and any static assets required for the application to run. Build the solution: Build the solution using the built-in terminal or the .NET CLI by running the following command: dotnet build Run Application: After building the solution, you can run the Oqtane application locally using IIS or Apache. Ensure to stop/start the app pool or services related to the Oqtane app on the web server when updating file changes. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Development Using Visual Studio Code with Linux Oqtane Framework Development Using Visual Studio with Windows ← Back to Installation Home"
  },
  "manuals/admin/installation/development.html": {
    "href": "manuals/admin/installation/development.html",
    "title": "Install Oqtane for Visual Studio Development | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane for Visual Studio Development Development Version (Latest) For general development and keeping up with the latest features, you can use the development branch of Oqtane Framework. However, for module development, it is recommended to target a stable release version of Oqtane Framework. Install Latest .NET SDK Release. Install the latest edition of Visual Studio with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL, and PostgreSQL), you must also install the Data storage and processing. Visit the Oqtane Framework GitHub Repository to download and extract the Oqtane Dev Branch Source Zip File or clone the Oqtane dev branch source code to your local system using Git Bash with the following command: git clone -b dev https://github.com/oqtane/oqtane.framework.git Open the Oqtane.sln solution file. Build the solution. Ensure that you specify Oqtane.Server as the Startup Project. Run the application. Release and Legacy Development Below is a list of current and prior releases for module development targeting different frameworks. Check the official release page for any newer versions not listed. Oqtane Version 5 (.net 8) Install .NET 8 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the Official Oqtane 5 Release Source. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project Run the application. Oqtane Version 4 (.net 7) Install .NET 7 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the Official Oqtane Release Source 4.0.6. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 3 (.net 6) Install .NET 6 SDK Install the latest edition of Visual Studio 2022 with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you wish to use LocalDB for development (not a requirement as Oqtane supports SQLite, mySQL and PostgreSQL) you must also install the Data storage and processing. Download the latest Official Oqtane Release Source 3.4.3. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 2 (.net 5) Install the latest .NET 5 SDK (v5.0.100) Install the latest edition (v16.8 or higher) of Visual Studio 2019 (Community, Professional, or Enterprise Editions) with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you do not have a SQL Server installation available already and you wish to use LocalDB for development, you must also install the .NET desktop development workload. Download the Official Oqtane Release Source 2.3.1. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Oqtane Version 1 (.net core 3) Install .NET Core 3.1 SDK (v3.1) Install Visual Studio 2019 (Community, Professional, or Enterprise Editions) with the ASP.NET and web development workload enabled. Oqtane works with ALL editions of Visual Studio from Community to Enterprise. If you do not have a SQL Server installation available already and you wish to use LocalDB for development, you must also install the .NET desktop development workload. Download the Official Oqtane Release Source 1.0.4. Open the Oqtane.sln solution file. Build the solution. Make sure you specify Oqtane.Server as the Startup Project. Run the application. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources Oqtane Development Using Visual Studio Code Oqtane Development Using Linux and Visual Studio Code ← Back to Installation Home"
  },
  "manuals/admin/installation/index.html": {
    "href": "manuals/admin/installation/index.html",
    "title": "Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Oqtane is a modular application framework that allows you to create dynamic web sites and applications using Blazor and .NET MAUI. Oqtane supports various deployment scenarios and databases. This section provides installation instructions for different environments and configurations. Download an Official Release Find the official Oqtane releases on GitHub and follow these steps to download: Visit the Official Oqtane Releases page on GitHub. Browse the list of releases to find the version you need. Click on the release to view its details. Download the release package by clicking on the appropriate link. Reset an Existing Oqtane Installation If you need to perform a clean database install for a previous version of Oqtane, follow these steps: Open the Oqtane.Server\\appsettings.json file. Locate the DefaultConnection value and set it to \"\". Run the application to trigger the re-installation process, which will execute the database installation scripts. Upgrade Learn how to upgrade your existing Oqtane installation manually or through an automated process: Upgrading Oqtane: This section provides information on how to upgrade your existing Oqtane installation manually or through an automated process. Development This section provides installation instructions for development purposes. You can choose between Windows or Linux development environments and use Visual Studio or Visual Studio Code as your IDE. Windows Windows Visual Studio Development: Install Oqtane quickly for development, primarily for Visual Studio and Windows development. Windows Visual Studio Code Development: Install Oqtane quickly for development, primarily for Visual Studio Code and Windows development. Linux Linux Visual Studio Code Development: Install Oqtane quickly for development, primarily for Visual Studio Code and Linux development. Deploy This section provides installation instructions for deploying Oqtane to various environments using a release package. You will learn how to install the prerequisites, create a database, and configure the web server for your Oqtane application. You can choose between the following deployment options: Azure Install Oqtane using the Deploy to Azure feature: Deploy Oqtane To Azure: This guide shows you how to install Oqtane using the above Deploy To Azure feature. Windows IIS Install Oqtane with various configurations on Windows using IIS: Install Oqtane with IIS Express and SQL Express: This guide shows you how to install Oqtane on Windows using IIS Express and SQL Express Server. Install Oqtane with IIS Express and LocalDB: This guide shows you how to install Oqtane on Windows using IIS (Express) and LocalDb. Install Oqtane with IIS and SQL Server: This guide shows you how to install Oqtane on Windows using IIS and SQL Server. Linux Apache Install Oqtane with Apache on Linux (Ubuntu) with MySQL or PostgreSQL: Install Oqtane with Apache and MySQL: This guide shows you how to install Oqtane on Linux using Apache and MySQL. Install Oqtane with Apache and PostgreSQL: This guide shows you how to install Oqtane on Linux using Apache and PostgreSQL. Resources Explore additional installation resources and access the Oqtane blog and GitHub repository: Oqtane Installation Troubleshooting Tips: If you encounter issues during the installation, upgrade, development, or deployment process, you can refer to our troubleshooting tips. Oqtane Supported Databases: Find detailed information on all databases supported by Oqtane for both Windows and Linux. Oqtane Installation Resources: Access comprehensive installation guides and resources for deploying Oqtane on various platforms. Oqtane Blog: Stay updated with the latest news, announcements, and insights from the Oqtane community by exploring the Oqtane blog. Oqtane GitHub Repository: Access the Oqtane framework's GitHub repository to explore the source code, contribute to development, and stay informed about the latest updates and releases. ← Back to Administration Documentation Manuals Home Page"
  },
  "manuals/admin/installation/linux-ubuntu-apache-mysql.html": {
    "href": "manuals/admin/installation/linux-ubuntu-apache-mysql.html",
    "title": "Installing Oqtane Using Ubuntu Desktop, Apache and MySQL (Linux) | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installing Oqtane Using Ubuntu Desktop, Apache and MySQL (Linux) Step 1: Install Ubuntu Desktop Visit the Ubuntu Desktop download page to download the latest version of Ubuntu Desktop. Choose the appropriate version based on your system architecture (32-bit or 64-bit) and click on the \"Download\" button. Once the download is complete, create a bootable USB drive or DVD from the downloaded ISO file. You can use tools like Rufus for Windows or Etcher for macOS and Linux to create the bootable media. Insert the bootable USB drive or DVD into your computer and boot from it. Follow the on-screen instructions to start the Ubuntu installation process. During the installation process, you will be prompted to choose various options such as language, keyboard layout, and installation type. Make your selections according to your preferences and proceed with the installation. When prompted, choose the option to install Ubuntu alongside your existing operating system or replace it entirely, depending on your requirements. Follow the remaining steps to complete the installation. Once finished, restart your computer to boot into the newly installed Ubuntu Desktop. After booting into Ubuntu Desktop, follow the initial setup wizard to configure your system preferences and create a user account. Once the setup is complete, you will have Ubuntu Desktop installed and ready for use. For more information on installing Ubuntu Desktop, refer to the official Ubuntu Desktop Installation Guide. For additional resources and documentation, visit the Ubuntu documentation home page. Step 2: Installing MySQL Database on Ubuntu This guide provides detailed instructions on how to install and configure MySQL Database on Ubuntu. MySQL is a popular open-source relational database management system used by many applications and frameworks, including Oqtane Framework. Prerequisites Ubuntu Desktop installed and configured on your system. Step 1: Download MySQL APT Repository Configuration Open a web browser and navigate to the MySQL APT Repository download page. Select the appropriate release package for your Ubuntu distribution and architecture, then download it to your system. Once the download is complete, navigate to the directory where the package is saved. Step 2: Install MySQL APT Repository Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Navigate to the directory where you downloaded the MySQL APT repository configuration package. Step 3: Install MySQL Package Navigate to the directory where the downloaded MySQL package is located. Use the following command to install the downloaded package, replacing version-specific-package-name.deb with the actual name of the downloaded package: sudo dpkg -i version-specific-package-name.deb For example, if the downloaded package is named mysql-apt-config_w.x.y-z_all.deb, the command would be: sudo dpkg -i mysql-apt-config_w.x.y-z_all.deb During the installation process, you will be prompted to choose the versions of MySQL server and other components you want to install. If you are unsure, you can stick with the default options. Once the installation is complete, update the package information from the MySQL APT repository: sudo apt-get update Step 4: Configure MySQL Server After installing MySQL, you may need to configure it based on your specific requirements. This includes settings such as the default character set, server collation, and other options. Open a terminal window and log in to MySQL as the root user: sudo mysql -u root -p Enter the root password you set during installation when prompted. Once logged in, you can use SQL commands to configure MySQL. For example, to set the default character set to UTF-8, you can run: SET GLOBAL character_set_server = utf8; Refer to the MySQL documentation for a comprehensive list of configuration options and best practices. Step 5: Secure MySQL Installation After configuring MySQL, it's essential to secure the installation to protect your data and prevent unauthorized access. Run the MySQL security script to secure the installation: sudo mysql_secure_installation Follow the prompts to configure security options for your MySQL installation. This may include setting the root password, removing anonymous users, disallowing remote root login, and removing the test database. Choose the appropriate options based on your security requirements. Step 6: Verify MySQL Installation Once the installation and configuration are complete, verify the status of the MySQL service to ensure it is running: sudo systemctl status mysql If MySQL is not running, start the service using the following command: sudo systemctl start mysql You can also check the MySQL version to confirm the installation: mysql --version Step 7: Create Oqtane Database To create a new MySQL database for the Oqtane Framework, log in to the MySQL command-line interface as the root user: sudo mysql -u root -p Enter the root password you set during installation when prompted. Once logged in, run the following SQL command to create a new database named oqtanedb: CREATE DATABASE oqtanedb; Next, create a new MySQL user named oqtaneuser and grant it privileges to access the oqtanedb database: CREATE USER 'oqtaneuser'@'localhost' IDENTIFIED BY 'OqtaneDevPassword1-1'; GRANT ALL PRIVILEGES ON oqtanedb.* TO 'oqtaneuser'@'localhost'; After creating the user and granting privileges, flush the MySQL privileges to apply the changes: FLUSH PRIVILEGES; Step 3: Install Apache Server This step covers the installation of Apache HTTP Server on Ubuntu. Apache is a widely-used web server that can serve HTML files and other content over HTTP. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install Apache: Install Apache HTTP Server using the following command: sudo apt install apache2 Start Apache Service: Once the installation is complete, Apache service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start apache2 Enable Apache Service to Start on Boot: To ensure that Apache starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable apache2 Check Apache Status: To verify that Apache is running without any errors, you can check its status using: sudo systemctl status apache2 Access Apache Default Page: Open a web browser and navigate to http://localhost. You should see the Apache default page if the installation was successful. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. Ubuntu Server Guide: Comprehensive guide for Ubuntu Server, which includes instructions for installing and configuring various software packages. Step 4: Install .NET Core This step covers the installation of .NET Core on Ubuntu. .NET Core is a cross-platform, open-source framework for building modern, cloud-based, and internet-connected applications. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Register Microsoft Product Repository: To install .NET Core, you first need to register the Microsoft product repository. Run the following command to download and install the Microsoft package signing key: wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install .NET SDK: Once the repository is registered, update the package list and install the .NET SDK using the following commands: sudo apt update sudo apt install -y apt-transport-https sudo apt update sudo apt install -y dotnet-sdk Verify Installation: After installation, verify that the .NET SDK has been successfully installed by running: dotnet --version Install ASP.NET Core Runtime (Optional): If you plan to deploy ASP.NET Core applications, you may also want to install the ASP.NET Core Runtime. Use the following command to install it: sudo apt install -y aspnetcore-runtime Additional Resources .NET Documentation: Official documentation for .NET. .NET Core Download Page: Official download page for .NET Core SDK and runtime. Step 5: Configure Host and Service Files for Apache This step involves creating configuration files for Apache virtual host and service to serve your .NET Core application. Prerequisites Apache server installed on your Ubuntu system. .NET Core SDK installed on your system. Oqtane Framework files ready to be deployed. Configuration Process Create Apache Virtual Host Configuration File: Open a terminal window and navigate to the Apache sites-available directory: cd /etc/apache2/sites-available Create a new virtual host configuration file for your .NET Core application. Replace example.com with your domain name: sudo nano example.com.conf Add the following configuration to the file, adjusting the values as needed: <VirtualHost *:80> ServerName example.com DocumentRoot /var/www/example.com ErrorLog ${APACHE_LOG_DIR}/example.com-error.log CustomLog ${APACHE_LOG_DIR}/example.com-access.log combined </VirtualHost> Save the file and exit the text editor. If you're not familiar with nano, you can learn more about it in the nano documentation. Create Document Root Directory: Create the document root directory where your .NET Core application files will be stored: sudo mkdir /var/www/example.com Configure Apache Service: Enable the newly created virtual host configuration and restart the Apache service: sudo a2ensite example.com.conf sudo systemctl restart apache2 Deploy .NET Core Application: Copy or publish your .NET Core application files to the document root directory (/var/www/example.com) of the virtual host. Adjust File Permissions (Optional): Depending on the deployment scenario, you may need to adjust file permissions to ensure that Apache can access and serve your .NET Core application files properly. Verify Configuration: Open a web browser and navigate to your domain name (e.g., http://example.com). If configured correctly, you should see your .NET Core application running. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. .NET Core Deployment Guide: Official deployment guide for .NET Core applications. Step 6: Setup App Files and Folders Create Directory Structure: Begin by creating a directory structure to organize your Oqtane application files. Choose a location on your Ubuntu system where you want to store the application files. For example: sudo mkdir /var/www/oqtane Download Oqtane Framework: Download ZIP Archive: Visit the Oqtane Framework releases page on GitHub. Click on the \"Oqtane.Framework.x.x.x.Install.zip\" file under the latest release to download it. Once downloaded, extract the ZIP archive to the /var/www/oqtane directory. Extract the downloaded ZIP archive to the /var/www/oqtane directory. Set Permissions (Optional): Depending on your setup, you may need to adjust file permissions to ensure that the web server can access the Oqtane application files properly. Use the following commands to set appropriate permissions: sudo chown -R www-data:www-data /var/www/oqtane sudo chmod -R 755 /var/www/oqtane Configure Web Server: If you haven't already configured Apache to serve your Oqtane application, you'll need to set up a virtual host and configure the necessary Apache directives to point to the application directory. Refer to the Apache documentation for detailed instructions on virtual host configuration. Step 7: Install Oqtane Framework (Linux) To install the Oqtane Framework on Linux, follow these steps: Download Oqtane Release: Download the latest release of Oqtane from the official GitHub repository. Choose the appropriate version and download the ZIP file containing the release files. Extract Release Files: After downloading the ZIP file, extract its contents to a directory on your Linux machine where you want to host the Oqtane application. Set Permissions: Ensure that the appropriate permissions are set for the Oqtane files and directories, allowing the web server user to read and execute the files. You can use the following commands in the terminal to set permissions: sudo chown -R www-data:www-data /path/to/oqtane sudo chmod -R 755 /path/to/oqtane Configure Database Connection: Update the database connection string in the appsettings.json file located in the root directory of your Oqtane application. Use the connection string for your preferred database server (e.g., MySQL, PostgreSQL). Access Oqtane Installation Wizard: Open a web browser and navigate to the URL associated with your Oqtane installation directory. If everything is configured correctly, you should see the Oqtane installation wizard, where you can proceed with the installation and setup of your Oqtane application. By following these steps, you will have successfully installed and configured the Oqtane Framework on your Linux machine, making your application accessible via a web browser. Step 8: Test the Installation After completing the installation process, it's important to test your Oqtane application to ensure everything is working correctly. Follow these steps to test the installation: Access Oqtane Application: Open a web browser and navigate to the URL associated with your Oqtane application. This should be the URL you configured during the installation process. Verify Functionality: Once the Oqtane application loads, verify that it is running correctly. Test various features and functionalities to ensure that everything is working as expected. Login and Administration: If applicable, log in to the Oqtane application using the provided credentials and verify that you have access to the administration interface. This will allow you to manage users, modules, pages, and other aspects of your Oqtane application. Test User Experience: Test the user experience by navigating through different pages, interacting with modules, and performing common tasks within the application. Ensure that the application is responsive and functions properly across different devices and screen sizes. By testing the installation and functionality of your Oqtane application, you can identify any issues or errors early on and address them accordingly, ensuring a smooth and successful deployment. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/linux-ubuntu-apache-postgresql.html": {
    "href": "manuals/admin/installation/linux-ubuntu-apache-postgresql.html",
    "title": "Install Oqtane Using Linux Ubuntu, Apache, and PostgreSQL | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Linux Ubuntu, Apache, and PostgreSQL Step 1: Install Ubuntu Desktop Visit the Ubuntu Desktop download page to download the latest version of Ubuntu Desktop. Choose the appropriate version based on your system architecture (32-bit or 64-bit) and click on the \"Download\" button. Once the download is complete, create a bootable USB drive or DVD from the downloaded ISO file. You can use tools like Rufus for Windows or Etcher for macOS and Linux to create the bootable media. Insert the bootable USB drive or DVD into your computer and boot from it. Follow the on-screen instructions to start the Ubuntu installation process. During the installation process, you will be prompted to choose various options such as language, keyboard layout, and installation type. Make your selections according to your preferences and proceed with the installation. When prompted, choose the option to install Ubuntu alongside your existing operating system or replace it entirely, depending on your requirements. Follow the remaining steps to complete the installation. Once finished, restart your computer to boot into the newly installed Ubuntu Desktop. After booting into Ubuntu Desktop, follow the initial setup wizard to configure your system preferences and create a user account. Once the setup is complete, you will have Ubuntu Desktop installed and ready for use. For more information on installing Ubuntu Desktop, refer to the official Ubuntu Desktop Installation Guide. For additional resources and documentation, visit the Ubuntu documentation home page. Step 2: Install PostgreSQL Database This step covers the installation of PostgreSQL Database on Ubuntu. PostgreSQL is a powerful, open-source relational database management system used for storing and managing data. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install PostgreSQL: Install PostgreSQL Database Server using the following command: sudo apt install postgresql Start PostgreSQL Service: Once the installation is complete, PostgreSQL service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start postgresql Enable PostgreSQL Service to Start on Boot: To ensure that PostgreSQL starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable postgresql Access PostgreSQL Command-Line Interface: To access the PostgreSQL command-line interface, use the following command: sudo -u postgres psql Additional Resources PostgreSQL Documentation: Official documentation for PostgreSQL. Step 3: Create Database and User in PostgreSQL This step covers creating a new database and user in PostgreSQL for Oqtane Framework. Additionally, it includes instructions for using pgAdmin, a popular graphical user interface for PostgreSQL administration. Prerequisites PostgreSQL installed and running on your Ubuntu system. Process Access PostgreSQL Command-Line Interface: Open a terminal window and access the PostgreSQL command-line interface as the postgres user: sudo -u postgres psql Create a New Database: Within the PostgreSQL command-line interface, run the following SQL command to create a new database for Oqtane Framework. Replace oqtanedb with your desired database name: CREATE DATABASE oqtanedb; Create a New User: Next, create a new user for accessing the Oqtane database. Replace oqtaneuser with your desired username and OqtaneDevPassword1-1 with a strong password: CREATE USER oqtaneuser WITH PASSWORD 'OqtaneDevPassword1-1'; Grant Privileges to the User: Grant all privileges on the Oqtane database to the newly created user: GRANT ALL PRIVILEGES ON DATABASE oqtanedb TO oqtaneuser; Exit PostgreSQL Command-Line Interface: After completing the database setup, exit the PostgreSQL command-line interface: \\q (Optional) Use pgAdmin for PostgreSQL Administration: pgAdmin is a feature-rich graphical user interface for PostgreSQL administration. You can install pgAdmin on your Ubuntu system and use it to manage your PostgreSQL databases, users, and more. Installation: Visit the pgAdmin download page and download the appropriate package for Ubuntu. Follow the installation instructions provided on the download page to install pgAdmin on your system. Usage: Once installed, launch pgAdmin from the applications menu or by running the pgadmin4 command in the terminal. Connect to your PostgreSQL server by providing the necessary connection details, including host, port, username, and password. Once connected, you can perform various database administration tasks using pgAdmin's intuitive graphical interface. Additional Resources PostgreSQL Tutorial: Comprehensive tutorial for PostgreSQL beginners. pgAdmin Documentation: Official documentation for pgAdmin. Step 4: Install Apache Server This step covers the installation of Apache HTTP Server on Ubuntu. Apache is a widely-used web server that can serve HTML files and other content over HTTP. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Update Package List: Before installing any new software, it's good practice to update the package list to ensure you're installing the latest versions. Run the following command: sudo apt update Install Apache: Install Apache HTTP Server using the following command: sudo apt install apache2 Start Apache Service: Once the installation is complete, Apache service should start automatically. However, you can ensure that it's running by executing the following command: sudo systemctl start apache2 Enable Apache Service to Start on Boot: To ensure that Apache starts automatically every time the system boots, enable it as a systemd service: sudo systemctl enable apache2 Check Apache Status: To verify that Apache is running without any errors, you can check its status using: sudo systemctl status apache2 Access Apache Default Page: Open a web browser and navigate to http://localhost. You should see the Apache default page if the installation was successful. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. Ubuntu Server Guide: Comprehensive guide for Ubuntu Server, which includes instructions for installing and configuring various software packages. Step 5: Install .NET Core This step covers the installation of .NET Core on Ubuntu. .NET Core is a cross-platform, open-source framework for building modern, cloud-based, and internet-connected applications. Prerequisites Ubuntu Desktop or Server installed and configured on your system. Installation Process Open Terminal: Open a terminal window by pressing Ctrl + Alt + T or searching for \"Terminal\" in the applications menu. Register Microsoft Product Repository: To install .NET Core, you first need to register the Microsoft product repository. Run the following command to download and install the Microsoft package signing key: wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb Install .NET SDK: Once the repository is registered, update the package list and install the .NET SDK using the following commands: sudo apt update sudo apt install -y apt-transport-https sudo apt update sudo apt install -y dotnet-sdk Verify Installation: After installation, verify that the .NET SDK has been successfully installed by running: dotnet --version Install ASP.NET Core Runtime (Optional): If you plan to deploy ASP.NET Core applications, you may also want to install the ASP.NET Core Runtime. Use the following command to install it: sudo apt install -y aspnetcore-runtime Additional Resources .NET Documentation: Official documentation for .NET. .NET Core Download Page: Official download page for .NET Core SDK and runtime. Step 6: Configure Host and Service Files for Apache This step involves creating configuration files for Apache virtual host and service to serve your .NET Core application. Prerequisites Apache server installed on your Ubuntu system. .NET Core SDK installed on your system. Oqtane Framework files ready to be deployed. Configuration Process Create Apache Virtual Host Configuration File: Open a terminal window and navigate to the Apache sites-available directory: cd /etc/apache2/sites-available Create a new virtual host configuration file for your .NET Core application. Replace example.com with your domain name: sudo nano example.com.conf Add the following configuration to the file, adjusting the values as needed: <VirtualHost *:80> ServerName example.com DocumentRoot /var/www/example.com ErrorLog ${APACHE_LOG_DIR}/example.com-error.log CustomLog ${APACHE_LOG_DIR}/example.com-access.log combined </VirtualHost> Save the file and exit the text editor. If you're not familiar with nano, you can learn more about it in the nano documentation. Create Document Root Directory: Create the document root directory where your .NET Core application files will be stored: sudo mkdir /var/www/example.com Configure Apache Service: Enable the newly created virtual host configuration and restart the Apache service: sudo a2ensite example.com.conf sudo systemctl restart apache2 Deploy .NET Core Application: Copy or publish your .NET Core application files to the document root directory (/var/www/example.com) of the virtual host. Adjust File Permissions (Optional): Depending on the deployment scenario, you may need to adjust file permissions to ensure that Apache can access and serve your .NET Core application files properly. Verify Configuration: Open a web browser and navigate to your domain name (e.g., http://example.com). If configured correctly, you should see your .NET Core application running. Additional Resources Apache HTTP Server Documentation: Official documentation for Apache HTTP Server. .NET Core Deployment Guide: Official deployment guide for .NET Core applications. Step 7: Setup App Files and Folders Create Directory Structure: Begin by creating a directory structure to organize your Oqtane application files. Choose a location on your Ubuntu system where you want to store the application files. For example: sudo mkdir /var/www/oqtane Clone or Download Oqtane Framework: Navigate to the Oqtane Framework GitHub repository and clone the repository to your local machine using Git or download the source code as a ZIP archive. Option 1: Clone Repository sudo git clone https://github.com/oqtane/oqtane.framework.git /var/www/oqtane Option 2: Download ZIP Archive Visit the Oqtane Framework repository on GitHub. Click on the \"Code\" button and select \"Download ZIP\". Extract the downloaded ZIP archive to the /var/www/oqtane directory. Place Oqtane Files: Once you have obtained the Oqtane Framework files, place them in the directory structure you created earlier. Ensure that the files are organized correctly within the directory to maintain the application's structure. sudo cp -r /path/to/oqtane.framework/* /var/www/oqtane Set Permissions (Optional): Depending on your setup, you may need to adjust file permissions to ensure that the web server can access the Oqtane application files properly. Use the following commands to set appropriate permissions: sudo chown -R www-data:www-data /var/www/oqtane sudo chmod -R 755 /var/www/oqtane Configure Web Server: If you haven't already configured Apache to serve your Oqtane application, you'll need to set up a virtual host and configure the necessary Apache directives to point to the application directory. Refer to the Apache documentation for detailed instructions on virtual host configuration. By following these steps, you have successfully set up the directory structure and placed the Oqtane Framework files in the appropriate location on your Ubuntu system. Your application is now ready for further configuration and deployment. Step 8: Install Oqtane Framework (Linux) To install the Oqtane Framework on Linux, follow these steps: Download Oqtane Release: Download the latest release of Oqtane from the official GitHub repository. Choose the appropriate version and download the ZIP file containing the release files. Extract Release Files: After downloading the ZIP file, extract its contents to a directory on your Linux machine where you want to host the Oqtane application. Set Permissions: Ensure that the appropriate permissions are set for the Oqtane files and directories, allowing the web server user to read and execute the files. You can use the following commands in the terminal to set permissions: sudo chown -R www-data:www-data /path/to/oqtane sudo chmod -R 755 /path/to/oqtane Configure Database Connection: Update the database connection string in the appsettings.json file located in the root directory of your Oqtane application. Use the connection string for your preferred database server (e.g., MySQL, PostgreSQL). Access Oqtane Installation Wizard: Open a web browser and navigate to the URL associated with your Oqtane installation directory. If everything is configured correctly, you should see the Oqtane installation wizard, where you can proceed with the installation and setup of your Oqtane application. By following these steps, you will have successfully installed and configured the Oqtane Framework on your Linux machine, making your application accessible via a web browser. Step 9: Test the Installation After completing the installation process, it's important to test your Oqtane application to ensure everything is working correctly. Follow these steps to test the installation: Access Oqtane Application: Open a web browser and navigate to the URL associated with your Oqtane application. This should be the URL you configured during the installation process. Verify Functionality: Once the Oqtane application loads, verify that it is running correctly. Test various features and functionalities to ensure that everything is working as expected. Login and Administration: If applicable, log in to the Oqtane application using the provided credentials and verify that you have access to the administration interface. This will allow you to manage users, modules, pages, and other aspects of your Oqtane application. Test User Experience: Test the user experience by navigating through different pages, interacting with modules, and performing common tasks within the application. Ensure that the application is responsive and functions properly across different devices and screen sizes. By testing the installation and functionality of your Oqtane application, you can identify any issues or errors early on and address them accordingly, ensuring a smooth and successful deployment. Resources Official Oqtane Latest Release All Official Oqtane Releases Oqtane Framework GitHub Repository Visual Studio Code .NET Core Related Pages Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/maui-setup.html": {
    "href": "manuals/admin/installation/maui-setup.html",
    "title": "Setting Up Oqtane.Maui for Development with Visual Studio | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Setting Up Oqtane.Maui for Development with Visual Studio Introduction Oqtane.Maui is a hybrid .NET MAUI application that integrates with the Oqtane framework, allowing developers to create cross-platform applications with ease. This guide provides a step-by-step process to set up Oqtane.Maui for development using Visual Studio and .NET 8, specifically for Oqtane version 5.1. Prerequisites Visual Studio installed and updated on your machine. Latest .NET 8 SDK installed. A database server installed on your machine or accessible from your network. You can use MySQL, PostgreSQL, SQLite, or SQL Server. Step-by-Step Setup Guide 1. Install Oqtane Follow the official Oqtane getting started guide here. Ensure you have the required dependencies installed. 2. Configure Oqtane for Hybrid .NET MAUI Open the Oqtane Admin Dashboard. Navigate to Site Settings Navigate to UI Component Settings Set the option for Hybrid? to Yes. 3. Edit the MauiConstants.cs File (Option #1) Open your Oqtane.Maui project in Visual Studio. Locate the MauiConstants.cs file in your project directory. Modify the file to point to your Oqtane web application: namespace Oqtane.Maui; public static class MauiConstants { // the API service url (used as fallback if not set in appsettings.json) public static string ApiUrl = \"\"; // public static string ApiUrl = \"http://localhost:44357/\"; // for local development (Oqtane.Server must be already running for MAUI client to connect) //public static string apiurl = \"http://localhost:44357/sitename/\"; // local microsite example //public static string apiurl = \"https://www.dnfprojects.com/\"; // for testing remote site // specify if you wish to allow users to override the url via appsettings.json in the AppDataDirectory public static bool UseAppSettings = true; } For local development you may set this as shown in the image below by commenting/uncommenting lines. 4. Modify appsettings.json (Option #2 Preferred) The preferred way to configure the URL is through the appsettings.json file. Note that the Oqtane.Maui app supports an appsettings.json file located in the FileSystem.Current.AppDataDirectory. The first time you run the Oqtane.Maui app, it will look in that location for the appsettings.json file, and if it does not exist, it will create one and display a message in the UI: This option allows you to modify the appsettings.json without having to change the MauiConstants.cs file and recompile the app (although that approach works as well). 5. Build and Deploy the Application Open the Oqtane.Maui project in Visual Studio. Build the application: Go to Build > Build Solution or press Ctrl + Shift + B. Run/launch the application: Set the Oqtane.Maui project as the startup project. Press F5 to start debugging or Ctrl + F5 to run without debugging. Alternatively, you can run the application by clicking on Windows Machine within Visual Studio. If you prefer, you can also find the application deployed on your Windows machine and run it from your desktop. Additional Tips and Troubleshooting Ensure all dependencies are correctly installed. Oqtane Framework must be running on a seperate instance of Visual Studio or a web server. For additional user functionality like file uploads you may need to create a user token. This can be accomplished by navigating to Admin Dashboard > User Management > Token Settings and setting the *Secret: option. For further assistance, refer to the Oqtane community discussion forums. Conclusion By following these steps, you should have a fully functional Oqtane.Maui setup for development with Visual Studio. If you encounter any issues or have suggestions for improving this guide, please contribute to the documentation."
  },
  "manuals/admin/installation/resources.html": {
    "href": "manuals/admin/installation/resources.html",
    "title": "Resources | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Resources This section provides a collection of links and resources that can help you with Oqtane installation, development, and usage. You can find information and guidance on various topics, such as Oqtane framework, IDE tools, IIS and .NET Core hosting, databases, modules, themes, localization, security, and more. You can also access the Oqtane blog and GitHub repository for the latest news, tips, and tutorials. Note: The links in this section are external and may lead to websites that are not affiliated with Oqtane. Please use them at your own discretion and follow their respective terms and policies. Oqtane Framework Oqtane Framework Releases: Download the latest Oqtane release for installation. Oqtane GitHub Repository: Contribute to the Oqtane project and report issues on GitHub. Oqtane Blog: Stay updated with the latest news, tips, and tutorials. IDE Tools Visual Studio and VS Code Downloads: Download Visual Studio (Windows Only) and Visual Studio Code (Windows and Linux) IDEs for development. IIS & .NET Core Hosting Microsoft .NET Downloads: Download the .NET Core Hosting Bundle for hosting .NET Core applications on Windows servers. IIS URL Rewrite Module: Download and install URL Rewrite Module for configuring URL rewriting rules in IIS. WebSocket Support on IIS: Instructions for enabling WebSockets on IIS. Publish an ASP.NET Core app to IIS: This tutorial demonstrates how to host an ASP.NET Core app on an IIS server. ASP.NET Core security topics: This article provides an overview of ASP.NET Core security features, including authentication, authorization, data protection, HTTPS enforcement, safe storage of app secrets, XSRF/CSRF prevention, CORS, and XSS attack prevention. Databases SQL Server SQL Server Downloads: Download SQL Server. Windows SQL Server 2022 Evaluation Download: A free trial version of SQL Server 2022, the latest release of the relational database management system from Microsoft. SQL Server Management Studio (SSMS) Download: Download SQL Server Management Studio for database management. SQL Server Installation Guide for Linux Ubuntu: Detailed guide on installing SQL Server on Ubuntu. Visual Studio Code mssql Extension: The mssql extension for Visual Studio Code (VS Code) to work with databases in SQL Server on Windows, macOS, and Linux, as well as Azure SQL Database and Azure SQL Managed Instance. MySQL MySQL Downloads: Download MySQL Community Server. MySQL Workbench Download: MySQL Workbench for database administration. MySQL Documentation for Windows Installation: Installing MySQL on Microsoft Windows. MySQL Documentation for Ubuntu Installation: Quick guide for installing MySQL on Ubuntu using APT repository. PostgreSQL PostgreSQL Downloads: Download the latest version of PostgreSQL. pgAdmin Download: Tool for PostgreSQL administration. PostgreSQL Documentation Tutorial: Tutorial to help with installing, configuring and using PostgreSQL database server. PostgreSQL Documentation for Ubuntu Installation: Installation guide specific to Ubuntu environment. SQLite SQLite Downloads: Download SQLite for Ubuntu. SQLite Documentation: Official documentation for SQLite. Windows OS Windows Server 2022 Evaluation Download: A free trial version of Windows Server 2022, the latest release of the server operating system from Microsoft.application platform, and storage. Windows 11 Enterprise Evaluation Download: A free trial version of Windows 11 Enterprise, the most advanced and secure edition of Windows 11, the latest operating system from Microsoft. Linux Ubuntu OS Downloads: Ubuntu Downloads: Download the latest version of Ubuntu. Installation Guide Ubuntu Installation Guide: Step-by-step guide for installing Ubuntu Desktop edition. Ubuntu Server Installation Guide: Installation guide for Ubuntu Server edition. Nano Editor Online Manual: This is the online manual for the Nano text editor, providing detailed documentation on its usage and features. GNU Nano Official Website: Visit the official website of GNU Nano to find additional resources, downloads, and community support. GNU Nano Documentation: Access the comprehensive documentation for GNU Nano, including guides, FAQs, and release notes. Apache HTTP Server Apache HTTP Server Documentation: Official documentation for the Apache HTTP Server, providing comprehensive guides, configuration references, and troubleshooting tips. Apache Foundation: The official website of the Apache Software Foundation, where you can find information about all Apache projects, including the HTTP Server. Ubuntu: Install and Configure Apache: Tutorial going through the steps of setting up an Apache server on Ubuntu. Host ASP.NET Core on Linux with Apache: This article explains how to set up Apache as a reverse proxy server on CentOS 7 to redirect HTTP traffic to an ASP.NET Core web app running on the Kestrel server. Resources Mozilla Developer Network (MDN): Visit MDN for comprehensive documentation and resources on web development, including HTML, CSS, JavaScript, and more. Mozilla Server Side TLS Guidelines: Mozilla provides guidelines for configuring server-side TLS to enhance security. These guidelines cover various aspects of TLS configuration, including cipher suites, protocols, and certificate management. Mozilla SSL Configuration Generator: This tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Let's Encrypt: Let's Encrypt is a free, automated, and open certificate authority (CA) that provides SSL/TLS certificates to enable HTTPS on websites. Their website offers detailed documentation and resources for setting up HTTPS on web servers. ← Back to Installation Home"
  },
  "manuals/admin/installation/troubleshooting.html": {
    "href": "manuals/admin/installation/troubleshooting.html",
    "title": "Installation Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installation Troubleshooting Overview Encountering issues during the installation process can be frustrating, but with the right troubleshooting steps, you can overcome common obstacles and successfully set up Oqtane. Below are some common troubleshooting tips for both Windows and Linux installations: Windows Installation Troubleshooting Check Prerequisites: Ensure that all prerequisites, such as .NET Framework, IIS, or SQL Server, are installed correctly and meet the minimum version requirements specified in the Oqtane documentation. Permissions: Verify that you have sufficient permissions to install and configure Oqtane. Running installation processes with administrative privileges can help resolve permission-related issues. Firewall and Antivirus: Temporarily disable firewall or antivirus software during the installation process, as they may interfere with file downloads or server connections. Error Logs: Check error logs generated during the installation process for any specific error messages or exceptions. These logs can provide valuable insights into the root cause of installation failures. Linux Installation Troubleshooting Package Dependencies: Ensure that all required dependencies, such as Mono, Apache, MySQL, or PostgreSQL, are installed and configured correctly on your Linux system. Use package managers like apt or yum to install missing dependencies. File Permissions: Check file and directory permissions to ensure that the installation directory and relevant files are accessible by the installation process. Adjust permissions using chmod or chown commands as needed. Service Status: Verify the status of Apache or other web servers, as well as database services like MySQL or PostgreSQL, to ensure they are running properly. Restart services if necessary to resolve any issues. SELinux: If SELinux is enabled on your Linux system, it may restrict certain operations during the installation process. Temporarily disable SELinux or adjust its policies to allow necessary operations for Oqtane installation. Additional Resources For further assistance and discussions on installation troubleshooting, you can explore the Oqtane Framework GitHub repository and review existing issues and discussions related to installation problems. Engaging with the community and seeking help from experienced users and developers can often provide valuable insights and solutions to resolve installation issues. Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/upgrade.html": {
    "href": "manuals/admin/installation/upgrade.html",
    "title": "Upgrading Oqtane | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Upgrading Oqtane Regularly upgrading Oqtane is crucial to maintain the latest fixes, features, and security patches. Below, you'll find simplified instructions for both manual and automated upgrade processes. Manual Upgrade Performing a manual upgrade ensures full control over the process. Follow these straightforward steps: Step 1: Download Upgrade Package Visit the Oqtane Framework releases page on GitHub. Download the package for your desired version that ends with *.Upgrade.zip (e.g., Oqtane.Framework.5.0.2.Upgrade.zip). Step 2: Access Installation Location Navigate to the root location where your Oqtane framework files were initially deployed. You can identify this location by files with a .dll extension (e.g., Oqtane.Server.dll). Step 3: Stop Oqtane Application Depending on your setup: Stop your website using your web server or cloud provider's interface. In IIS (Internet Information Services), stop the corresponding App Pool. For Apache or Linux alternatives, halt the relevant service. Alternatively, create an app_offline.htm file in the root folder to temporarily shut down your site. Step 4: Replace Files Extract all files from the Upgrade.zip package into the root location obtained in Step 2. When prompted, replace existing files with those from the upgrade package. Step 5: Restart Oqtane Application Restart your Oqtane application: Restart your site using your web server or cloud provider's interface. In IIS, restart the previously stopped App Pool. For Apache or Linux, restart the halted service. If you created an app_offline.htm file, delete it now. Step 6: Verify Upgrade Open your web browser and navigate to your site's URL. The upgrade scripts will automatically execute during application startup. Automated Upgrade Oqtane streamlines the upgrade process for non-technical users with its automated upgrade feature. Follow these steps: Log in to your Oqtane site as the host user. Navigate to the Admin Dashboard via the Control Panel. Choose the \"System Update\" option. 4.If a newer version is available on Nuget.org, click \"Upgrade to #.#.#\" to download and perform the upgrade automatically. If you're already up-to-date, you'll see a message indicating this. Alternatively, use the \"Upload\" tab to manually upload a framework upgrade package to the site and select a button to install it. This method also supports reinstallation or repair of an existing installation with the current version. Note: Automated upgrades may fail due to environmental factors. If this occurs, resort to the manual method described above. Oqtane Automated Upgrade Process By following these instructions, you'll ensure your Oqtane installation stays current with the latest enhancements and security fixes. Remember, stopping the Oqtane application is essential to replace files during the upgrade process. Automated upgrades streamline the process, but manual upgrades provide greater control, especially for custom installations. Resources Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/windows-iis-express-sql-express.html": {
    "href": "manuals/admin/installation/windows-iis-express-sql-express.html",
    "title": "Install Using Windows, IIS Express and MS SQL Express | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Using Windows, IIS Express and MS SQL Express Step 1: Install IIS Search for \"Turn Windows features on or off\" next to the Windows Start button. Enable Internet Information Services (IIS) ensuring WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Note: Ensure that the WebSocket Protocol is enabled and WebDAV Publishing is disabled to avoid conflicts with Blazor. Step 2: Install Url Rewrite Module Navigate to Url Rewrite Module. Download and install. Note: The URL Rewrite Module is necessary for configuring URL rewriting rules in IIS, which are often used in web applications like Oqtane. Step 3: Install .NET Core Hosting Bundle Navigate to .NET Core Hosting Bundle. Download and install the bundle. Restart your machine. Note: The .NET Core Hosting Bundle is required for hosting .NET Core applications on Windows servers. Step 4: Install LocalDB If doing a local install and wanting to use LocalDB for development, navigate to LocalDB installation and choose the appropriate package. Note: LocalDB is recommended for development environments but can be substituted with other database options supported by Oqtane such as SQLite, MySQL, PostgreSQL, or SQL Server. Step 5: Install Oqtane Download the latest Install package from Oqtane Releases. Extract the files to your desired directory. Note: Extract the files to a directory where you plan to host your application. Step 6: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" by searching for it using the search icon next to your Windows Start button. Expand the top node identifying your machine in the left-hand pane. Right-click on Application Pools and select \"Add Application Pool\". Provide a Name for the application pool, such as \"oqtane\". Specify No Managed Code for the .NET CLR version. Click OK. In the main Application Pools pane, select the newly created pool. In the right-hand Actions pane, select Advanced Settings. Scroll down to Process Model and find the Identity option. To ensure secure interaction with the file system and LocalDB without granting excessive privileges, it's recommended to modify the permissions of the folder containing the IIS Oqtane files to grant appropriate access to the Application Pool's identity. Right-click on the folder containing the Oqtane files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Add the Application Pool's identity (e.g., IIS AppPool\\oqtane) and grant it appropriate permissions, such as Modify access. This allows the application pool to write to the directory in addition to reading from it. Locate the LocalDB Data Directory: By default, LocalDB databases are stored in the user's profile directory under C:\\Users\\{username}\\AppData\\Local\\Microsoft\\Microsoft SQL Server Local DB\\Instances\\{instancename}\\. Modify Folder Permissions: Right-click on the folder containing the LocalDB database files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Click on \"Add\" and enter the name of the user account or group that you want to grant modify permissions to. This could be your current user account or the Application Pool's identity if it needs to write to the LocalDB files. After adding the user or group, select it from the list and check the \"Modify\" permission checkbox under \"Allow\". Click \"Apply\" and then \"OK\" to save the changes. Note: For development environments, setting the App Pool's Identity to \"LocalSystem\" may be acceptable for simplicity and ease of setup. However, exercise caution and consider using a more granular approach for production environments to adhere to security best practices. Step 7: Configure IIS Website In IIS, right-click on Sites and select \"Add Website\". Provide a name and choose the Application Pool created earlier. Specify the path to the Oqtane files. Specify a Host name, e.g., \"oqtane.dev\". Note: Ensure that the host name specified here is correctly mapped to the machine in the host file. Step 8: Add a Host Entry Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., \"127.0.0.1 oqtane.dev\". Save the file. Note: This step is only required for a local development environment. In shared or public environments, standard DNS configurations are used. Step 9: Navigate to Site Open your favorite browser and navigate to the specified host name, e.g., http://oqtane.dev. Follow the Oqtane install wizard, providing necessary database connection details and site administrator credentials. Click Install. Note: If encountering errors during the Install Wizard due to database creation permissions, consider creating the database manually before initiating the Install Wizard. Step 10: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/windows-iis-localdb.html": {
    "href": "manuals/admin/installation/windows-iis-localdb.html",
    "title": "Install Oqtane Using Windows, IIS Express and LocalDB | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Windows, IIS Express and LocalDB Step 1: Install IIS Search for \"Turn Windows features on or off\" next to the Windows Start button. Enable Internet Information Services (IIS) ensuring WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Note: Ensure that the WebSocket Protocol is enabled and WebDAV Publishing is disabled to avoid conflicts with Blazor. Step 2: Install Url Rewrite Module Navigate to Url Rewrite Module. Download and install. Note: The URL Rewrite Module is necessary for configuring URL rewriting rules in IIS, which are often used in web applications like Oqtane. Step 3: Install .NET Core Hosting Bundle Navigate to .NET Core Hosting Bundle. Download and install the bundle. Restart your machine. Note: The .NET Core Hosting Bundle is required for hosting .NET Core applications on Windows servers. Step 4: Install LocalDB If doing a local install and wanting to use LocalDB for development, navigate to LocalDB installation and choose the appropriate package. Note: LocalDB is recommended for development environments but can be substituted with other database options supported by Oqtane such as SQLite, MySQL, PostgreSQL, or SQL Server. Step 5: Install Oqtane Download the latest Install package from Oqtane Releases. Extract the files to your desired directory. Note: Extract the files to a directory where you plan to host your application. Step 6: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" by searching for it using the search icon next to your Windows Start button. Expand the top node identifying your machine in the left-hand pane. Right-click on Application Pools and select \"Add Application Pool\". Provide a Name for the application pool, such as \"oqtane\". Specify No Managed Code for the .NET CLR version. Click OK. In the main Application Pools pane, select the newly created pool. In the right-hand Actions pane, select Advanced Settings. Scroll down to Process Model and find the Identity option. To ensure secure interaction with the file system and LocalDB without granting excessive privileges, it's recommended to modify the permissions of the folder containing the IIS Oqtane files to grant appropriate access to the Application Pool's identity. Right-click on the folder containing the Oqtane files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Add the Application Pool's identity (e.g., IIS AppPool\\oqtane) and grant it appropriate permissions, such as Modify access. This allows the application pool to write to the directory in addition to reading from it. Locate the LocalDB Data Directory: By default, LocalDB databases are stored in the user's profile directory under C:\\Users\\{username}\\AppData\\Local\\Microsoft\\Microsoft SQL Server Local DB\\Instances\\{instancename}\\. Modify Folder Permissions: Right-click on the folder containing the LocalDB database files in Windows Explorer. Select \"Properties\" and navigate to the \"Security\" tab. Click on \"Edit\" to modify permissions. Click on \"Add\" and enter the name of the user account or group that you want to grant modify permissions to. This could be your current user account or the Application Pool's identity if it needs to write to the LocalDB files. After adding the user or group, select it from the list and check the \"Modify\" permission checkbox under \"Allow\". Click \"Apply\" and then \"OK\" to save the changes. Note: For development environments, setting the App Pool's Identity to \"LocalSystem\" may be acceptable for simplicity and ease of setup. However, exercise caution and consider using a more granular approach for production environments to adhere to security best practices. Step 7: Configure IIS Website In IIS, right-click on Sites and select \"Add Website\". Provide a name and choose the Application Pool created earlier. Specify the path to the Oqtane files. Specify a Host name, e.g., \"oqtane.dev\". Note: Ensure that the host name specified here is correctly mapped to the machine in the host file. Step 8: Add a Host Entry Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., \"127.0.0.1 oqtane.dev\". Save the file. Note: This step is only required for a local development environment. In shared or public environments, standard DNS configurations are used. Step 9: Navigate to Site Open your favorite browser and navigate to the specified host name, e.g., http://oqtane.dev. Follow the Oqtane install wizard, providing necessary database connection details and site administrator credentials. Click Install. Note: If encountering errors during the Install Wizard due to database creation permissions, consider creating the database manually before initiating the Install Wizard. Step 10: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/installation/windows-iis-sql.html": {
    "href": "manuals/admin/installation/windows-iis-sql.html",
    "title": "Install Oqtane Using Windows, IIS and MS SQL Server | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Install Oqtane Using Windows, IIS and MS SQL Server Overview This guide will walk you through the steps to install Oqtane on a Windows system using Internet Information Services (IIS) as the web server and Microsoft SQL Server as the database backend. We'll also use SQL Server Management Studio (SSMS) for database management. Prerequisites Before you begin, make sure you have the following: A Windows machine with administrative privileges. Internet Information Services (IIS) installed. Microsoft SQL Server installed, along with SQL Server Management Studio (SSMS). Step 1: Enable Internet Information Services (IIS) Open the \"Turn Windows features on or off\" menu next to the Windows Start button. Enable Internet Information Services (IIS), ensuring that the WebSocket Protocol is enabled and WebDAV Publishing is disabled. Click OK to complete the installation. Step 2: Install URL Rewrite Module Navigate to the Url Rewrite Module page. Download and install the module. Step 3: Install .NET Core Hosting Bundle Navigate to the .NET Core Hosting Bundle page. Download and install the Windows hosting bundle. Restart your machine. Step 4: Install Microsoft SQL Server Download and install Microsoft SQL Server. Ensure that you enable SQL Server Authentication mode during the installation process. During the installation, choose the option to enable TCP/IP protocol for network communication. Step 5: Install SQL Server Management Studio (SSMS) Download and install SQL Server Management Studio (SSMS). Step 6: Configure SQL Server Open SQL Server Management Studio (SSMS). Connect to your SQL Server instance. Create a new database for Oqtane. Optionally, create a new SQL Server login or use an existing one for Oqtane. Step 7: Download and Extract Oqtane Download the latest release of Oqtane from the Oqtane Releases page. Extract the files to your desired directory. Step 8: Configure IIS App Pool Open \"Internet Information Services (IIS) Manager\" from the Start menu. Create a new Application Pool named \"oqtane\" with No Managed Code for the .NET CLR version. Set appropriate permissions for the folder containing the Oqtane files. Note: Ensure that the folder containing the Oqtane files has appropriate modify permissions set for the \"IIS AppPool\\oqtane\" user to avoid any permission issues during installation or runtime. Step 9: Configure IIS Website In IIS Manager, right-click on Sites and select \"Add Website\". Provide a name and choose the \"oqtane\" Application Pool. Specify the path to the Oqtane files and a host name (e.g., \"oqtane.dev\"). Step 10: Add a Host Entry (Optional) Open Notepad as Administrator. Open the \"hosts\" file located in C:\\Windows\\System32\\drivers\\etc. Add an entry mapping the host name to 127.0.0.1, e.g., 127.0.0.1 oqtane.dev. Save the file. Step 11: Navigate to the Site Open your favorite web browser. Navigate to the specified host name, e.g., http://oqtane.dev. You should now see the Oqtane installation wizard. Follow the on-screen instructions to complete the installation process. Step 12: Secure the Site (Optional) Note It's essential to implement robust security measures for production applications before going live. Once the installation is complete and the site is up and running, consider implementing security measures to protect your Oqtane application. Enable HTTPS: Encrypt communication between the server and clients by enabling HTTPS. You can obtain SSL/TLS certificates from a trusted Certificate Authority (CA) like Let's Encrypt or purchase one from a commercial provider. Learn more about HTTPS and security best practices from the Mozilla Server Side TLS Guidelines. Mozilla SSL Configuration Generator tool helps generate secure SSL configurations for popular web servers, including Apache, Nginx, and others. It provides recommended configurations based on Mozilla's SSL/TLS best practices. Configure Authentication and Authorization: Control access to your site's resources by configuring appropriate authentication and authorization mechanisms. You can leverage ASP.NET Core Identity for user authentication and role-based authorization. Explore additional security topics and best practices for ASP.NET Core from the ASP.NET Core security topics documentation. Implement Security Best Practices: Follow security best practices such as input validation, output encoding, and protection against common web vulnerabilities like Cross-Site Scripting (XSS) and Cross-Site Request Forgery (CSRF). Keep Software Updated: Regularly update Oqtane and its dependencies to patch security vulnerabilities and ensure that your site is protected against known threats. Stay informed about security advisories and apply patches promptly. Monitor and Respond: Monitor your site for suspicious activities and implement logging and monitoring solutions to detect and respond to security incidents effectively. Set up alerts for unusual behavior and unauthorized access attempts. Regular Security Audits: Conduct regular security audits of your Oqtane application to identify and remediate security vulnerabilities. Perform code reviews, penetration testing, and vulnerability scanning to ensure the integrity and security of your site. Resources Oqtane Supported Databases Oqtane Installation Resources ← Back to Installation Home"
  },
  "manuals/admin/marketplace/assets/placeholder.html": {
    "href": "manuals/admin/marketplace/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "manuals/admin/marketplace/index.html": {
    "href": "manuals/admin/marketplace/index.html",
    "title": "Oqtane Marketplace Overview | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Marketplace Overview The Oqtane Marketplace is a central hub where users and developers can discover, share, and distribute themes, modules, and translations for the Oqtane framework. Whether you're a developer looking to showcase your creations or a user seeking new features and enhancements for your Oqtane-based application, the Marketplace provides a convenient platform to meet your needs. Using the Oqtane Marketplace Learn how to navigate the Oqtane Marketplace, find and install themes and modules, and explore the available offerings. This guide will walk you through the process of discovering and utilizing resources from the Marketplace to enhance your Oqtane experience. Submitting Contributions Are you a developer interested in sharing your themes, modules, or translations with the Oqtane community? This manual provides detailed instructions on how to prepare and submit your contributions to the Oqtane Marketplace, making them accessible to users worldwide. Monetization Options Discover opportunities for monetization within the Oqtane Marketplace. Whether you're interested in offering commercial products or exploring sponsorship and advertising options, this guide outlines various strategies for monetizing your contributions to the Oqtane ecosystem. Troubleshooting Encountering issues while using the Oqtane Marketplace? This troubleshooting guide offers solutions to common problems and helps you resolve issues related to theme and module installation, compatibility, and other Marketplace functionalities. Explore the Oqtane Marketplace and unleash the full potential of your Oqtane-based applications today!"
  },
  "manuals/admin/marketplace/monetization.html": {
    "href": "manuals/admin/marketplace/monetization.html",
    "title": "Monetization Options in the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Monetization Options in the Oqtane Marketplace Overview The Oqtane Marketplace offers various opportunities for developers to monetize their contributions, including themes, modules, and translations. Whether you're looking to generate revenue from your creations or support your development efforts, the Marketplace provides several monetization options to suit your needs. Pricing Models Explore different pricing models available in the Oqtane Marketplace, including free, freemium, subscription-based, and one-time purchase options. Learn how to choose the right pricing model for your products and maximize your revenue potential. Licensing and Usage Rights Understand the licensing and usage rights associated with products listed on the Oqtane Marketplace. From open-source licenses to commercial licenses, this section provides guidance on selecting the appropriate licensing model for your themes, modules, or translations. Payment Processing Learn about the payment processing options available for commercial products in the Oqtane Marketplace. Whether you prefer to use integrated payment gateways or manage transactions independently, this section covers the steps involved in setting up payment processing for your products. Sponsorship and Advertising Explore opportunities for sponsorship and advertising within the Oqtane Marketplace. From promoting your products to sponsoring specific features or sections of the Marketplace, this section discusses how to leverage sponsorship and advertising to increase visibility and reach a wider audience. Analytics and Reporting Gain insights into the performance of your products in the Oqtane Marketplace through analytics and reporting tools. Learn how to track key metrics such as downloads, revenue, and user engagement to optimize your monetization strategies and drive growth. Support and Maintenance Services Discover the value of offering support and maintenance services for your products listed on the Oqtane Marketplace. From providing timely updates and bug fixes to offering premium support packages, this section explores ways to enhance the customer experience and build long-term relationships with users. Promotional Strategies Develop effective promotional strategies to increase awareness and sales of your products in the Oqtane Marketplace. Whether through targeted marketing campaigns, cross-promotions with other developers, or participation in community events, this section offers practical tips for promoting your monetized offerings. By leveraging the monetization options available in the Oqtane Marketplace, you can turn your passion for development into a sustainable source of income while contributing to the growth and success of the Oqtane ecosystem."
  },
  "manuals/admin/marketplace/submitting-contributions.html": {
    "href": "manuals/admin/marketplace/submitting-contributions.html",
    "title": "Submitting Contributions to the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Submitting Contributions to the Oqtane Marketplace Overview This manual provides detailed instructions for developers interested in contributing themes, modules, and translations to the Oqtane Marketplace. By sharing your creations with the Oqtane community, you can make your work accessible to users worldwide and contribute to the growth of the ecosystem. Preparing Your Contributions Before submitting your themes, modules, or translations to the Marketplace, it's essential to ensure they meet certain standards and requirements. This section outlines the steps you need to take to prepare your contributions for submission. Submitting Themes Themes play a crucial role in defining the appearance and user experience of Oqtane-based applications. Learn how to package and submit your themes to the Marketplace, making them available for users to enhance the visual aesthetics of their sites. Submitting Modules Modules provide additional functionality and features to Oqtane applications. This section guides you through the process of packaging and submitting your modules to the Marketplace, enabling users to extend the capabilities of their applications. Submitting Translations Translating applications into different languages enhances accessibility and usability for users worldwide. Discover how to prepare and submit your translations to the Marketplace, allowing users to customize their applications to suit their linguistic preferences. Review Process Once you've submitted your contributions to the Marketplace, they will undergo a review process to ensure quality and compatibility. This section provides an overview of the review process and what to expect during the evaluation of your submissions. Making Updates After your contributions are live on the Marketplace, you may need to make updates or revisions based on user feedback or changes in Oqtane's framework. Learn how to manage and update your submissions to provide the best possible experience for users. Promoting Your Contributions Promoting your themes, modules, and translations can help increase visibility and adoption within the Oqtane community. Discover strategies for effectively promoting your contributions and reaching a broader audience of users. By following the guidelines outlined in this manual, you can contribute to the growth and development of the Oqtane ecosystem while showcasing your talents and expertise to the community."
  },
  "manuals/admin/marketplace/troubleshooting.html": {
    "href": "manuals/admin/marketplace/troubleshooting.html",
    "title": "Troubleshooting in the Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting in the Oqtane Marketplace Overview Encountering issues while using the Oqtane Marketplace? This troubleshooting guide offers solutions to common problems and helps you resolve issues related to theme and module installation, compatibility, and other Marketplace functionalities. Common Issues and Solutions Learn about common issues that users may encounter when using the Oqtane Marketplace and how to troubleshoot them effectively. From installation errors to compatibility issues, this section provides step-by-step solutions to help you resolve issues quickly and get back to using the Marketplace. Issue 1: Theme or Module Installation Error Solution: If you encounter an error while installing a theme or module from the Marketplace, follow these steps to troubleshoot the issue: Check the error message for any specific details or error codes. Ensure that your Oqtane site is running on a compatible version of the framework. Verify that you have sufficient permissions to install themes or modules on your Oqtane site. If the issue persists, try reinstalling the theme or module from the Marketplace. Issue 2: Compatibility Problems Solution: If you experience compatibility issues between themes, modules, or translations installed from the Marketplace and your Oqtane site, consider the following solutions: Check the compatibility requirements specified by the theme or module developer. Update your Oqtane site to the latest version to ensure compatibility with the latest themes and modules. Contact the developer or support team for assistance if compatibility issues persist. Issue 3: Marketplace Navigation Problems Solution: If you encounter navigation problems or difficulties accessing certain sections of the Oqtane Marketplace, try the following troubleshooting steps: Clear your browser cache and cookies to ensure that you have the latest version of the Marketplace interface. Verify that your internet connection is stable and not experiencing any disruptions. If the issue persists, try accessing the Marketplace from a different web browser or device to isolate the problem. Reporting Issues If you encounter an issue that is not covered in this troubleshooting guide or need further assistance, you can report the problem to the Oqtane support team for investigation and resolution. Provide detailed information about the issue, including any error messages or screenshots, to help expedite the troubleshooting process. By following the troubleshooting steps outlined in this guide and reporting any unresolved issues to the Oqtane support team, you can ensure a smooth and hassle-free experience while using the Oqtane Marketplace."
  },
  "manuals/admin/marketplace/using-oqtane-marketplace.html": {
    "href": "manuals/admin/marketplace/using-oqtane-marketplace.html",
    "title": "Using The Oqtane Marketplace | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Using The Oqtane Marketplace Overview This manual will guide you through the process of using the Marketplace to enhance your Oqtane-based applications with themes, modules, and translations. To get started, navigate to the Module Management administration page to use the Oqtane Marketplace from the Administration Dashboard of your Oqtane site. From there, you can browse, install, and manage various resources to customize and extend your applications. Browsing and Discovering The Marketplace offers a vast selection of themes, modules, and translations for you to explore. Learn how to navigate the Marketplace and discover new resources for your Oqtane applications. Installing Resources Once you've found the themes, modules, or translations you need, it's time to install them on your Oqtane site. This section will walk you through the installation process, ensuring that you can quickly and easily add new features to your applications. Managing Installed Resources After installing resources from the Marketplace, you may need to manage them from time to time. Whether you want to enable, disable, or uninstall a resource, this section will show you how to effectively manage your installed themes, modules, and translations."
  },
  "manuals/admin/modules/adding-modules.html": {
    "href": "manuals/admin/modules/adding-modules.html",
    "title": "Adding Modules to a Page | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Adding Modules to a Page In order to add a module to a page, simply open the control panel with the gear icon in the top right of a page and in the module management feature there is the ability to select a new module from the options of: Admin Module: These are only available to people within the administrator role and there are many more default modules available to put onto your webpages. Common Module: These are available both to administrators and to registered users to be able to use on pages that are specified as personalizable, meaning users can modify them as they see fit and they are unique and only viewable to registered users. Developer Module: This feature is for placing a module creator onto a page which will provide you with useful pre-built structure and methods for writing code for your own modules. There are also features after selecting the module that you would like which are the: Title: Which is what will be displayed directly above the module as its title, if nothing is selected then the module's name will be put as the title. Pane: Select which content pane you want the module to go inside of. Panes are made visible with the content editor. Container: Select if you would like to have a title displayed above the module or not have one. Adding One Module Across Multiple Pages As noted earlier, modules are reusable pieces of functionality, and as such a single module can be inserted across multiple pages in a site. Say, for example, you have an HTML module that holds a banner image and you want that banner image to also exist on five specific pages in your site. Instead of adding a new module to all five of those pages and then inserting the same image, you can simply go into the Control Panel and then click Add an Existing Module to the page. Adding already existing modules or sharing modules across multiple pages makes managing content that's repeated much more efficient. A content manager can then make edits in one module and instantly have those edits reflected across every page on which the module is shared. When a user hovers over the Modules menu item just below the Add New Module option is the Add Existing Module option. This is the option you select when you want to add a module that already exists in the site to a different page. When opting to use Add Existing Module, you must first select the page to copy a module from, which will populate the drop-down list of modules. You can then follow the same process of adding a module to the page."
  },
  "manuals/admin/modules/creating-a-module.html": {
    "href": "manuals/admin/modules/creating-a-module.html",
    "title": "Creating a Module | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Creating a Module Learn how to create custom modules for Oqtane to extend its functionality and add new features to your applications. Overview Creating a module in Oqtane involves several steps, including setting up the project, defining module components, implementing functionality, and testing the module in different environments. Getting Started To create a module for Oqtane, follow these steps: Use the Oqtane Administration Dashboard > Module Management Create Module button to scaffold a new module project. Navigate to the project which will be located in the root folder of the Oqtane.Framework folder. Open the solution file in another instance of Visual Studio and build the project. Restart your Oqtane.Server Visual Studio application used to create the module. Implement module components, including views, services, and controllers. Define module configuration settings and permissions. Test the module locally to ensure that it behaves as expected. Package the module for distribution and installation on other Oqtane sites. Development Process The module development process typically involves: Project setup and configuration Component implementation and integration Testing and debugging Documentation and packaging Best Practices Follow the Oqtane module development guidelines and coding standards. Use dependency injection for managing dependencies and promoting modularity. Utilize Oqtane services and APIs for interacting with the platform and accessing data. Test your module in different environments to ensure compatibility and stability."
  },
  "manuals/admin/modules/customizing-module-appearance.html": {
    "href": "manuals/admin/modules/customizing-module-appearance.html",
    "title": "Customizing Module Appearance | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Customizing Module Appearance Discover how to customize the appearance and styling of modules in Oqtane to match your site's design and branding. Overview Modules in Oqtane can be customized to align with your site's visual identity and user experience goals. By applying custom styles and design elements, you can enhance the look and feel of individual modules and create a cohesive user interface across your site. Styling Options To customize the appearance of modules in Oqtane, consider the following options: CSS stylesheets: Apply custom styles to module elements using CSS. Theme integration: Integrate modules with your site's theme to ensure consistency in design and branding. Bootstrap components: Utilize Bootstrap components and utilities for responsive and accessible design. Implementation To implement custom styling for modules in Oqtane, follow these steps: Identify the module components and elements you want to customize. Create CSS stylesheets or modify existing styles to achieve the desired appearance. Apply the styles to the module components using class names or CSS selectors. Test the custom styles across different devices and browsers to ensure compatibility and responsiveness. Best Practices Use modular CSS styles to facilitate maintenance and scalability. Leverage Oqtane's theming capabilities to ensure consistent design across modules and pages. Test custom styles in various scenarios to identify potential issues and ensure a seamless user experience."
  },
  "manuals/admin/modules/index.html": {
    "href": "manuals/admin/modules/index.html",
    "title": "Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Modules Welcome to the Modules section of the Oqtane documentation. Here you'll find detailed guides on working with modules in your Oqtane-based applications. Whether you're adding new functionality, configuring existing modules, or troubleshooting issues, this section provides comprehensive resources to assist you. What is a Module? A module is a reusable, plug-and-play piece of functionality. It's a way to extend the functionality of the framework with whatever functionality you desire. Examples of modules could be photo galleries, blogs, rotators, forms, and so on. There can be multiple modules on a page and even multiple instances of the same module on a page. It's very common to see multiple HTML modules on a single page. When you install Oqtane, the platform ships with a base set of modules already installed in the system. There are too many that come with the solution out of the box to list here, but suffice it to say that all modules needed for basic functionality within a website come with the solution. More modules can also be downloaded for use or modules that you can created can be uploaded. Modules on Pages Modules are placed onto pages in locations called “panes”. These panes are defined by the theme's designer. These themes dictates the overall look and feel of your site and is usually created by a front-end designer. Panes can span the full width of the page or be positioned in a column fashion. It may be helpful to think of panes as windows in the design of the site where you can drop in modules. You can move modules around the panes by using the content editor. This is an example of a content pane. Topics Adding Modules: Learn how to add new modules to your Oqtane site to extend its functionality. Working With Modules: Explore various tasks and operations related to managing installed modules on your site. Installing Modules: Step-by-step instructions for installing modules on your Oqtane site. Configurating Modules: Customize and configure module settings to suit your specific requirements. Troubleshooting Modules: Troubleshooting tips and solutions for common issues encountered with modules. Developing Modules: Resources and guidelines for developing custom modules for Oqtane. Feel free to explore each topic to find the information you need to effectively work with modules in your Oqtane applications."
  },
  "manuals/admin/modules/module-configuration.html": {
    "href": "manuals/admin/modules/module-configuration.html",
    "title": "Module Configuration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Configuration Explore the various configuration options available for modules in Oqtane and customize their settings to meet your specific requirements. Overview Modules in Oqtane offer a range of configuration options, allowing you to customize their behavior and appearance to suit your needs. Configuring Modules To configure a module in Oqtane, follow these steps: Navigate to the Module Management section in the Administration Dashboard. Locate the module you want to configure and click on its settings icon. Adjust the module settings as needed. Click \"Save\" to apply the changes. Configuration Options Depending on the module, configuration options may include: Settings for data sources Display options Permissions and access control Integration with other modules or services Best Practices Regularly review and update module configurations to ensure optimal performance and functionality. Test module configurations in a development environment before deploying them to production."
  },
  "manuals/admin/modules/module-deployment.html": {
    "href": "manuals/admin/modules/module-deployment.html",
    "title": "Module Deployment | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Deployment Once you've developed and tested your module, it's time to deploy it to your Oqtane site. Deployment involves installing the module on your site and configuring it to meet your specific requirements. Installing the Module To install a module on your Oqtane site, follow these steps: Access Module Management: Navigate to the Module Management section in the Administration Dashboard of your Oqtane site. Upload Module Package: Click on the \"Upload Module\" button and select the module package file (*.oqp) from your local machine. Install Module: Once the module package is uploaded, click on the \"Install\" button to initiate the installation process. Confirmation: After installation, you'll receive a confirmation message indicating that the module was installed successfully. Activating the Module Modules in Oqtane are typically activated automatically upon installation. However, if needed, you can adjust module permissions to control access to the module's features. Configuring the Module After installation, you may need to configure the module settings to suit your specific requirements. This can include setting up permissions, defining custom settings, or integrating the module with other components of your site. Best Practices Testing: Before deploying the module to a production environment, thoroughly test it in a development or staging environment to ensure that it functions as expected. Documentation: Provide clear and comprehensive documentation for your module to help users understand its features and how to use them effectively. Version Control: Use version control systems like Git to manage the development and deployment of your module, allowing for easy tracking of changes and collaboration with other developers. By following these best practices, you can effectively deploy modules to your Oqtane site and enhance its functionality with custom features and capabilities."
  },
  "manuals/admin/modules/module-development.html": {
    "href": "manuals/admin/modules/module-development.html",
    "title": "Module Development Basics | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Module Development Basics This manual provides an introduction to module development in Oqtane, covering fundamental concepts and best practices. Overview Module development in Oqtane involves creating custom components that extend the platform's functionality. Whether you're building a simple module to display content or a complex module with advanced features, understanding the basics of module development is essential. Getting Started To begin developing modules for Oqtane, you'll need: A working knowledge of ASP.NET Core Familiarity with client-side web development technologies (HTML, CSS, JavaScript) Visual Studio or a similar IDE for .NET development The Oqtane CLI for scaffolding new module projects Key Concepts Module architecture and structure Dependency injection Module lifecycle events Data access and storage User interface components and interactions Best Practices Follow the Oqtane module development guidelines and coding standards. Test your modules thoroughly in different environments to ensure compatibility and stability. Document your code and provide clear instructions for module installation and usage."
  },
  "manuals/admin/modules/module-installation.html": {
    "href": "manuals/admin/modules/module-installation.html",
    "title": "Installing Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Installing Modules Learn how to install modules on your Oqtane site to extend its functionality and add new features. Overview To install modules on your Oqtane site, follow these steps: Navigate to the Module Management section in the Administration Dashboard. Click on the \"Install Module\" button. Select the module package file (.nupkg) from your local system. Click \"Upload\" to install the module. Installation Process Navigate to the Module Management section in the Administration Dashboard. Click on the \"Install Module\" button. Browse your local system and select the module package file (.nupkg). Click \"Upload\" to initiate the installation process. Once the module is successfully installed, you'll see it listed in the Module Management section."
  },
  "manuals/admin/modules/troubleshooting.html": {
    "href": "manuals/admin/modules/troubleshooting.html",
    "title": "Troubleshooting Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Modules Encountering issues with module installation or configuration? Here are some common problems and solutions: Common Issues Module Not Installing If you're having trouble installing a module, ensure that you have the correct module package and that it is compatible with your version of Oqtane. Also, check for any errors in the installation process. Module Not Functioning Properly If a module is not working as expected, verify that it is configured correctly and that any required dependencies are installed. Check the Oqtane logs for error messages or warnings that may indicate the cause of the issue. Error Messages If you encounter error messages during module installation or configuration, note down the error message and any accompanying details. Search for solutions online or consult the Oqtane community forums for assistance. Troubleshooting Steps Check Compatibility: Ensure that the module is compatible with your version of Oqtane and any other installed modules or themes. Review Configuration: Double-check the module configuration settings to ensure that everything is configured correctly. Inspect Logs: Look for error messages or warnings in the Oqtane log files, located in the /Logs directory of your Oqtane installation. Update Dependencies: Make sure that all dependencies required by the module are up-to-date and installed correctly. Contact Support: If you're unable to resolve the issue on your own, reach out to the module developer or the Oqtane community for assistance. By following these troubleshooting steps, you should be able to diagnose and resolve most module-related issues on your Oqtane site."
  },
  "manuals/admin/modules/working-with-modules.html": {
    "href": "manuals/admin/modules/working-with-modules.html",
    "title": "Working With Modules | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Working With Modules In order to access a module's settings, you must be in the content editor. To get into the editor, simply click over the pencil icon top-right corner of the page. This puts you into the edit mode where you will see small white arrows in the top-right corner of every module on the page. These small arrows at the top left corners of each module allow you to move the module on the page, access the module's settings, edit the module, delete the module, and access any specific functionality related to the module. Once in Edit mode you will notice that Oqtane uses a very user-friendly and intuitive approach to managing content. Whenever you want to edit content in Oqtane, you go to the location where the content resides and edit it right there in place. Moving Modules Once a module is on the page, you can move its location again if needed. All that is needed is to enter the content editor by clicking on the pencil icon in the top right hand side with editing permission on a certain page. And then selecting the small downward pointing arrow in the top left of the module to do a variety of things to it, including: Move to Top: Moves the modules to the top of the page to be the first module displayed. Move Up: Moves the module up to be above the module above it. Move Down: Move the module down below the module beneath it. Move to Bottom: Moves the module to the bottom of the page, below all other modules. If the page has the layout for multiple panes, which will allows for three center rows and a top and bottom row that can have content inserted into them, then there will be additional options available which are: Move to Top Pane: Moves the module to the content pane at the top of the page. Move to Left Pane: Moves the module to the left-most column. Move to Right Pane: Moves the module to the right-most column. Move to Content Pane: Moves the module to the central column. Move to Bottom Pane: Moves the module to the pane at the bottom of the page."
  },
  "manuals/admin/site-administration/content-editor.html": {
    "href": "manuals/admin/site-administration/content-editor.html",
    "title": "Content Editor | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Content Editor The content editor is what allows you to edit the modules on the page in a variety of ways. You access the content editor by clicking on the pencil on the top right side of the page which then shows the borders of the content pane which the modules are put inside of, as well as a small downward pointing arrow beside each module that allows you to open a menu to interact with the modules. The options for the module's menu are: Manage Settings: Brings up the module's settings and permissions which allow you to change the: Title: The title displayed above the module. Container: Specify if you want the title to be displayed for the module. Display on All Pages: Choose whether you want this module to be on every page on the site. Page: Change the page that the module is displayed on. Permissions: Specify either what roles or individual users should be able to view or edit the page. Unpublish Module: Hides the module from everyone, but the site administrators for instances where you want to edit modules. Delete Module: Deletes the module from the page. Import Content: Enter a file's address to import it into the module, such as a image address to include it. Export Content: Enter a file address to select where to export data from a module. Move to Top: Moves the modules to the top of the page to be the first module displayed. Move Up: Moves the module up to be above the module above it. Move Down: Move the module down below the module beneath it. Move to Bottom: Moves the module to the bottom of the page, below all other modules. If the page has the layout for multiple panes, which will allows for three center rows and a top and bottom row that can have content inserted into them, then there will be additional options available which are: Move to Top Pane: Moves the module to the content pane at the top of the page. Move to Left Pane: Moves the module to the left-most column. Move to Right Pane: Moves the module to the right-most column. Move to Content Pane: Moves the module to the central column. Move to Bottom Pane: Moves the module to the pane at the bottom of the page."
  },
  "manuals/admin/site-administration/index.html": {
    "href": "manuals/admin/site-administration/index.html",
    "title": "Site Administration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Site Administration Site administration in Oqtane is the processes, tasks, and features that it takes to effectively run a website in Oqtane. This includes things like managing users, security, site settings, configurations, and content using the features available to them, in both the control panel and the admin dashboard. Site administration can take on many forms, but there are two use cases that you should be familiar with. First, there's site administration as defined by Oqtane.You enable this by adding the Administrators security role as one of the assigned roles for the account. That way, all “admin” features will be available for that user across that specific site. Site administration can take on a hybrid of another sort as well, where you as the site administrator can define a different kind of administration for your site. This would be a kind of administration where you define a subset of administration capabilities and assign them to more privileged users to avoid having to make them an actual administrator. As an example, there may be times when you want to create a security role in the role manager that might be named something like Site Admin. You would then create a page or pages on the site that contain some of the Admin modules, assigning permission to the newly created Site Admin security role so that only participants of that security role can see them. In these areas, you can also add references or links to features that normally require Administrator permissions, provided you set up your permissions properly in those other areas and that the chosen feature(s) allows this. In summary, you can perform all of the configuration and content management tasks that you need to in order to run your own site."
  },
  "manuals/admin/themes/assets/placeholder.html": {
    "href": "manuals/admin/themes/assets/placeholder.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": ""
  },
  "manuals/admin/themes/index.html": {
    "href": "manuals/admin/themes/index.html",
    "title": "| Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Overview Get an overview of the themes section and its contents. Theme Management Explore theme management options, including installation, configuration, and troubleshooting. Installation Learn how to install themes on your Oqtane site to customize its appearance and enhance user experience. Configuration Explore the various configuration options available for themes in Oqtane and customize their settings to meet your specific requirements. Troubleshooting Encountering issues with theme installation or configuration? This section provides troubleshooting tips and solutions to common problems. Developing Themes Learn how to develop custom themes for your Oqtane site."
  },
  "manuals/admin/themes/theme-configuration.html": {
    "href": "manuals/admin/themes/theme-configuration.html",
    "title": "Theme Configuration | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Configuration Overview This manual provides guidance on configuring themes in Oqtane to customize their appearance and behavior according to your preferences. To access theme configuration settings, navigate to the Theme Management section in the Administration Dashboard of your Oqtane site. You can find this section by following these steps: Go to the Control Panel in the Administration Dashboard. Select \"Theme Management\" from the menu to access the theme configuration page. From there, you can adjust various options and settings to tailor the theme to your needs. Customization Options Themes in Oqtane offer a range of customization options, including: Color schemes Fonts and typography Layout and design elements Navigation menus Widget placement and configuration Step-by-Step Guide Navigate to the Administration Dashboard of your Oqtane site. Click on \"Theme Management\" to access the theme configuration page. Select the theme you want to configure from the list of installed themes. Explore the available customization options and settings. Make adjustments as desired to customize the theme to your liking. Save your changes to apply the configuration settings to the selected theme. Best Practices Experiment with different configuration options to find the look and feel that best suits your site. Regularly review and update theme configuration settings to keep your site's design fresh and relevant. Test the theme after making configuration changes to ensure that everything displays correctly and functions as expected. By following these guidelines, you can effectively configure themes in Oqtane to create visually appealing and user-friendly websites. Site Settings To configure themes at the site level, navigate to the \"Site Settings\" section in the Control Panel's Administration Dashboard. Here, you can access theme configuration settings and customize the appearance of your entire site. Page Management To configure themes at the page level, access the \"Page Management\" section in the Control Panel. Click the \"Edit\" button next to the page you want to configure, and then navigate to the Appearance Configuration section. Here, you can customize the appearance of individual pages using theme-specific settings."
  },
  "manuals/admin/themes/theme-development.html": {
    "href": "manuals/admin/themes/theme-development.html",
    "title": "Developing Themes | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Developing Themes Overview This manual serves as a guide for developers who want to create custom themes for the Oqtane framework. Whether you're looking to customize the appearance of your own site or contribute themes to the Oqtane Marketplace, this guide will help you get started with theme development. Getting Started To begin developing themes for Oqtane, you'll need a basic understanding of HTML, CSS, and JavaScript. Familiarity with Razor syntax and Blazor components is also beneficial, as Oqtane themes are built using these technologies. Theme Structure Oqtane themes follow a modular structure and consist of various components, including: Layouts: Define the overall structure and design of the theme. Views: Render content and components within the theme layout. Stylesheets: Define the visual appearance and styling of theme elements. JavaScript: Add interactivity and dynamic behavior to the theme. Theme Development Tools Several tools and resources are available to aid in theme development for Oqtane, including: Visual Studio: A lightweight and versatile code editor with support for HTML, CSS, and JavaScript. Visit Visual Studio for more information. Visual Studio Code: A lightweight and versatile code editor with support for HTML, CSS, and JavaScript. Visit Visual Studio Code for more information. Browser Developer Tools: Built-in tools for debugging and inspecting elements in web browsers (F12). Best Practices When developing themes for Oqtane, consider the following best practices: Keep your theme code modular, organized, and well-documented. Optimize your theme assets (HTML, CSS, JavaScript) for performance and accessibility. Test your theme across different browsers and devices to ensure compatibility and responsiveness. Stay up to date with Oqtane updates and conventions to leverage the latest features and improvements. By following these guidelines and best practices, you can create high-quality themes for Oqtane that enhance the visual appeal and usability of your applications."
  },
  "manuals/admin/themes/theme-installation.html": {
    "href": "manuals/admin/themes/theme-installation.html",
    "title": "Theme Installation | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Installation Overview This manual will guide you through the process of installing themes on your Oqtane site to customize its appearance and enhance user experience. To get started, navigate to the Theme Management section in the Administration Dashboard of your Oqtane site. From there, you can browse and install themes from the available options. Step-by-Step Guide Navigate to the Administration Dashboard of your Oqtane site. Click on \"Theme Management\" to access the theme installation page. Browse the available themes and select the one you want to install. Click on the \"Install\" button next to the chosen theme. Follow any prompts or instructions provided to complete the installation process. Once the installation is complete, the theme will be available for use on your Oqtane site. Additional Considerations Ensure that the theme you choose is compatible with your Oqtane site version. Check for any dependencies or additional requirements specified by the theme developer. Test the theme after installation to ensure that it displays correctly and functions as expected. By following these steps, you can easily install themes on your Oqtane site and customize its appearance to suit your needs."
  },
  "manuals/admin/themes/theme-management.html": {
    "href": "manuals/admin/themes/theme-management.html",
    "title": "Theme Management | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Theme Management Installation Learn how to install themes on your Oqtane site to customize its appearance and enhance user experience. Configuration Explore the various configuration options available for themes in Oqtane and customize their settings to meet your specific requirements. Troubleshooting Encountering issues with theme installation or configuration? This section provides troubleshooting tips and solutions to common problems."
  },
  "manuals/admin/themes/troubleshooting.html": {
    "href": "manuals/admin/themes/troubleshooting.html",
    "title": "Troubleshooting | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Troubleshooting Encountering issues with theme installation or configuration? Here are some common problems and solutions: Common Issues Theme Not Installing If you're having trouble installing a theme, ensure that you have the correct theme package and that it is compatible with your version of Oqtane. Also, check for any errors in the installation process. Theme Appearance Not Changing If you've installed a theme but don't see any changes on your site, try clearing your browser cache and refreshing the page. Additionally, check if the theme is activated and configured correctly in the Theme Management section. Error Messages If you encounter error messages during theme installation or configuration, note down the error message and any accompanying details. Search for solutions online or consult the Oqtane community forums for assistance. Troubleshooting Steps Check Compatibility: Ensure that the theme is compatible with your version of Oqtane and any other installed modules or themes. Review Configuration: Double-check the theme configuration settings to ensure that everything is configured correctly. Inspect Logs: Look for error messages or warnings in the Oqtane log files, located in the /Logs directory of your Oqtane installation. Update Dependencies: Make sure that all dependencies required by the theme are up-to-date and installed correctly. Contact Support: If you're unable to resolve the issue on your own, reach out to the theme developer or the Oqtane community for assistance. By following these troubleshooting steps, you should be able to diagnose and resolve most theme-related issues on your Oqtane site."
  },
  "readme.html": {
    "href": "readme.html",
    "title": "Oqtane Docs Builder | Oqtane Docs - APIs and more for the Modular Blazor Application Framework",
    "keywords": "Oqtane Docs Builder Read the readme.md in the parent folder"
  }
}